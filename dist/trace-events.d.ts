export namespace TraceEvent {
  interface Base {
    // Comma-separated list of category names.
    cat: string;
    // Process id of the process that generated the event.
    pid: number;
    // Thread id of the thread that generated the event.
    tid: number;
    // Timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
    ts: number;
  }

  type TraceEvent = 
    TraceEvent.A |
    TraceEvent.ActivateLayerTree |
    TraceEvent.Activation |
    TraceEvent.ActiveSchedulerTrackedFeature |
    TraceEvent.ADFUEL.AdFuelDOMContentLoaded |
    TraceEvent.ADFUEL.AdFuelInitialized |
    TraceEvent.ADFUEL.AdFuelRequestComplete |
    TraceEvent.ADFUEL.AdFuelwindow.Load |
    TraceEvent.ADFUEL.AdRenderedad_bnr_atf_01 |
    TraceEvent.ADFUEL.AdRenderedad_bnr_btf_01 |
    TraceEvent.ADFUEL.AdRenderedad_mod_35731bb1e |
    TraceEvent.ADFUEL.AdRenderedad_oop_float_01 |
    TraceEvent.ADFUEL.AdRenderedad_rect_btf_02 |
    TraceEvent.ADFUEL.ApplyingPageLevelTargeting |
    TraceEvent.ADFUEL.ApplyingWindowSiteLevelOptions |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01 |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01End |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01Start |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01 |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01End |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01Start |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02 |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02End |
    TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02Start |
    TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1e |
    TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1eEnd |
    TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1eStart |
    TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01 |
    TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01End |
    TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01Start |
    TraceEvent.ADFUEL.BuildingSlotad_oop_float_01 |
    TraceEvent.ADFUEL.BuildingSlotad_oop_float_01End |
    TraceEvent.ADFUEL.BuildingSlotad_oop_float_01Start |
    TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01 |
    TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01End |
    TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01Start |
    TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01 |
    TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01End |
    TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01Start |
    TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02 |
    TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02End |
    TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02Start |
    TraceEvent.ADFUEL.DelayingQueueDispatch |
    TraceEvent.ADFUEL.DispatchQueue |
    TraceEvent.ADFUEL.DispatchQueueEnd |
    TraceEvent.ADFUEL.DispatchQueueStart |
    TraceEvent.ADFUEL.GPTIncluded |
    TraceEvent.ADFUEL.PageLevelGPTBuild |
    TraceEvent.ADFUEL.PageLevelGPTBuildEnd |
    TraceEvent.ADFUEL.PageLevelGPTBuildStart |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473 |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473End |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473Start |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rbEnd |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rbStart |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020 |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020End |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020Start |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepage8364052550Start |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepageEnd |
    TraceEvent.ADFUEL.QueueRegistrycnn_homepageStart |
    TraceEvent.ADFUEL.RegisteringModule.Admiralv1_0_1 |
    TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev3_2_5 |
    TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev4_0_18 |
    TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev4_0_23 |
    TraceEvent.ADFUEL.RegisteringModule.BlockthroughModulev4_0_1 |
    TraceEvent.ADFUEL.RegisteringModule.BlockthroughModulev4_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.CEPModulev3_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.CEPModulev4_0_3 |
    TraceEvent.ADFUEL.RegisteringModule.CEPModulev4_0_4 |
    TraceEvent.ADFUEL.RegisteringModule.CreativeReviewModulev3_0_5 |
    TraceEvent.ADFUEL.RegisteringModule.CreativeReviewModulev4_0_1 |
    TraceEvent.ADFUEL.RegisteringModule.CriteoModulev3_2_2 |
    TraceEvent.ADFUEL.RegisteringModule.FreewheelProgrammatic1_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.IndexExchangeIdentity1_1_1 |
    TraceEvent.ADFUEL.RegisteringModule.IndexExchangeWrapperModulev3_1_1 |
    TraceEvent.ADFUEL.RegisteringModule.IntegralAdScienceModulev4_0_4 |
    TraceEvent.ADFUEL.RegisteringModule.IntegralAdScienceModulev4_0_6 |
    TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv3_0_5 |
    TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv4_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv4_0_6 |
    TraceEvent.ADFUEL.RegisteringModule.KruxModulev3_1_1 |
    TraceEvent.ADFUEL.RegisteringModule.KruxModulev4_1_2 |
    TraceEvent.ADFUEL.RegisteringModule.KruxModulev4_1_5 |
    TraceEvent.ADFUEL.RegisteringModule.MalvertisingDetectionv4_0_5 |
    TraceEvent.ADFUEL.RegisteringModule.MalvertisingDetectionv4_0_6 |
    TraceEvent.ADFUEL.RegisteringModule.PrebidModulev3_3_0 |
    TraceEvent.ADFUEL.RegisteringModule.PrebidModulev4_0_26 |
    TraceEvent.ADFUEL.RegisteringModule.PrebidModulev4_0_46 |
    TraceEvent.ADFUEL.RegisteringModule.ProximicModulev3_1_2 |
    TraceEvent.ADFUEL.RegisteringModule.ProximicModulev4_0_4 |
    TraceEvent.ADFUEL.RegisteringModule.ProximicModulev4_0_5 |
    TraceEvent.ADFUEL.RegisteringModule.SourcepointAddon.AdBlockingv4_0_1 |
    TraceEvent.ADFUEL.RegisteringModule.SourcepointAddon.AdBlockingv4_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.SSAIModulev4_0_12 |
    TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev3_1_1 |
    TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev4_0_1 |
    TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev4_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.TurnerGUIDModulev3_1_1 |
    TraceEvent.ADFUEL.RegisteringModule.TurnerGUIDModulev4_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.WarnerMediaIdentityModulev4_0_2 |
    TraceEvent.ADFUEL.RegisteringModule.WarnerMediaSegments4_0_2 |
    TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.Json |
    TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonEnd |
    TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonStart |
    TraceEvent.ADFUEL.SendingRequest |
    TraceEvent.ADFUEL.SendingRequestEnd |
    TraceEvent.ADFUEL.SendingRequestStart |
    TraceEvent.ADFUEL.SlotLoadedad_bnr_atf_01 |
    TraceEvent.ADFUEL.SlotLoadedad_mod_35731bb1e |
    TraceEvent.ADFUEL.SlotLoadedad_oop_float_01 |
    TraceEvent.ADFUEL.SlotLoadedad_rect_btf_02 |
    TraceEvent.Allactivesurfacesready |
    TraceEvent.Animation |
    TraceEvent.AnimationHost.ActivateAnimations |
    TraceEvent.AnimationHost.TickAnimations |
    TraceEvent.AnimationHost.UpdateAnimationState |
    TraceEvent.AnimationTimeline.ServiceAnimations |
    TraceEvent.AsyncSwapBuffers |
    TraceEvent.AutocompleteController.Start |
    TraceEvent.AutocompleteController.UpdateResult |
    TraceEvent.Autofill.Mojom.AutofillAgent |
    TraceEvent.Autofill.Mojom.AutofillDriver |
    TraceEvent.Autofill.Mojom.PasswordAutofillAgent |
    TraceEvent.Autofill.Mojom.PasswordManagerDriver |
    TraceEvent.BackendImpl.CreateEntryImpl |
    TraceEvent.BackendImpl.MatchEntry |
    TraceEvent.BackendImpl.OpenEntryImpl |
    TraceEvent.BackForwardCache_MaybeStorePage |
    TraceEvent.BackForwardCacheBufferLimitTracker.DidRemoveFrameOrWorkerFromBackForwardCache |
    TraceEvent.BackgroundHTMLParser.AppendRawBytesFromMainThread |
    TraceEvent.BackgroundHTMLParser.Init |
    TraceEvent.BackgroundHTMLParser.PumpTokenizer |
    TraceEvent.BackgroundHTMLParser.SendTokensToMainThread |
    TraceEvent.BeginFrame |
    TraceEvent.BeginImplFrameToSendBeginMainFrame |
    TraceEvent.BeginMainThreadFrame |
    TraceEvent.BeginNavigation |
    TraceEvent.BenchmarkInstrumentation.DisplayRenderingStats |
    TraceEvent.BenchmarkInstrumentation.ImplThreadRenderingStats |
    TraceEvent.BitmapImage.DataChanged |
    TraceEvent.BitmapImage.Draw |
    TraceEvent.Blankframe.NooverlaysorCALayers |
    TraceEvent.Blink.Mojom.AgentMetricsCollectorHost |
    TraceEvent.Blink.Mojom.AppCacheBackend |
    TraceEvent.Blink.Mojom.AppCacheFrontend |
    TraceEvent.Blink.Mojom.AppCacheHost |
    TraceEvent.Blink.Mojom.AssociatedInterfaceProvider |
    TraceEvent.Blink.Mojom.AutoplayConfigurationClient |
    TraceEvent.Blink.Mojom.Blob |
    TraceEvent.Blink.Mojom.BlobReaderClient |
    TraceEvent.Blink.Mojom.BlobRegistry |
    TraceEvent.Blink.Mojom.BrowserInterfaceBroker |
    TraceEvent.Blink.Mojom.CodeCacheHost |
    TraceEvent.Blink.Mojom.ContentSecurityNotifier |
    TraceEvent.Blink.Mojom.ControllerServiceWorker |
    TraceEvent.Blink.Mojom.DiskAllocator |
    TraceEvent.Blink.Mojom.DomStorage |
    TraceEvent.Blink.Mojom.DomStorageProvider |
    TraceEvent.Blink.Mojom.FileSystemManager |
    TraceEvent.Blink.Mojom.FrameWidget |
    TraceEvent.Blink.Mojom.FrameWidgetHost |
    TraceEvent.Blink.Mojom.HighPriorityLocalFrame |
    TraceEvent.Blink.Mojom.LocalFrame |
    TraceEvent.Blink.Mojom.LocalFrameHost |
    TraceEvent.Blink.Mojom.LocalMainFrameHost |
    TraceEvent.Blink.Mojom.ManifestManager |
    TraceEvent.Blink.Mojom.PageBroadcast |
    TraceEvent.Blink.Mojom.PeerConnectionManager |
    TraceEvent.Blink.Mojom.PluginRegistry |
    TraceEvent.Blink.Mojom.RemoteFrame |
    TraceEvent.Blink.Mojom.RemoteFrameHost |
    TraceEvent.Blink.Mojom.RemoteMainFrame |
    TraceEvent.Blink.Mojom.RendererAudioOutputStreamFactory |
    TraceEvent.Blink.Mojom.ReportingObserver |
    TraceEvent.Blink.Mojom.ServiceWorker |
    TraceEvent.Blink.Mojom.ServiceWorkerContainer |
    TraceEvent.Blink.Mojom.ServiceWorkerContainerHost |
    TraceEvent.Blink.Mojom.ServiceWorkerFetchResponseCallback |
    TraceEvent.Blink.Mojom.ServiceWorkerObjectHost |
    TraceEvent.Blink.Mojom.StorageArea |
    TraceEvent.Blink.Mojom.StorageAreaObserver |
    TraceEvent.Blink.Mojom.TextInputHost |
    TraceEvent.Blink.Mojom.Widget |
    TraceEvent.Blink.Mojom.WidgetHost |
    TraceEvent.Blink.Mojom.WidgetInputHandler |
    TraceEvent.Blink.Mojom.WidgetInputHandlerHost |
    TraceEvent.BlinkGC.AtomicPauseMarkEpilogue |
    TraceEvent.BlinkGC.AtomicPauseMarkPrologue |
    TraceEvent.BlinkGC.AtomicPauseMarkRoots |
    TraceEvent.BlinkGC.AtomicPauseMarkTransitiveClosure |
    TraceEvent.BlinkGC.AtomicPauseSweepAndCompact |
    TraceEvent.BlinkGC.AtomicPhase |
    TraceEvent.BlinkGC.CompleteSweep |
    TraceEvent.BlinkGC.ConcurrentMarkingStep |
    TraceEvent.BlinkGC.ConcurrentSweepingStep |
    TraceEvent.BlinkGC.IncrementalMarkingStartMarking |
    TraceEvent.BlinkGC.IncrementalMarkingStep |
    TraceEvent.BlinkGC.IncrementalMarkingWithDeadline |
    TraceEvent.BlinkGC.LazySweepInIdle |
    TraceEvent.BlinkGC.LazySweepOnAllocation |
    TraceEvent.BlinkGC.MarkBailOutObjects |
    TraceEvent.BlinkGC.MarkFlushEphemeronPairs |
    TraceEvent.BlinkGC.MarkFlushV8References |
    TraceEvent.BlinkGC.MarkInvokeEphemeronCallbacks |
    TraceEvent.BlinkGC.MarkProcessMarkingWorklist |
    TraceEvent.BlinkGC.MarkProcessNotFullyconstructeddWorklist |
    TraceEvent.BlinkGC.MarkProcessWorklists |
    TraceEvent.BlinkGC.MarkProcessWriteBarrierWorklist |
    TraceEvent.BlinkGC.UnifiedMarkingStep |
    TraceEvent.BlinkGC.VisitRoots |
    TraceEvent.BlinkGCMarking |
    TraceEvent.BlobReader.CountSize |
    TraceEvent.BlobReader.ReadBytesItem |
    TraceEvent.BlobReader.ReadMore |
    TraceEvent.Blocking |
    TraceEvent.BookmarkProvider.Start |
    TraceEvent.Browser.OnActiveTabChanged |
    TraceEvent.Browser.OnTabStripModelChanged |
    TraceEvent.Browser.RenderProcessHostImpl |
    TraceEvent.Browser.UpdateToolbar |
    TraceEvent.BrowserCrApplication.SendEvent |
    TraceEvent.BrowserToRendererCompositor |
    TraceEvent.BrowserView.Layout |
    TraceEvent.BrowserView.OnActiveTabChanged |
    TraceEvent.BrowserView.UpdateUIForContents |
    TraceEvent.BrowserViewLayout.Layout |
    TraceEvent.BrowserViewLayout.LayoutBookmarkAndInfoBars |
    TraceEvent.BrowserViewLayout.LayoutContentsContainerView |
    TraceEvent.BrowserViewLayout.LayoutDownloadShelf |
    TraceEvent.BrowserViewLayout.LayoutTabStripRegion |
    TraceEvent.BrowserViewLayout.LayoutToolbar |
    TraceEvent.BrowserViewLayout.LayoutWebUITabStrip |
    TraceEvent.BudgetPool_DisableThrottling |
    TraceEvent.BudgetPool_EnableThrottling |
    TraceEvent.CalculateRenderSurfaceLayerList |
    TraceEvent.CancelAnimationFrame |
    TraceEvent.CancelIdleCallback |
    TraceEvent.CANCELLED |
    TraceEvent.Canvas2DLayerBridge.FinalizeFrame |
    TraceEvent.Canvas2DLayerBridge.FlushRecording |
    TraceEvent.Canvas2DLayerBridgeCreation |
    TraceEvent.CanvasRenderingContext2D.FinalizeFrame |
    TraceEvent.CanvasResourceProviderSharedImage.CreateResource |
    TraceEvent.CanvasResourceProviderSharedImage.CreateSkSurface |
    TraceEvent.CanvasResourceProviderSharedImage.Snapshot |
    TraceEvent.CanvasResourceRasterSharedImage.Bitmap |
    TraceEvent.CanvasResourceRasterSharedImage.Create |
    TraceEvent.CARendererLayerTree.CommitScheduledCALayers |
    TraceEvent.CATransactionCoordinator.Postcommithandler |
    TraceEvent.CATransactionCoordinator.Precommithandler |
    TraceEvent.Cc.Mojom.RenderFrameMetadataObserver |
    TraceEvent.Cc.Mojom.RenderFrameMetadataObserverClient |
    TraceEvent.CERT_VERIFIER_REQUEST_BOUND_TO_JOB |
    TraceEvent.CERT_VERIFIER_REQUEST |
    TraceEvent.CERT_VERIFIER_TASK_BOUND |
    TraceEvent.CERT_VERIFIER_TASK |
    TraceEvent.CERT_VERIFY_PROC_INPUT_CERT |
    TraceEvent.CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT |
    TraceEvent.CERT_VERIFY_PROC_PATH_BUILT |
    TraceEvent.CERT_VERIFY_PROC_TARGET_CERT |
    TraceEvent.CERT_VERIFY_PROC |
    TraceEvent.ChannelMojo.OnMessageReceived |
    TraceEvent.CheckerImageTracker.ShouldCheckerImage |
    TraceEvent.CheckUrl |
    TraceEvent.ChildThreadImpl.Init |
    TraceEvent.Chrome.Mojom.CacheStatsRecorder |
    TraceEvent.Chrome.Mojom.ChromeRenderFrame |
    TraceEvent.Chrome.Mojom.NetworkDiagnosticsClient |
    TraceEvent.Chrome.Mojom.RendererConfiguration |
    TraceEvent.Chromerendererextensionsextension_localization_peer.Cc |
    TraceEvent.ChromeRenderFrameObserver.CapturePageText |
    TraceEvent.ClassicPendingScript.GetSource |
    TraceEvent.ClassifyNavigation |
    TraceEvent.ClientDiscardableSharedMemoryManager.AllocateLockedDiscardableSharedMemory |
    TraceEvent.CommandBufferHelper.Finish |
    TraceEvent.CommandBufferHelper.Flush |
    TraceEvent.CommandBufferProxyImpl.Flush |
    TraceEvent.CommandBufferProxyImpl.Initialize |
    TraceEvent.CommandBufferProxyImpl.OrderingBarrier |
    TraceEvent.CommandBufferProxyImpl.WaitForGetOffset |
    TraceEvent.CommandBufferService.Paused |
    TraceEvent.CommandBufferService.PutChanged |
    TraceEvent.CommandBufferStub.OnAsyncFlush |
    TraceEvent.CommandBufferStub.OnDestroyTransferBuffer |
    TraceEvent.CommandBufferStub.OnRegisterTransferBuffer |
    TraceEvent.CommandBufferStub.OnSetGetBuffer |
    TraceEvent.CommandBufferStub.OnWaitForGetOffsetInRange |
    TraceEvent.CommandDispatcher.PerformKeyEquivalent |
    TraceEvent.CommandDispatcher.PreSendEvent |
    TraceEvent.CommandDispatcher.RedispatchKeyEvent |
    TraceEvent.Commit |
    TraceEvent.CommitLoad |
    TraceEvent.CommitNavigationEnd |
    TraceEvent.CommitPendingTreesToCA |
    TraceEvent.Componentscast_channelmojo_data_pump.Cc |
    TraceEvent.CompositeLayers |
    TraceEvent.CompositingInputsUpdater.Update |
    TraceEvent.CompositingLayerAssigner.Assign |
    TraceEvent.CompositingRequirementsUpdater.UpdateRecursive |
    TraceEvent.Compositor_tq |
    TraceEvent.CompositorTimingHistory.ClearHistory |
    TraceEvent.CONNECT_JOB_SET_SOCKET |
    TraceEvent.CONNECT_JOB |
    TraceEvent.ConsoleMessage.Error |
    TraceEvent.Container_0B1564F57920B21667889FA7471D4D85_0.EmbedRequest |
    TraceEvent.Container_0B1564F57920B21667889FA7471D4D85_0.PlayerReady |
    TraceEvent.Content_settings.Mojom.ContentSettingsManager |
    TraceEvent.Content.Mojom.AgentSchedulingGroup |
    TraceEvent.Content.Mojom.ChildHistogramFetcherFactory |
    TraceEvent.Content.Mojom.ChildProcess |
    TraceEvent.Content.Mojom.ChildProcessHost |
    TraceEvent.Content.Mojom.Frame |
    TraceEvent.Content.Mojom.FrameFactory |
    TraceEvent.Content.Mojom.FrameHost |
    TraceEvent.Content.Mojom.FrameSinkProvider |
    TraceEvent.Content.Mojom.NavigationClient |
    TraceEvent.Content.Mojom.Renderer |
    TraceEvent.Content.Mojom.RendererHost |
    TraceEvent.Content.Mojom.RendererVariationsConfiguration |
    TraceEvent.Content.Mojom.RouteProvider |
    TraceEvent.Content.Mojom.SandboxSupportMac |
    TraceEvent.ContentLayerDelegate.PaintContents |
    TraceEvent.ContentMainRunnerImpl.Initialize |
    TraceEvent.Contentrendererloadernavigation_body_loader.Cc |
    TraceEvent.Context.AddFinishedBlobFromItems |
    TraceEvent.ContextCreatedNotification |
    TraceEvent.Control_tq |
    TraceEvent.COOKIE_INCLUSION_STATUS |
    TraceEvent.COOKIE_STORE_COOKIE_ADDED |
    TraceEvent.COOKIE_STORE_COOKIE_DELETED |
    TraceEvent.CreateGrGLInterfacebind_with_flush_on_macafterfunc |
    TraceEvent.CreateGrGLInterfacebind_with_flush_on_macbeforefunc |
    TraceEvent.CreateIOSurface |
    TraceEvent.CSSParserImpl.ParseStyleSheet.Parse |
    TraceEvent.CustomElementRegistry.Define |
    TraceEvent.Damagenotvisible |
    TraceEvent.Database.BeginTransaction |
    TraceEvent.Database.CommitTransaction |
    TraceEvent.Database.Delete |
    TraceEvent.Database.ReleaseCacheMemoryIfNeeded |
    TraceEvent.DataReductionProxyCompressionStats.RecordDataUseWithMimeType |
    TraceEvent.DecodedDataDocumentParser.AppendBytes |
    TraceEvent.DecodeFont |
    TraceEvent.DecodeImage |
    TraceEvent.DecodeLazyPixelRef |
    TraceEvent.DecodingImageGenerator.GetPixels |
    TraceEvent.DecodingImageGenerator.GetYUVAPlanes |
    TraceEvent.DecodingImageGenerator.QueryYUVAInfo |
    TraceEvent.Default_tq |
    TraceEvent.Deferred |
    TraceEvent.DelayBasedBeginFrameSource.OnTimerTick |
    TraceEvent.DelayBasedTimeSource.SetActive |
    TraceEvent.Device.Mojom.DeviceService |
    TraceEvent.Device.Mojom.PowerMonitor |
    TraceEvent.Device.Mojom.PowerMonitorClient |
    TraceEvent.Device.Mojom.TimeZoneMonitor |
    TraceEvent.Device.Mojom.WakeLock |
    TraceEvent.Device.Mojom.WakeLockContext |
    TraceEvent.Device.Mojom.WakeLockProvider |
    TraceEvent.DidCommitNavigation.Errorpage |
    TraceEvent.DidCommitProvisionalLoad_StateResetForNewDocument |
    TraceEvent.DidPrepareTiles |
    TraceEvent.DirectRenderer.DrawFrame |
    TraceEvent.DirectRenderer.DrawRenderPass |
    TraceEvent.Discardable_memory.Mojom.DiscardableSharedMemoryManager |
    TraceEvent.DiscardableImageMap.Generate |
    TraceEvent.DiskUsage |
    TraceEvent.Display.DrawAndSwap |
    TraceEvent.Display.FrameDisplayed |
    TraceEvent.Display.Resize |
    TraceEvent.Display.SetSurfaceId |
    TraceEvent.Display.SetVisible |
    TraceEvent.DisplayCALayerTree.GotCAContextFrame |
    TraceEvent.DisplayDamageTracker.HasPendingSurfaces |
    TraceEvent.DisplayDamageTracker.SetNewRootSurface |
    TraceEvent.DisplayDamageTracker.SetRootFrameMissing |
    TraceEvent.DisplayDamageTracker.SurfaceDamaged |
    TraceEvent.DisplayDamageTracker.SurfaceDamageExpected |
    TraceEvent.DisplayDamageTracker.SurfaceDestroyed |
    TraceEvent.DisplayLinkMac.DisplayLinkCallback |
    TraceEvent.DisplayLinkMac.UpdateVSyncParameters |
    TraceEvent.DisplayResourceProvider.DeleteResourceInternal |
    TraceEvent.DisplayScheduler.BeginFrame |
    TraceEvent.DisplayScheduler.DrawAndSwap |
    TraceEvent.DisplayScheduler.OnBeginFrameDeadline |
    TraceEvent.DisplayScheduler.Pending_swaps |
    TraceEvent.DisplayScheduler.ScheduleBeginFrameDeadline |
    TraceEvent.DNS_TRANSACTION_ATTEMPT |
    TraceEvent.DNS_TRANSACTION_QUERY |
    TraceEvent.DNS_TRANSACTION_RESPONSE |
    TraceEvent.DNS_TRANSACTION |
    TraceEvent.Document.RebuildLayoutTree |
    TraceEvent.Document.RecalcStyle |
    TraceEvent.Document.SetURL |
    TraceEvent.Document.Shutdown |
    TraceEvent.Document.UpdateActiveStyle |
    TraceEvent.Document.UpdateStyle |
    TraceEvent.Document.UpdateStyleInvalidationIfNeeded |
    TraceEvent.DocumentLoader.BodyDataReceived |
    TraceEvent.DocumentLoader.BodyLoadingFinished |
    TraceEvent.DocumentLoader.CommitData |
    TraceEvent.DocumentLoader.HandleData |
    TraceEvent.DocumentProvider.Start |
    TraceEvent.DocumentProvider.Stop |
    TraceEvent.DocumentStatisticsCollector.CollectStatistics |
    TraceEvent.Dom_distiller.Mojom.DistillabilityService |
    TraceEvent.DomComplete |
    TraceEvent.DOMContentLoaded |
    TraceEvent.DomContentLoadedEventEnd |
    TraceEvent.DomContentLoadedEventStart |
    TraceEvent.DomInteractive |
    TraceEvent.DomLoading |
    TraceEvent.DomReady |
    TraceEvent.DomTime |
    TraceEvent.DOMWindow.DoPostMessage |
    TraceEvent.Draw_property_utils.ComputeDrawPropertiesOfVisibleLayers |
    TraceEvent.Draw_property_utils.FindLayersThatNeedUpdates |
    TraceEvent.DrawFrame |
    TraceEvent.DrawLayers.FrameViewerTracing |
    TraceEvent.DrawLazyPixelRef |
    TraceEvent.Drawskipped |
    TraceEvent.DroppedFrame |
    TraceEvent.EarlyOut_DeferCommit_InsideBeginMainFrame |
    TraceEvent.EarlyOut_NoDamage |
    TraceEvent.EarlyOut_NoUpdates |
    TraceEvent.EditingUtility.NextCandidateAlgorithm |
    TraceEvent.EditingUtility.PreviousCandidateAlgorithm |
    TraceEvent.ElementAnimations.SetRunState |
    TraceEvent.EndActivateToSubmitCompositorFrame |
    TraceEvent.EndCommitToActivation |
    TraceEvent.EndofTrace |
    TraceEvent.Entiredisplaydamaged |
    TraceEvent.EvaluateScript |
    TraceEvent.EventDispatch |
    TraceEvent.EventHandler.HandleMouseLeaveEvent |
    TraceEvent.EventHandler.HandleMouseMoveEvent |
    TraceEvent.EventHandler.HandleMousePressEvent |
    TraceEvent.EventHandler.HandleMouseReleaseEvent |
    TraceEvent.EventHandler.HitTestResultAtLocation |
    TraceEvent.EventLatency |
    TraceEvent.ExtensionHostMsg_AddFilteredListener |
    TraceEvent.ExtensionHostMsg_AddLazyListener |
    TraceEvent.ExtensionHostMsg_AddListener |
    TraceEvent.ExtensionHostMsg_CloseMessagePort |
    TraceEvent.ExtensionHostMsg_EventAck |
    TraceEvent.ExtensionHostMsg_ExecuteCodeFinished |
    TraceEvent.ExtensionHostMsg_GetMessageBundle |
    TraceEvent.ExtensionHostMsg_OpenChannelToExtension |
    TraceEvent.ExtensionHostMsg_OpenChannelToTab |
    TraceEvent.ExtensionHostMsg_OpenMessagePort |
    TraceEvent.ExtensionHostMsg_PostMessage |
    TraceEvent.ExtensionHostMsg_RemoveFilteredListener |
    TraceEvent.ExtensionHostMsg_RemoveListener |
    TraceEvent.ExtensionHostMsg_Request |
    TraceEvent.ExtensionMsg_ActivateExtension |
    TraceEvent.ExtensionMsg_DeliverMessage |
    TraceEvent.ExtensionMsg_DispatchEvent |
    TraceEvent.ExtensionMsg_DispatchOnConnect |
    TraceEvent.ExtensionMsg_DispatchOnDisconnect |
    TraceEvent.ExtensionMsg_ExecuteCode |
    TraceEvent.ExtensionMsg_Loaded |
    TraceEvent.ExtensionMsg_NotifyRenderViewType |
    TraceEvent.ExtensionMsg_Response |
    TraceEvent.ExtensionMsg_SetScriptingAllowlist |
    TraceEvent.ExtensionMsg_SetSessionInfo |
    TraceEvent.ExtensionMsg_SetSystemFont |
    TraceEvent.ExtensionMsg_SetTabId |
    TraceEvent.ExtensionMsg_UpdateBrowserWindowId |
    TraceEvent.ExtensionMsg_UpdateDefaultPolicyHostRestrictions |
    TraceEvent.ExtensionMsg_UpdateUserScripts |
    TraceEvent.ExtensionMsg_ValidateMessagePort |
    TraceEvent.ExtensionMsg_WatchPages |
    TraceEvent.Extensions.FeatureProvider.FeatureProviderStatic |
    TraceEvent.ExternalBeginFrameSource.OnBeginFrame |
    TraceEvent.FaveReady_mark |
    TraceEvent.FaveReady |
    TraceEvent.FaviconBackend.CloneFaviconMappingsForPages |
    TraceEvent.FaviconBackend.GetFaviconsForURL |
    TraceEvent.FaviconServiceImpl.GetFaviconForPageURL |
    TraceEvent.FaviconServiceImpl.GetFaviconImageForPageURL |
    TraceEvent.FaviconServiceImpl.RunFaviconImageCallbackWithBitmapResults |
    TraceEvent.FaviconUtil.SelectFaviconFramesFromPNGs |
    TraceEvent.FaviconUtil.SelectFaviconFramesFromPNGsWithoutResizing |
    TraceEvent.FetchStart |
    TraceEvent.FireAnimationFrame |
    TraceEvent.FireIdleCallback |
    TraceEvent.FirstContentfulPaint |
    TraceEvent.FirstImagePaint |
    TraceEvent.FirstInputDelay.AllFrames.UMA |
    TraceEvent.FirstLayout |
    TraceEvent.FirstMeaningfulPaint |
    TraceEvent.FirstMeaningfulPaintCandidate |
    TraceEvent.FirstPaint |
    TraceEvent.FirstTextPaint |
    TraceEvent.FirstVisualChange |
    TraceEvent.FlingBooster.Reset |
    TraceEvent.FontCache.GetFontPlatformData |
    TraceEvent.FontCache.PurgeFallbackListShaperCache |
    TraceEvent.FooterEnd |
    TraceEvent.FooterStart |
    TraceEvent.FooterTime |
    TraceEvent.Frame_deferrable_tq |
    TraceEvent.Frame_loading_tq |
    TraceEvent.Frame_pausable_tq |
    TraceEvent.Frame_throttleable_tq |
    TraceEvent.Frame_unpausable_tq |
    TraceEvent.Frame |
    TraceEvent.FrameBlameContext |
    TraceEvent.FrameCommittedInBrowser |
    TraceEvent.FrameDeletedInBrowser |
    TraceEvent.FrameHostMsg_CreateChildFrame |
    TraceEvent.FrameHostMsg_Unload_ACK |
    TraceEvent.FrameLoader.StartNavigation |
    TraceEvent.FramePresented |
    TraceEvent.FrameRateDecider.SetPreferredInterval |
    TraceEvent.FrameRateDecider.UpdatePreferredFrameIntervalIfNeedednotenoughframesinkstotoggle |
    TraceEvent.FrameRequestCallbackCollection.ExecuteFrameCallbacks |
    TraceEvent.FrameSequenceTracker |
    TraceEvent.FrameStartedLoading |
    TraceEvent.FrameTreeNode.DidStartLoading |
    TraceEvent.FrameTreeNode.DidStopLoading |
    TraceEvent.FrameView.Layout |
    TraceEvent.FrameView.PerformLayout |
    TraceEvent.FrameView.PerformPostLayoutTasks |
    TraceEvent.FrameView.PerformPreLayoutTasks |
    TraceEvent.FunctionCall |
    TraceEvent.GestureProvider.InitGestureDetectors |
    TraceEvent.GestureProvider.OnTouchEvent |
    TraceEvent.GetAccessToken |
    TraceEvent.GLContext.BackpressureFenceCreate |
    TraceEvent.GLContext.BackpressureFenceWait |
    TraceEvent.GLContext.FlushForDriverCrashWorkaround |
    TraceEvent.GLContextCGL.MakeCurrent |
    TraceEvent.GLES2.Finish |
    TraceEvent.GLES2.GetShaderPrecisionFormat |
    TraceEvent.GLES2.PostSubBufferCHROMIUM |
    TraceEvent.GLES2.ReadPixels |
    TraceEvent.GLES2CommandBufferStub.Initialize |
    TraceEvent.GLES2DecoderImpl.DoCompileShader |
    TraceEvent.GLES2DecoderImpl.DoCreateAndTexStorage2DSharedImageCHROMIUM |
    TraceEvent.GLES2DecoderImpl.DoLinkProgram |
    TraceEvent.GLES2DecoderImpl.DoTexStorage2D |
    TraceEvent.GLES2DecoderImpl.DoTexStorage2DImageCHROMIUM |
    TraceEvent.GLES2DecoderImpl.FinishReadPixels |
    TraceEvent.GLES2DecoderImpl.HandlePostSubBufferCHROMIUM |
    TraceEvent.GLES2DecoderImpl.HandleReadPixels |
    TraceEvent.GLES2DecoderImpl.Initialize |
    TraceEvent.GLES2DecoderImpl.InitializeShaderTranslator |
    TraceEvent.GLES2DecoderImpl.RestoreState |
    TraceEvent.GLES2Implementation.Initialize |
    TraceEvent.GLES2Implementation.SetAggressivelyFreeResources |
    TraceEvent.GLFence.HasCompleted |
    TraceEvent.GLImageIOSurface.BindTexImage |
    TraceEvent.GlobalFirstContentfulPaint |
    TraceEvent.GLRenderer.BeginDrawingFrame |
    TraceEvent.GLRenderer.InitializeSharedObjects |
    TraceEvent.GLRenderer.SwapBuffers |
    TraceEvent.GlResizeChromium |
    TraceEvent.Goog_123_3_1_end |
    TraceEvent.Goog_123_3_1_start |
    TraceEvent.Goog_123_3_1 |
    TraceEvent.Gpu.EstablishGpuChannelSync |
    TraceEvent.GpuChannel.OnCreateCommandBuffer |
    TraceEvent.GpuChannel.OnDestroyCommandBuffer |
    TraceEvent.GpuChannelHost.CreateViewCommandBuffer |
    TraceEvent.GpuChannelHost.Send |
    TraceEvent.GpuChannelMsg_CreateCommandBuffer |
    TraceEvent.GpuChannelMsg_CreateGMBSharedImage |
    TraceEvent.GpuChannelMsg_CreateSharedImage |
    TraceEvent.GpuChannelMsg_CreateSharedImageWithData |
    TraceEvent.GpuChannelMsg_DestroyCommandBuffer |
    TraceEvent.GpuChannelMsg_DestroySharedImage |
    TraceEvent.GpuChannelMsg_RegisterSharedImageUploadBuffer |
    TraceEvent.GpuCommandBufferMsg_AsyncFlush |
    TraceEvent.GpuCommandBufferMsg_DestroyTransferBuffer |
    TraceEvent.GpuCommandBufferMsg_RegisterTransferBuffer |
    TraceEvent.GpuCommandBufferMsg_SetGetBuffer |
    TraceEvent.GpuCommandBufferMsg_WaitForGetOffsetInRange |
    TraceEvent.GpuHostImpl.CreateChannelCache |
    TraceEvent.GpuHostImpl.EstablishGpuChannel |
    TraceEvent.GpuHostImpl.OnChannelEstablished |
    TraceEvent.GpuHostImpl.StoreShaderToDisk |
    TraceEvent.GpuImageDecodeCache.DecodeImage |
    TraceEvent.GpuImageDecodeCache.UploadImage |
    TraceEvent.GpuImageDecodeTaskImpl.RunOnWorkerThread |
    TraceEvent.GpuRasterBuffer.Playback |
    TraceEvent.GPUTask |
    TraceEvent.Graphics.Pipeline.DrawAndSwap |
    TraceEvent.GraphicsLayer.PaintContents |
    TraceEvent.GraphicsLayerTreeBuilder.Rebuild |
    TraceEvent.GraphicsLayerUpdater.Update |
    TraceEvent.GrShaderCache.Load |
    TraceEvent.GrShaderCache.Store |
    TraceEvent.HandleMouseMove |
    TraceEvent.HeadEnd |
    TraceEvent.HeadTime |
    TraceEvent.HistoryBackend.AddPage |
    TraceEvent.HistoryBackend.AddPagesWithDetails |
    TraceEvent.HistoryBackend.CloneFaviconMappingsForPages |
    TraceEvent.HistoryBackend.ProcessDBTask |
    TraceEvent.HistoryBackend.SetPageTitle |
    TraceEvent.HistoryQuickProvider.Start |
    TraceEvent.HistoryService.AddPage |
    TraceEvent.HistoryService.CloneFaviconMappingsForPages |
    TraceEvent.HistoryService.GetFaviconsForURL |
    TraceEvent.HistoryService.ScheduleDBTask |
    TraceEvent.HistoryService.ScheduleTask |
    TraceEvent.HistoryService.SetPageTitle |
    TraceEvent.HistoryURLProvider.QueryComplete |
    TraceEvent.HistoryURLProvider.Start |
    TraceEvent.HitTest |
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_FINISHED |
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_STARTED |
    TraceEvent.HOST_RESOLVER_IMPL_CACHE_HIT |
    TraceEvent.HOST_RESOLVER_IMPL_CREATE_JOB |
    TraceEvent.HOST_RESOLVER_IMPL_DNS_TASK |
    TraceEvent.HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK |
    TraceEvent.HOST_RESOLVER_IMPL_JOB_ATTACH |
    TraceEvent.HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH |
    TraceEvent.HOST_RESOLVER_IMPL_JOB_STARTED |
    TraceEvent.HOST_RESOLVER_IMPL_JOB |
    TraceEvent.HOST_RESOLVER_IMPL_PROC_TASK |
    TraceEvent.HOST_RESOLVER_IMPL_REQUEST |
    TraceEvent.HTMLDocumentParser.Append |
    TraceEvent.HTMLDocumentParser.AppendBytes |
    TraceEvent.HTMLDocumentParser.AttemptToEnd |
    TraceEvent.HTMLDocumentParser.DocumentElementAvailable |
    TraceEvent.HTMLDocumentParser.EndIfDelayed |
    TraceEvent.HTMLDocumentParser.EnqueueTokenizedChunk |
    TraceEvent.HTMLDocumentParser.ExecuteScriptsWaitingForResources |
    TraceEvent.HTMLDocumentParser.FetchQueuedPreloads |
    TraceEvent.HTMLDocumentParser.Flush |
    TraceEvent.HTMLDocumentParser.Insert |
    TraceEvent.HTMLDocumentParser.NotifyScriptLoaded |
    TraceEvent.HTMLDocumentParser.PrepareToStopParsing |
    TraceEvent.HTMLDocumentParser.ProcessTokenizedChunkFromBackgroundParser |
    TraceEvent.HTMLDocumentParser.PumpTokenizer |
    TraceEvent.HTMLDocumentParser.PumpTokenizerIfPossible |
    TraceEvent.HTMLDocumentParser.ResumeParsingAfterPause |
    TraceEvent.HTMLDocumentParser.RunScriptsForPausedTreeBuilder |
    TraceEvent.HTMLDocumentParser.StartBackgroundParser |
    TraceEvent.HTMLFrameOwnerElement.LoadOrRedirectSubframe |
    TraceEvent.HTMLParserScriptRunner.Execute |
    TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForLoad |
    TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForParsing |
    TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForResources |
    TraceEvent.HTMLParserScriptRunnerExecuteScript |
    TraceEvent.HTMLSelectElement.SelectOption |
    TraceEvent.HTTP_CACHE_ADD_TO_ENTRY |
    TraceEvent.HTTP_CACHE_CALLER_REQUEST_HEADERS |
    TraceEvent.HTTP_CACHE_CREATE_ENTRY |
    TraceEvent.HTTP_CACHE_DOOM_ENTRY |
    TraceEvent.HTTP_CACHE_GET_BACKEND |
    TraceEvent.HTTP_CACHE_OPEN_OR_CREATE_ENTRY |
    TraceEvent.HTTP_CACHE_READ_DATA |
    TraceEvent.HTTP_CACHE_READ_INFO |
    TraceEvent.HTTP_CACHE_WRITE_DATA |
    TraceEvent.HTTP_CACHE_WRITE_INFO |
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB |
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_REQUEST |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_BOUND |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER |
    TraceEvent.HTTP_STREAM_JOB_DELAYED |
    TraceEvent.HTTP_STREAM_JOB_INIT_CONNECTION |
    TraceEvent.HTTP_STREAM_JOB_THROTTLED |
    TraceEvent.HTTP_STREAM_JOB_WAITING |
    TraceEvent.HTTP_STREAM_JOB |
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_JOB |
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION |
    TraceEvent.HTTP_STREAM_REQUEST_PROTO |
    TraceEvent.HTTP_STREAM_REQUEST_STARTED_JOB |
    TraceEvent.HTTP_STREAM_REQUEST |
    TraceEvent.HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS |
    TraceEvent.HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS |
    TraceEvent.HTTP_TRANSACTION_READ_BODY |
    TraceEvent.HTTP_TRANSACTION_READ_HEADERS |
    TraceEvent.HTTP_TRANSACTION_READ_RESPONSE_HEADERS |
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST |
    TraceEvent.HTTP2_SESSION_CLOSE |
    TraceEvent.HTTP2_SESSION_INITIALIZED |
    TraceEvent.HTTP2_SESSION_PING |
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL |
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION |
    TraceEvent.HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET |
    TraceEvent.HTTP2_SESSION_POOL_REMOVE_SESSION |
    TraceEvent.HTTP2_SESSION_RECV_DATA |
    TraceEvent.HTTP2_SESSION_RECV_GOAWAY |
    TraceEvent.HTTP2_SESSION_RECV_HEADERS |
    TraceEvent.HTTP2_SESSION_RECV_RST_STREAM |
    TraceEvent.HTTP2_SESSION_RECV_SETTING |
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS_ACK |
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS |
    TraceEvent.HTTP2_SESSION_RECV_WINDOW_UPDATE |
    TraceEvent.HTTP2_SESSION_SEND_DATA |
    TraceEvent.HTTP2_SESSION_SEND_HEADERS |
    TraceEvent.HTTP2_SESSION_SEND_RST_STREAM |
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS_ACK |
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS |
    TraceEvent.HTTP2_SESSION_SEND_WINDOW_UPDATE |
    TraceEvent.HTTP2_SESSION_UPDATE_RECV_WINDOW |
    TraceEvent.HTTP2_SESSION_UPDATE_SEND_WINDOW |
    TraceEvent.HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE |
    TraceEvent.HTTP2_SESSION |
    TraceEvent.HTTP2_STREAM_SEND_PRIORITY |
    TraceEvent.HTTP2_STREAM_UPDATE_RECV_WINDOW |
    TraceEvent.HTTP2_STREAM_UPDATE_SEND_WINDOW |
    TraceEvent.HTTP3_DATA_FRAME_RECEIVED |
    TraceEvent.HTTP3_DATA_SENT |
    TraceEvent.HTTP3_HEADERS_DECODED |
    TraceEvent.HTTP3_HEADERS_RECEIVED |
    TraceEvent.HTTP3_HEADERS_SENT |
    TraceEvent.HTTP3_LOCAL_CONTROL_STREAM_CREATED |
    TraceEvent.HTTP3_LOCAL_QPACK_DECODER_STREAM_CREATED |
    TraceEvent.HTTP3_LOCAL_QPACK_ENCODER_STREAM_CREATED |
    TraceEvent.HTTP3_PEER_CONTROL_STREAM_CREATED |
    TraceEvent.HTTP3_PEER_QPACK_DECODER_STREAM_CREATED |
    TraceEvent.HTTP3_PEER_QPACK_ENCODER_STREAM_CREATED |
    TraceEvent.HTTP3_PRIORITY_UPDATE_SENT |
    TraceEvent.HTTP3_SETTINGS_RECEIVED |
    TraceEvent.HTTP3_SETTINGS_RESUMED |
    TraceEvent.HTTP3_SETTINGS_SENT |
    TraceEvent.HTTP3_UNKNOWN_FRAME_RECEIVED |
    TraceEvent.HttpCacheTransaction.DoAddToEntry |
    TraceEvent.HttpCacheTransaction.DoAddToEntryComplete |
    TraceEvent.HttpCacheTransaction.DoCacheDispatchValidation |
    TraceEvent.HttpCacheTransaction.DoCacheReadData |
    TraceEvent.HttpCacheTransaction.DoCacheReadDataComplete |
    TraceEvent.HttpCacheTransaction.DoCacheReadResponse |
    TraceEvent.HttpCacheTransaction.DoCacheReadResponseComplete |
    TraceEvent.HttpCacheTransaction.DoCacheWriteResponse |
    TraceEvent.HttpCacheTransaction.DoCacheWriteResponseComplete |
    TraceEvent.HttpCacheTransaction.DoCacheWriteUpdatedResponse |
    TraceEvent.HttpCacheTransaction.DoCacheWriteUpdatedResponseComplete |
    TraceEvent.HttpCacheTransaction.DoCreateEntry |
    TraceEvent.HttpCacheTransaction.DoCreateEntryComplete |
    TraceEvent.HttpCacheTransaction.DoDoomEntry |
    TraceEvent.HttpCacheTransaction.DoDoomEntryComplete |
    TraceEvent.HttpCacheTransaction.DoInitEntry |
    TraceEvent.HttpCacheTransaction.DoNetworkRead |
    TraceEvent.HttpCacheTransaction.DoNetworkReadCacheWrite |
    TraceEvent.HttpCacheTransaction.DoNetworkReadCacheWriteComplete |
    TraceEvent.HttpCacheTransaction.DoNetworkReadComplete |
    TraceEvent.HttpCacheTransaction.DoOpenOrCreateEntry |
    TraceEvent.HttpCacheTransaction.DoOpenOrCreateEntryComplete |
    TraceEvent.HttpCacheTransaction.DoOverwriteCachedResponse |
    TraceEvent.HttpCacheTransaction.DoSendRequest |
    TraceEvent.HttpCacheTransaction.DoSendRequestComplete |
    TraceEvent.HttpCacheTransaction.DoSuccessfulSendRequest |
    TraceEvent.HttpCacheTransaction.DoTruncateCachedData |
    TraceEvent.HttpCacheTransaction.DoTruncateCachedMetadata |
    TraceEvent.HttpCacheTransaction.DoTruncateCachedMetadataComplete |
    TraceEvent.HttpCacheTransaction.DoUpdateCachedResponse |
    TraceEvent.HttpCacheTransaction.DoUpdateCachedResponseComplete |
    TraceEvent.HttpCacheTransaction.Transaction |
    TraceEvent.IdentityGetAuthTokenFunction |
    TraceEvent.IdentityMintRequestQueue |
    TraceEvent.Idle_tq |
    TraceEvent.ImageAnimationController.AnimateImagesForSyncTree |
    TraceEvent.ImageAnimationController.InvalidationScheduler.RequestBeginFrame |
    TraceEvent.ImageAnimationController.InvalidationScheduler.RequestInvalidation |
    TraceEvent.ImageAnimationController.WillActivate |
    TraceEvent.ImageDecoder.DecodeFrameBufferAtIndex |
    TraceEvent.ImageDecodeTask |
    TraceEvent.ImageFrameGenerator.Decode |
    TraceEvent.ImageFrameGenerator.DecodeAndScale |
    TraceEvent.ImageFrameGenerator.DecodeToYUV |
    TraceEvent.ImageFrameGenerator.GetYUVAInfo |
    TraceEvent.ImageResourceContent.UpdateImage |
    TraceEvent.ImageTransportSurfaceOverlayMac.ApplyBackpressure |
    TraceEvent.ImageTransportSurfaceOverlayMac.SwapBuffersInternal |
    TraceEvent.ImageUploadTask |
    TraceEvent.ImageUploadTaskImpl.RunOnWorkerThread |
    TraceEvent.ImplementationBase.Initialize |
    TraceEvent.ImplementationBase.WaitForCmd |
    TraceEvent.InitializeMojoIPCChannel |
    TraceEvent.Initializing |
    TraceEvent.InProcessCommandBuffer.Flush |
    TraceEvent.InProcessCommandBuffer.FlushOnGpuThread |
    TraceEvent.InProcessCommandBuffer.Initialize |
    TraceEvent.InProcessCommandBuffer.InitializeOnGpuThread |
    TraceEvent.Input_tq |
    TraceEvent.InputEventSentBlocking |
    TraceEvent.InputLatency.KeyUp |
    TraceEvent.InputLatency.MouseDown |
    TraceEvent.InputLatency.MouseLeave |
    TraceEvent.InputLatency.MouseMove |
    TraceEvent.InputLatency.MouseUp |
    TraceEvent.InputLatency.RawKeyDown |
    TraceEvent.InputRouterImpl.FilterAndSendWebInputEvent |
    TraceEvent.InputRouterImpl.KeboardEventHandled |
    TraceEvent.InputRouterImpl.MouseEventHandled |
    TraceEvent.InputRouterImpl.OnHasTouchEventHandlers |
    TraceEvent.InstallConditionalFeatures |
    TraceEvent.InteractiveTime |
    TraceEvent.IntersectionObserverController.ComputeIntersections |
    TraceEvent.InvalidateLayout |
    TraceEvent.Io_thread_tq |
    TraceEvent.Io_user_blocking_tq |
    TraceEvent.IPCChannel |
    TraceEvent.IteratingoverWebContentsObservers |
    TraceEvent.Jank |
    TraceEvent.Job.WaitForParticipationOpportunity |
    TraceEvent.KeyedServiceFactory.GetServiceForContext |
    TraceEvent.KeyframeModel |
    TraceEvent.KeyWindow |
    TraceEvent.KeywordProvider.Start |
    TraceEvent.LargestContentfulPaint.Candidate |
    TraceEvent.LargestImagePaint.Candidate |
    TraceEvent.LargestImagePaint.NoCandidate |
    TraceEvent.LargestTextPaint.Candidate |
    TraceEvent.LargeUIJank |
    TraceEvent.LatencyInfo.Flow |
    TraceEvent.LaunchProcess |
    TraceEvent.Layer.PaintContentsToDisplayList |
    TraceEvent.LayerAnimator.Step |
    TraceEvent.LayerId |
    TraceEvent.LayerTreeHost.AnimationHost.PushProperties |
    TraceEvent.LayerTreeHost.ApplyCompositorChanges |
    TraceEvent.LayerTreeHost.DidLoseLayerTreeFrameSink |
    TraceEvent.LayerTreeHost.DoUpdateLayers |
    TraceEvent.LayerTreeHost.FinishCommitOnImplThread |
    TraceEvent.LayerTreeHost.InitializeForReal |
    TraceEvent.LayerTreeHost.LayerTreeHost |
    TraceEvent.LayerTreeHost.PushProperties |
    TraceEvent.LayerTreeHost.SetLayerTreeFrameSink |
    TraceEvent.LayerTreeHost.UpdateLayers.BuildPropertyTrees |
    TraceEvent.LayerTreeHostImpl.ActivateSyncTree |
    TraceEvent.LayerTreeHostImpl.BeginCommit |
    TraceEvent.LayerTreeHostImpl.BuildHitTestData |
    TraceEvent.LayerTreeHostImpl.CalculateRenderPasses.EmptyDamageRect |
    TraceEvent.LayerTreeHostImpl.CanDrawemptyviewport |
    TraceEvent.LayerTreeHostImpl.CanDrawnorootlayer |
    TraceEvent.LayerTreeHostImpl.CanDrawUIresourcesevictednotrecreated |
    TraceEvent.LayerTreeHostImpl.CommitComplete |
    TraceEvent.LayerTreeHostImpl.InitializeFrameSink |
    TraceEvent.LayerTreeHostImpl.LayerTreeHostImpl |
    TraceEvent.LayerTreeHostImpl.NotifyTileStateChanged |
    TraceEvent.LayerTreeHostImpl.PrepareToDraw |
    TraceEvent.LayerTreeHostImpl.ReleaseLayerTreeFrameSink |
    TraceEvent.LayerTreeHostImpl.SetVisible |
    TraceEvent.LayerTreeImpl.InvalidateRegionForImages |
    TraceEvent.LayerTreeImpl.PushPropertiesTo |
    TraceEvent.LayerTreeImpl.PushPropertyTreesTo |
    TraceEvent.LayerTreeImpl.UpdateDrawProperties.CalculateDrawProperties |
    TraceEvent.LayerTreeImpl.UpdateDrawProperties.Occlusion |
    TraceEvent.LayerTreeImpl.UpdateDrawProperties.UpdateTiles |
    TraceEvent.Layout |
    TraceEvent.LayoutObject.InvalidateSubtreeForFontUpdates |
    TraceEvent.LayoutShift |
    TraceEvent.LayoutView.CommitPendingSelection |
    TraceEvent.LoadAnyStartablePendingRequests |
    TraceEvent.LoadEndeventUtils |
    TraceEvent.LoadEndpixelQueue |
    TraceEvent.LoadEventEnd |
    TraceEvent.LoadEventStart |
    TraceEvent.LoadFinished |
    TraceEvent.LoadStarteventUtils |
    TraceEvent.LoadStartpixelQueue |
    TraceEvent.LocalDOMWindow.DispatchMessageEventWithOriginCheck |
    TraceEvent.LocalFrameView.DidFinishLifecycleUpdate |
    TraceEvent.LocalFrameView.Layout |
    TraceEvent.LocalFrameView.NotifyResizeObservers |
    TraceEvent.LocalFrameView.PerformLayout |
    TraceEvent.LocalFrameView.PerformPostLayoutTasks |
    TraceEvent.LocalFrameView.PerformPreLayoutTasks |
    TraceEvent.LocalFrameView.PropagateFrameRects |
    TraceEvent.LocalFrameView.PushPaintArtifactToCompositor |
    TraceEvent.LocalFrameView.RunAccessibilityLifecyclePhase |
    TraceEvent.LocalFrameView.RunCompositingAssignmentsLifecyclePhase |
    TraceEvent.LocalFrameView.RunCompositingInputsLifecyclePhase |
    TraceEvent.LocalFrameView.RunPaintLifecyclePhase |
    TraceEvent.LocalFrameView.RunPrePaintLifecyclePhase |
    TraceEvent.LocalFrameView.RunStyleAndLayoutLifecyclePhases |
    TraceEvent.LocalFrameView.UpdateLifecyclePhasesstartoflifecycletasks |
    TraceEvent.LocalFrameView.UpdateStyleAndLayoutIfNeededRecursive |
    TraceEvent.LocalFrameView.UpdateViewportIntersectionsForSubtree |
    TraceEvent.LocalFrameView.WillStartLifecycleUpdate |
    TraceEvent.LocalHistoryZeroSuggestProvider.Start |
    TraceEvent.LocalWindowProxy.CreateContext |
    TraceEvent.LocalWindowProxy.Initialize |
    TraceEvent.LocalWindowProxy.SetupWindowPrototypeChain |
    TraceEvent.LocalWindowProxy.UpdateDocumentProperty |
    TraceEvent.LoginDatabase.GetLogins |
    TraceEvent.LogMessage |
    TraceEvent.LongDrawInterval |
    TraceEvent.LongIdlePeriod |
    TraceEvent.LongIdlePeriodPaused |
    TraceEvent.LongTask |
    TraceEvent.Lteu |
    TraceEvent.Ltpq |
    TraceEvent.MainThreadEventQueue.HandleEvent |
    TraceEvent.MainThreadSchedulerIdlePeriod |
    TraceEvent.MajorGC |
    TraceEvent.Mark_jset |
    TraceEvent.Mark_test |
    TraceEvent.MarkAsMainFrame |
    TraceEvent.MarkDOMContent |
    TraceEvent.MarkLoad |
    TraceEvent.Measure_test |
    TraceEvent.Media_router.Mojom.MediaRouteProvider |
    TraceEvent.Media_router.Mojom.MediaRouter |
    TraceEvent.Media_session.Mojom.MediaSessionObserver |
    TraceEvent.Memory_instrumentation.Mojom.CoordinatorConnector |
    TraceEvent.Memory_instrumentation.Mojom.CoordinatorController |
    TraceEvent.Memory.GPU.PeakMemoryUsage.AblationTimes |
    TraceEvent.MemoryCache.Evict |
    TraceEvent.MemoryCache.Prune |
    TraceEvent.MemoryUsage |
    TraceEvent.MessageLoop.RunTask |
    TraceEvent.MessagePipeclosing |
    TraceEvent.MessagePipepeerclosed |
    TraceEvent.MessagePipeReader.Receive |
    TraceEvent.MessagePipeReader.Send |
    TraceEvent.MessagePort.Accept |
    TraceEvent.Metrics.Mojom.CallStackProfileCollector |
    TraceEvent.MetricsWebContentsObserver.MaybeActivatePageLoadTracker |
    TraceEvent.MetricsWebContentsObserver.MaybeRestorePageLoadTrackerForBackForwardCache |
    TraceEvent.MinorGC |
    TraceEvent.MintTokenFlow |
    TraceEvent.Mojo.MessageReceive |
    TraceEvent.Mojo.MessageSend |
    TraceEvent.Mojopubliccppsystemdata_pipe_producer.Cc |
    TraceEvent.Mojopubliccppsystemhandle_signal_tracker.Cc |
    TraceEvent.MojoURLLoaderClient.OnReceiveResponse |
    TraceEvent.Moredamageexpectedsoon |
    TraceEvent.MouseEventManager.HandleMouseDraggedEvent |
    TraceEvent.MouseEventManager.HandleMousePressEvent |
    TraceEvent.NavigationBodyLoader.OnReadable |
    TraceEvent.NavigationBodyLoader.OnStartLoadingResponseBody |
    TraceEvent.NavigationBodyLoader.ReadFromDataPipe |
    TraceEvent.NavigationBodyLoader.StartLoadingBody |
    TraceEvent.NavigationControllerImpl.LoadURLWithParams |
    TraceEvent.NavigationRequest |
    TraceEvent.NavigationStart |
    TraceEvent.NavigationStartToCommit |
    TraceEvent.NavigationThrottle.WillFailRequest |
    TraceEvent.NavigationThrottle.WillProcessResponse |
    TraceEvent.NavigationThrottle.WillStartRequest |
    TraceEvent.NavigationtimeToResponseStarted |
    TraceEvent.NavigationTimingnavigationStart |
    TraceEvent.Navigator.Navigate |
    TraceEvent.NavStartToExperimentalLargestContentfulPaint.Candidate.AllFrames.UKM |
    TraceEvent.NavStartToExperimentalLargestContentfulPaint.Invalidate.AllFrames.UKM |
    TraceEvent.NavStartToLargestContentfulPaint.Candidate.AllFrames.UKM |
    TraceEvent.NavStartToLargestContentfulPaint.Invalidate.AllFrames.UKM |
    TraceEvent.NeedsBeginFrameChanged |
    TraceEvent.NeedsBeginFrames |
    TraceEvent.NeedsTickAnimations |
    TraceEvent.NETWORK_DELEGATE_BEFORE_START_TRANSACTION |
    TraceEvent.NETWORK_DELEGATE_BEFORE_URL_REQUEST |
    TraceEvent.NETWORK_DELEGATE_HEADERS_RECEIVED |
    TraceEvent.Network_hints.Mojom.NetworkHintsHandler |
    TraceEvent.NETWORK_QUALITY_CHANGED |
    TraceEvent.Network.Mojom.CookieAccessObserver |
    TraceEvent.Network.Mojom.CookieChangeListener |
    TraceEvent.Network.Mojom.CookieManager |
    TraceEvent.Network.Mojom.CrossOriginEmbedderPolicyReporter |
    TraceEvent.Network.Mojom.NetworkContext |
    TraceEvent.Network.Mojom.NetworkContextClient |
    TraceEvent.Network.Mojom.NetworkQualityEstimatorManagerClient |
    TraceEvent.Network.Mojom.NetworkServiceClient |
    TraceEvent.Network.Mojom.ProxyConfigPollerClient |
    TraceEvent.Network.Mojom.ProxyLookupClient |
    TraceEvent.Network.Mojom.ResolveHostClient |
    TraceEvent.Network.Mojom.RestrictedCookieManager |
    TraceEvent.Network.Mojom.TrustedHeaderClient |
    TraceEvent.Network.Mojom.TrustedURLLoaderHeaderClient |
    TraceEvent.Network.Mojom.URLLoader |
    TraceEvent.Network.Mojom.URLLoaderClient |
    TraceEvent.Network.Mojom.URLLoaderFactory |
    TraceEvent.Network.URLLoader.SendResponseToClient |
    TraceEvent.NGInlineNode.ShapeText |
    TraceEvent.Nodamageyet |
    TraceEvent.Node.MarkSubtreeNeedsStyleRecalcForFontUpdates |
    TraceEvent.Node.UpdateDistribution |
    TraceEvent.Non_waking_tq |
    TraceEvent.NSWindow.PerformKeyEquivalent |
    TraceEvent.NSWindow.SendEvent |
    TraceEvent.Num_cpus |
    TraceEvent.Obmark0c_search |
    TraceEvent.Obmark0odbMB_120 |
    TraceEvent.Obmark0odbTR_11 |
    TraceEvent.Obmark0renderMB_120 |
    TraceEvent.Obmark0renderTR_11 |
    TraceEvent.Obmark0start |
    TraceEvent.Obmark1c_foundMB_120 |
    TraceEvent.Obmark1c_foundTR_11 |
    TraceEvent.Obmark1odb_rMB_120 |
    TraceEvent.Obmark1odb_rTR_11 |
    TraceEvent.Obmark1renderedMB_120 |
    TraceEvent.Obmark1renderedTR_11 |
    TraceEvent.Obmeasurec_foundMB_120 |
    TraceEvent.Obmeasurec_foundTR_11 |
    TraceEvent.Obmeasureodb_rMB_120 |
    TraceEvent.Obmeasureodb_rTR_11 |
    TraceEvent.ObmeasureodbMB_120 |
    TraceEvent.ObmeasureodbTR_11 |
    TraceEvent.ObmeasurerenderedMB_120 |
    TraceEvent.ObmeasurerenderedTR_11 |
    TraceEvent.OnDeviceHeadProvider.Start |
    TraceEvent.Onetapvideo.EmbedRequest |
    TraceEvent.Onetapvideo.PlayerReady |
    TraceEvent.OnLoad |
    TraceEvent.OnMintTokenSuccess |
    TraceEvent.OnRequestFailed |
    TraceEvent.OnResponseStarted |
    TraceEvent.Optimizely.BlockBegin |
    TraceEvent.OptimizelyEnd |
    TraceEvent.OptimizelyStart |
    TraceEvent.OptimizelyTime |
    TraceEvent.OverlayInterstitialAdDetector.MaybeFireDetection |
    TraceEvent.OverlayProcessorMac.ProcessForOverlays |
    TraceEvent.Page_load_metrics.Mojom.PageLoadMetrics |
    TraceEvent.PageAnimator.ServiceScriptedAnimations |
    TraceEvent.PageLoad |
    TraceEvent.PageMsg_SetHistoryOffsetAndLength |
    TraceEvent.Paint |
    TraceEvent.PaintArtifact.AppendToWebDisplayItemList |
    TraceEvent.PaintArtifact.Replay |
    TraceEvent.PaintArtifactCompositor.Update |
    TraceEvent.PaintController.CommitNewDisplayItems |
    TraceEvent.PaintImage |
    TraceEvent.PaintLayer.UpdateDescendantDependentFlags |
    TraceEvent.PaintLayer.UpdateLayerPositionsAfterLayout |
    TraceEvent.PaintLayerCompositor.UpdateAssignmentsIfNeededRecursive |
    TraceEvent.PaintLayerCompositor.UpdateInputsIfNeededRecursive |
    TraceEvent.PaintNonDefaultBackgroundColor |
    TraceEvent.PaintTimingVisualizer.LayoutObjectPainted |
    TraceEvent.PaintTimingVisualizer.Viewport |
    TraceEvent.ParkableStringImpl.CompressInBackground |
    TraceEvent.ParkableStringImpl.Unpark |
    TraceEvent.ParkableStringManager.AgeStringsAndPark |
    TraceEvent.ParseAuthorStyleSheet |
    TraceEvent.ParseHTML |
    TraceEvent.PartitionAllocMemoryReclaimer.Reclaim |
    TraceEvent.PasswordStore.GetLogins |
    TraceEvent.PeakMemoryTracking |
    TraceEvent.PendingAnimations.NotifyCompositorAnimationStarted |
    TraceEvent.PendingScript.ExecuteScriptBlock |
    TraceEvent.PendingTree.Waiting |
    TraceEvent.Performance_manager.Mojom.DocumentCoordinationUnit |
    TraceEvent.Performance_manager.Mojom.ProcessCoordinationUnit |
    TraceEvent.PipelineReporter |
    TraceEvent.PlatformResourceSendRequest |
    TraceEvent.PostCommit |
    TraceEvent.PostingToCompositor |
    TraceEvent.PreemptionAllowedStackScope |
    TraceEvent.PreloadRenderBlockingStatusChange |
    TraceEvent.PrePaint |
    TraceEvent.PrerenderManagerFactory.GetForProfile |
    TraceEvent.Printing.Mojom.PrintRenderFrame |
    TraceEvent.Process_labels |
    TraceEvent.Process_name |
    TraceEvent.Process_sort_index |
    TraceEvent.Process_uptime_seconds |
    TraceEvent.ProcessCommitResponse |
    TraceEvent.ProcessUIResourceRequestQueue |
    TraceEvent.ProfileManager.GetProfileInfoCache |
    TraceEvent.ProgramBindingBase.Init |
    TraceEvent.PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST |
    TraceEvent.PROXY_RESOLUTION_SERVICE |
    TraceEvent.Proxy_resolver.Mojom.ProxyResolver |
    TraceEvent.Proxy_resolver.Mojom.ProxyResolverRequestClient |
    TraceEvent.ProxyImpl.BeginMainFrameAbortedOnImplThread |
    TraceEvent.ProxyImpl.DidActivateSyncTreeOnImplThread |
    TraceEvent.ProxyImpl.DidReceiveCompositorFrameAckOnImplThread |
    TraceEvent.ProxyImpl.FinishGLOnImplThread |
    TraceEvent.ProxyImpl.InitializeLayerTreeFrameSinkOnImplThread |
    TraceEvent.ProxyImpl.NotifyReadyToActivate |
    TraceEvent.ProxyImpl.NotifyReadyToCommitOnImpl |
    TraceEvent.ProxyImpl.NotifyReadyToDraw |
    TraceEvent.ProxyImpl.OnCanDrawStateChanged |
    TraceEvent.ProxyImpl.ProxyImpl |
    TraceEvent.ProxyImpl.RequestBeginMainFrameNotExpected |
    TraceEvent.ProxyImpl.ScheduledActionActivateSyncTree |
    TraceEvent.ProxyImpl.ScheduledActionBeginLayerTreeFrameSinkCreation |
    TraceEvent.ProxyImpl.ScheduledActionCommit |
    TraceEvent.ProxyImpl.ScheduledActionDraw |
    TraceEvent.ProxyImpl.ScheduledActionPerformImplSideInvalidation |
    TraceEvent.ProxyImpl.ScheduledActionPrepareTiles |
    TraceEvent.ProxyImpl.SetNeedsCommitOnImplThread |
    TraceEvent.ProxyImpl.SetNeedsOneBeginImplFrameOnImplThread |
    TraceEvent.ProxyImpl.SetNeedsRedrawOnImplThread |
    TraceEvent.ProxyImpl.SetVisibleOnImplThread |
    TraceEvent.ProxyMain.BeginMainFrame.Commit |
    TraceEvent.ProxyMain.BeginMainFrameNotExpectedSoon |
    TraceEvent.ProxyMain.BeginMainFrameNotExpectedUntil |
    TraceEvent.ProxyMain.DidInitializeLayerTreeFrameSink |
    TraceEvent.ProxyMain.ProxyMain |
    TraceEvent.ProxyMain.RequestNewLayerTreeFrameSink |
    TraceEvent.ProxyMain.SetDeferCommits |
    TraceEvent.ProxyMain.SetDeferMainFrameUpdate |
    TraceEvent.ProxyMain.SetNeedsAnimate |
    TraceEvent.ProxyMain.SetNeedsCommit |
    TraceEvent.ProxyMain.SetNeedsUpdateLayers |
    TraceEvent.ProxyMain.SetVisible |
    TraceEvent.ProxyMain.Stop |
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS |
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS |
    TraceEvent.QUIC_CONNECTION_MIGRATION_MODE |
    TraceEvent.QUIC_SESSION_ACK_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_ACK_FRAME_SENT |
    TraceEvent.QUIC_SESSION_CERTIFICATE_VERIFIED |
    TraceEvent.QUIC_SESSION_CLOSED |
    TraceEvent.QUIC_SESSION_COALESCED_PACKET_SENT |
    TraceEvent.QUIC_SESSION_CRYPTO_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_CRYPTO_FRAME_SENT |
    TraceEvent.QUIC_SESSION_HANDSHAKE_DONE_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_MAX_STREAMS_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_PACKET_AUTHENTICATED |
    TraceEvent.QUIC_SESSION_PACKET_LOST |
    TraceEvent.QUIC_SESSION_PACKET_RECEIVED |
    TraceEvent.QUIC_SESSION_PADDING_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_PADDING_FRAME_SENT |
    TraceEvent.QUIC_SESSION_PING_FRAME_SENT |
    TraceEvent.QUIC_SESSION_RST_STREAM_FRAME_SENT |
    TraceEvent.QUIC_SESSION_STOP_SENDING_FRAME_SENT |
    TraceEvent.QUIC_SESSION_STREAM_FRAME_COALESCED |
    TraceEvent.QUIC_SESSION_STREAM_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_STREAM_FRAME_SENT |
    TraceEvent.QUIC_SESSION_TRANSPORT_PARAMETERS_RECEIVED |
    TraceEvent.QUIC_SESSION_TRANSPORT_PARAMETERS_RESUMED |
    TraceEvent.QUIC_SESSION_TRANSPORT_PARAMETERS_SENT |
    TraceEvent.QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED |
    TraceEvent.QUIC_SESSION_VERSION_NEGOTIATED |
    TraceEvent.QUIC_SESSION_WINDOW_UPDATE_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION |
    TraceEvent.QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB |
    TraceEvent.QUIC_STREAM_FACTORY_JOB_CONNECT |
    TraceEvent.QUIC_STREAM_FACTORY_JOB |
    TraceEvent.RasterBufferStub.Initialize |
    TraceEvent.RasterDecoderImpl.DoEndRasterCHROMIUM.Flush |
    TraceEvent.RasterDecoderImpl.DoRasterCHROMIUM |
    TraceEvent.RasterDecoderImpl.FlushToWorkAroundMacCrashes |
    TraceEvent.RasterDecoderImpl.Initialize |
    TraceEvent.RasterImplementation.Initialize |
    TraceEvent.RasterImplementation.RasterCHROMIUM |
    TraceEvent.RasterImplementation.SetAggressivelyFreeResources |
    TraceEvent.RasterizerTaskImpl.RunOnWorkerThread |
    TraceEvent.RasterSource.PerformSolidColorAnalysis |
    TraceEvent.RasterTask |
    TraceEvent.ReadyToCommitNavigation |
    TraceEvent.RealTimeDomain.DelayTillNextTask |
    TraceEvent.ReceiveCompositorFrameToStartDraw |
    TraceEvent.RecordingSource.DetermineIfSolidColor |
    TraceEvent.RecordingSource.FinishDisplayItemListUpdate |
    TraceEvent.RedirectEnd |
    TraceEvent.RedirectStart |
    TraceEvent.RemoteWindowProxy.Initialize |
    TraceEvent.RendererAudioState |
    TraceEvent.RendererMain.START_MSG_LOOP |
    TraceEvent.RendererPriority |
    TraceEvent.RendererProcessType |
    TraceEvent.RendererVisibility |
    TraceEvent.RenderFrame |
    TraceEvent.RenderFrameHostImpl.BeginNavigation |
    TraceEvent.RenderFrameHostImpl.CommitNavigation |
    TraceEvent.RenderFrameHostImpl.CreateRenderFrame |
    TraceEvent.RenderFrameHostImpl.DidCommitProvisionalLoad |
    TraceEvent.RenderFrameHostImpl.DidStopLoading |
    TraceEvent.RenderFrameHostImpl.FailedNavigation |
    TraceEvent.RenderFrameHostImpl.OnDidAddContentSecurityPolicies |
    TraceEvent.RenderFrameHostImpl.SetLifecycleState |
    TraceEvent.RenderFrameHostImpl.Unload |
    TraceEvent.RenderFrameHostImplBeforeUnload |
    TraceEvent.RenderFrameHostManager.CommitPending |
    TraceEvent.RenderFrameHostManager.UnloadOldFrame |
    TraceEvent.RenderFrameImpl.BeginNavigation |
    TraceEvent.RenderFrameImpl.CommitFailedNavigation |
    TraceEvent.RenderFrameImpl.CreateChildFrame |
    TraceEvent.RenderFrameImpl.DidCommitProvisionalLoad |
    TraceEvent.RenderFrameImpl.DidFinishDocumentLoad |
    TraceEvent.RenderFrameImpl.DidFinishLoad |
    TraceEvent.RenderFrameImpl.DidStartLoading |
    TraceEvent.RenderFrameImpl.DidStartProvisionalLoad |
    TraceEvent.RenderFrameImpl.DidStopLoading |
    TraceEvent.RenderFrameImpl.Initialize |
    TraceEvent.RenderFrameImpl.OnUnload |
    TraceEvent.RenderProcessHost.SetProcessLock |
    TraceEvent.RenderProcessHostImpl.AddRoute |
    TraceEvent.RenderProcessHostImpl.Cleanup.Haslisteners |
    TraceEvent.RenderProcessHostImpl.RegisterHost |
    TraceEvent.RenderProcessHostImpl.RemoveRoute |
    TraceEvent.RenderProcessHostImpl.Send |
    TraceEvent.RenderProcessHostImpl.UpdateProcessPriority.SetProcessPriority |
    TraceEvent.RenderSurfaceReasonCount |
    TraceEvent.RenderText.Elide |
    TraceEvent.RenderTextHarfBuzz.ItemizeTextToRuns.Runs |
    TraceEvent.RenderTextHarfBuzz.ShapeRuns |
    TraceEvent.RenderTextHarfBuzz.ShapeRunWithFontInternal |
    TraceEvent.RenderThreadImpl.Create |
    TraceEvent.RenderThreadImpl.EstablishGpuChannelSync |
    TraceEvent.RenderThreadImpl.Init |
    TraceEvent.RenderViewHostImpl.CreateRenderView |
    TraceEvent.RenderWidget.InitializeLayerTreeView |
    TraceEvent.RenderWidgetHostImpl.ForwardKeyboardEvent |
    TraceEvent.RenderWidgetHostImpl.ForwardMouseEvent |
    TraceEvent.RenderWidgetHostImpl.GetScreenInfo |
    TraceEvent.RenderWidgetHostImpl.OnLocalSurfaceIdChanged |
    TraceEvent.RenderWidgetHostImpl.WasHidden |
    TraceEvent.RenderWidgetHostImpl.WasShown |
    TraceEvent.RenderWidgetHostViewCocoa.KeyEvent |
    TraceEvent.RenderWidgetHostViewCocoa.MouseEvent |
    TraceEvent.RenderWidgetHostViewCocoa.SendViewBoundsInWindowToHost |
    TraceEvent.RenderWidgetHostViewCocoa.SendWindowFrameInScreenToHost |
    TraceEvent.REQUEST_ALIVE |
    TraceEvent.RequestAnimationFrame |
    TraceEvent.RequestIdleCallback |
    TraceEvent.RequestMainThreadFrame |
    TraceEvent.RequestStart |
    TraceEvent.Resource.AppendData |
    TraceEvent.ResourceChangePriority |
    TraceEvent.ResourceDispatcher.OnReceivedRedirect |
    TraceEvent.ResourceDispatcher.OnReceivedResponse |
    TraceEvent.ResourceDispatcher.OnRequestComplete |
    TraceEvent.ResourceFetcher.DetermineRevalidationPolicy |
    TraceEvent.ResourceFetcher.RequestResource |
    TraceEvent.ResourceFinish |
    TraceEvent.ResourceLoadPriorityOptimizer.UpdateAllImageResourcePriorities |
    TraceEvent.ResourceMarkAsCached |
    TraceEvent.ResourcePrefetchPredictor.StartInitialization |
    TraceEvent.ResourceReceivedData |
    TraceEvent.ResourceReceiveResponse |
    TraceEvent.ResourceSendRequest |
    TraceEvent.ResourceWillSendRequest |
    TraceEvent.ResponseBodyLoader.OnStateChange |
    TraceEvent.ResponseEnd |
    TraceEvent.Rootframemissing |
    TraceEvent.RootScrollerController.PerformRootScrollerSelection |
    TraceEvent.RuleSet.AddRulesFromSheet |
    TraceEvent.RunBestEffortPriorityTask |
    TraceEvent.RunControlPriorityTask |
    TraceEvent.RunHighestPriorityTask |
    TraceEvent.RunHighPriorityTask |
    TraceEvent.RunMicrotasks |
    TraceEvent.RunningIdleTask |
    TraceEvent.RunNormalPriorityTask |
    TraceEvent.RunPendingMicrotask |
    TraceEvent.RunRequest |
    TraceEvent.RunTask |
    TraceEvent.RunVeryHighPriorityTask |
    TraceEvent.Safe_browsing.Mojom.PhishingDetector |
    TraceEvent.Safe_browsing.Mojom.SafeBrowsing |
    TraceEvent.Safe_browsing.Mojom.SafeBrowsingUrlChecker |
    TraceEvent.ScheduledAction.Execute |
    TraceEvent.ScheduledTasks |
    TraceEvent.ScheduledTasksState |
    TraceEvent.ScheduleFrameForImageAnimation |
    TraceEvent.Scheduler.BeginFrame |
    TraceEvent.Scheduler.BeginFrameDropped |
    TraceEvent.Scheduler.BeginImplFrame |
    TraceEvent.Scheduler.BeginMainFrameAborted |
    TraceEvent.Scheduler.BeginMainFrameNotExpectedSoon |
    TraceEvent.Scheduler.BeginMainFrameNotExpectedUntil |
    TraceEvent.Scheduler.BlockingInputExpectedSoon |
    TraceEvent.Scheduler.CompositorPriority |
    TraceEvent.Scheduler.DidCreateAndInitializeLayerTreeFrameSink |
    TraceEvent.Scheduler.DidLoseLayerTreeFrameSink |
    TraceEvent.Scheduler.KeepRendererActive |
    TraceEvent.Scheduler.MissedBeginFrameDropped |
    TraceEvent.Scheduler.NotifyBeginMainFrameStarted |
    TraceEvent.Scheduler.NotifyReadyToCommit |
    TraceEvent.Scheduler.OnBeginImplFrameDeadline |
    TraceEvent.Scheduler.Pending_submit_frames |
    TraceEvent.Scheduler.PrioritizeCompositingAfterInput |
    TraceEvent.Scheduler.RAILMode |
    TraceEvent.Scheduler.RunNextTask |
    TraceEvent.Scheduler.Running |
    TraceEvent.Scheduler.ScheduleBeginImplFrameDeadline |
    TraceEvent.Scheduler.Scheduler |
    TraceEvent.Scheduler.Sequence.RemoveWaitingPriority |
    TraceEvent.Scheduler.Sequence.UpdateSchedulingPriority |
    TraceEvent.Scheduler.SetDeferBeginMainFrame |
    TraceEvent.Scheduler.SkipNextBeginMainFrameToReduceLatency |
    TraceEvent.Scheduler.UseCase |
    TraceEvent.SchedulerStateMachine.SetNeedsPrepareTiles |
    TraceEvent.ScheduleStyleRecalculation |
    TraceEvent.ScopedAllowBaseSyncPrimitivesOutsideBlockingScope |
    TraceEvent.ScopedAllowBlocking |
    TraceEvent.ScopedAllowIO |
    TraceEvent.ScopedBlockingCall |
    TraceEvent.ScopedBlockingCallWithBaseSyncPrimitives |
    TraceEvent.ScopedSetIpcHash |
    TraceEvent.Screenshot |
    TraceEvent.ScriptRunner.ExecuteAsyncTask |
    TraceEvent.ScrollAnchor.FindAnchor |
    TraceEvent.ScrollAnchor.SerializeAnchor |
    TraceEvent.ScrollDeltaThisFrame |
    TraceEvent.ScrollingCoordinator.UpdateAfterPaint |
    TraceEvent.ScrollingCoordinator.UpdateTouchEventTargetRectsIfNeeded |
    TraceEvent.ScrollTree.CollectScrollDeltas |
    TraceEvent.ScrollTree.SetScrollOffset |
    TraceEvent.Search.Mojom.SearchBouncer |
    TraceEvent.SearchProvider.OnURLLoadComplete |
    TraceEvent.SearchProvider.Question_mark |
    TraceEvent.SearchProvider.Start |
    TraceEvent.SelectionController.HandleMousePressEvent |
    TraceEvent.SelectionController.HandleMousePressEventSingleClick |
    TraceEvent.SelectionController.HandleMouseReleaseEvent |
    TraceEvent.SendBeginMainFrameToCommit |
    TraceEvent.SequenceEnabled |
    TraceEvent.SequenceManager.DoIdleWork |
    TraceEvent.SequenceManagerImpl.MaybeReclaimMemory |
    TraceEvent.SequenceManagerImpl.UnregisterTaskQueue |
    TraceEvent.SequenceManagerPostTask |
    TraceEvent.SequenceManagerRunTask |
    TraceEvent.SerializedScriptValueFactory.Create |
    TraceEvent.SerializedScriptValueFactory.Deserialize |
    TraceEvent.Service_manager.Mojom.InterfaceProvider |
    TraceEvent.Servicesnetworkpubliccppsimple_url_loader.Cc |
    TraceEvent.Servicesnetworksocket_data_pump.Cc |
    TraceEvent.Servicesnetworkurl_loader.Cc |
    TraceEvent.ServiceWorkerContainerHost.GetRegistration |
    TraceEvent.ServiceWorkerControlleeRequestHandler.ContinueWithRegistration |
    TraceEvent.ServiceWorkerControlleeRequestHandler.MaybeCreateLoader |
    TraceEvent.ServiceWorkerControlleeRequestHandler.ServiceWorkerControlleeRequestHandler |
    TraceEvent.ServiceWorkerGlobalScope.DidHandleExtendableMessageEvent |
    TraceEvent.ServiceWorkerGlobalScope.DidHandleFetchEvent |
    TraceEvent.ServiceWorkerGlobalScope.DispatchExtendableMessageEvent |
    TraceEvent.ServiceWorkerGlobalScope.DispatchFetchEventForSubresource |
    TraceEvent.ServiceWorkerGlobalScope.DispatchFetchEventInternal |
    TraceEvent.ServiceWorkerGlobalScope.RespondToFetchEventWithNoResponse |
    TraceEvent.ServiceWorkerRegistry.FindRegistrationForClientUrl |
    TraceEvent.ServiceWorkerSubresourceLoader.DispatchFetchEvent |
    TraceEvent.ServiceWorkerSubresourceLoader.OnFallback |
    TraceEvent.ServiceWorkerSubresourceLoader.StartRequest |
    TraceEvent.ServiceWorkerVersion.Request |
    TraceEvent.SetLayerTreeId |
    TraceEvent.SharedImageStub.CreateSharedImage |
    TraceEvent.SharedImageStub.OnCreateGMBSharedImage |
    TraceEvent.SharedImageStub.OnCreateSharedImage |
    TraceEvent.SharedImageStub.OnCreateSharedImageWithData |
    TraceEvent.SharedImageStub.OnDestroySharedImage |
    TraceEvent.SharedImageStub.OnRegisterSharedImageUploadBuffer |
    TraceEvent.ShCompile |
    TraceEvent.ShortcutsProvider.Start |
    TraceEvent.ShortIdlePeriod |
    TraceEvent.ShouldNotSendBeginFrame |
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED |
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED |
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC |
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_SET_KEY |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC |
    TraceEvent.SIMPLE_CACHE_ENTRY |
    TraceEvent.SingleThreadIdleTaskRunner.RunTask |
    TraceEvent.SingleThreadProxy.DidReceiveCompositorFrameAckOnImplThread |
    TraceEvent.SingleThreadProxy.DoCommit |
    TraceEvent.SingleThreadProxy.DoComposite |
    TraceEvent.SingleThreadProxy.NotifyReadyToActivate |
    TraceEvent.SingleThreadProxy.NotifyReadyToDraw |
    TraceEvent.SingleThreadProxy.OnCanDrawStateChanged |
    TraceEvent.SingleThreadProxy.ScheduledActionPrepareTiles |
    TraceEvent.SingleThreadProxy.ScheduledActionSendBeginMainFrame |
    TraceEvent.SingleThreadProxy.SetDeferMainFrameUpdate |
    TraceEvent.SingleThreadProxy.SetNeedsAnimate |
    TraceEvent.SingleThreadProxy.SetNeedsOneBeginImplFrameOnImplThread |
    TraceEvent.SingleThreadProxy.SetNeedsPrepareTilesOnImplThread |
    TraceEvent.SingleThreadProxy.SetNeedsUpdateLayers |
    TraceEvent.SingleThreadProxy.SetVisible |
    TraceEvent.SingleThreadProxy.SingleThreadProxy |
    TraceEvent.SingleThreadTaskGraphRunner.CollectCompletedTasks |
    TraceEvent.SingleThreadTaskGraphRunner.RunTaskWithLockAcquired |
    TraceEvent.SingleThreadTaskGraphRunner.ScheduleTasks |
    TraceEvent.SiteInstanceImpl.SetProcessInternal |
    TraceEvent.SiteInstanceImpl.SetSite |
    TraceEvent.Sizemismatch |
    TraceEvent.SmoothnessDroppedFrame |
    TraceEvent.SOCKET_ALIVE |
    TraceEvent.SOCKET_BYTES_RECEIVED |
    TraceEvent.SOCKET_BYTES_SENT |
    TraceEvent.SOCKET_IN_USE |
    TraceEvent.SOCKET_POOL_BOUND_TO_CONNECT_JOB |
    TraceEvent.SOCKET_POOL_BOUND_TO_SOCKET |
    TraceEvent.SOCKET_POOL_CLOSING_SOCKET |
    TraceEvent.SOCKET_POOL_CONNECT_JOB_CREATED |
    TraceEvent.SOCKET_POOL |
    TraceEvent.SpeedIndex |
    TraceEvent.Spellcheck.Mojom.SpellChecker |
    TraceEvent.SSL_CONNECT_JOB_CONNECT |
    TraceEvent.SSL_CONNECT |
    TraceEvent.SSL_HANDSHAKE_MESSAGE_RECEIVED |
    TraceEvent.SSL_HANDSHAKE_MESSAGE_SENT |
    TraceEvent.SSL_SOCKET_BYTES_RECEIVED |
    TraceEvent.SSL_SOCKET_BYTES_SENT |
    TraceEvent.StartDrawToSwapStart |
    TraceEvent.StartMintToken |
    TraceEvent.StickyAdDetector.MaybeFireDetection |
    TraceEvent.StopSendEvent |
    TraceEvent.Storage.Mojom.Directory |
    TraceEvent.Storage.Mojom.LocalStorageControl |
    TraceEvent.Storage.Mojom.ServiceWorkerLiveVersionRef |
    TraceEvent.Storage.Mojom.ServiceWorkerStorageControl |
    TraceEvent.Storage.Mojom.SessionStorageControl |
    TraceEvent.StorageArea.RecordModificationInMetrics |
    TraceEvent.Storagebrowserblobblob_builder_from_stream.Cc |
    TraceEvent.StyleElement.ProcessStyleSheet |
    TraceEvent.StyleEngine.ClearResolver |
    TraceEvent.StyleEngine.InvalidateStyleAndLayoutForFontUpdates |
    TraceEvent.StyleEngine.ScheduleInvalidationsForRuleSets |
    TraceEvent.StyleEngine.UpdateActiveStyleSheets |
    TraceEvent.SubmitCompositorFrameToPresentationCompositorFrame |
    TraceEvent.SubmitToReceiveCompositorFrame |
    TraceEvent.Subresource_filter.Mojom.SubresourceFilterAgent |
    TraceEvent.Subresource_filter.Mojom.SubresourceFilterHost |
    TraceEvent.SubresourceFilterMsg_SetRulesetForProcess |
    TraceEvent.Subthread_default_tq |
    TraceEvent.Surface.ActivateFrame |
    TraceEvent.SurfaceLayer.PushPropertiesTo |
    TraceEvent.SurfaceManager.GarbageCollectSurfaces |
    TraceEvent.Swap |
    TraceEvent.SwapBuffers |
    TraceEvent.SwapEndToPresentationCompositorFrame |
    TraceEvent.Swapskipped |
    TraceEvent.Swapthrottled |
    TraceEvent.SyncChannel.Send |
    TraceEvent.SyncParent |
    TraceEvent.TabIcon.MaybePaintFavicon |
    TraceEvent.TabIcon.PaintLoadingAnimation |
    TraceEvent.TabManager.LoadNextBackgroundTabIfNeeded |
    TraceEvent.TabStripModel.ActivateTabAt |
    TraceEvent.TabSwitching.Latency |
    TraceEvent.TabSwitchVisibilityRequest |
    TraceEvent.TaskGraphRunner.RunTask |
    TraceEvent.TaskQueueImpl.UnregisterTaskQueue |
    TraceEvent.TaskQueueManager.ProcessTaskFromWorkQueue |
    TraceEvent.TaskQueueThrottler_TaskQueueThrottled |
    TraceEvent.TaskQueueThrottler_TaskQueueUnthrottled |
    TraceEvent.TaskQueueThrottler.MaybeSchedulePumpThrottledTasks |
    TraceEvent.TaskQueueThrottler.OnQueueNextWakeUpChanged |
    TraceEvent.TaskQueueThrottler.PumpThrottledTasks |
    TraceEvent.TaskSetFinishedTaskImpl.RunOnWorkerThread |
    TraceEvent.TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET |
    TraceEvent.TCP_CONNECT_ATTEMPT |
    TraceEvent.TCP_CONNECT |
    TraceEvent.Textfield.PaintTextAndCursor |
    TraceEvent.Third_partyblinkrendererbindingscorev8script_streamer.Cc |
    TraceEvent.Third_partyblinkrenderercorefetchfetch_data_loader.Cc |
    TraceEvent.Third_partyblinkrenderercorefileapifile_reader_loader.Cc |
    TraceEvent.Third_partyblinkrendererplatformloaderfetchdata_pipe_bytes_consumer.Cc |
    TraceEvent.Thread_name |
    TraceEvent.Thread_sort_index |
    TraceEvent.ThreadControllerImpl.RunTask |
    TraceEvent.ThreadedInputHandler.ClearCurrentlyScrollingNode |
    TraceEvent.ThreadPool_PostTask |
    TraceEvent.ThreadPool_RunTask_BlockShutdown |
    TraceEvent.ThreadPool_RunTask_ContinueOnShutdown |
    TraceEvent.ThreadPool_RunTask_SkipOnShutdown |
    TraceEvent.ThreadPool_RunTask |
    TraceEvent.ThreadPool_TaskInfo |
    TraceEvent.ThreadProxy.BeginMainFrame |
    TraceEvent.ThreadProxy.ScheduledActionSendBeginMainFrame |
    TraceEvent.ThreadState.PerformIdleLazySweep |
    TraceEvent.ThrottlingURLLoader.OnReceiveResponse |
    TraceEvent.ThrottlingURLLoader.OnStartLoadingResponseBody |
    TraceEvent.TileManager.AssignGpuMemorytileviolatesmemorypolicy |
    TraceEvent.TileManager.AssignGpuMemoryToTiles |
    TraceEvent.TileManager.CheckForCompletedTasks |
    TraceEvent.TileManager.CheckForCompletedTasksFinished |
    TraceEvent.TileManager.CheckPendingGpuWorkAndIssueSignals |
    TraceEvent.TileManager.DidFinishRunningAllTileTasks |
    TraceEvent.TileManager.DidFinishRunningTileTasksRequiredForActivation |
    TraceEvent.TileManager.DidFinishRunningTileTasksRequiredForDraw |
    TraceEvent.TileManager.FlushAndIssueSignals |
    TraceEvent.TileManager.IsReadyToActivate |
    TraceEvent.TileManager.IsReadyToDraw |
    TraceEvent.TileManager.PrepareTiles |
    TraceEvent.TileManager.ScheduleTasks |
    TraceEvent.TileTaskManagerImpl.CheckForCompletedTasks |
    TraceEvent.TileTaskManagerImpl.ScheduleTasks |
    TraceEvent.TileTaskManagerImpl.Shutdown |
    TraceEvent.TimeoutMonitor.Start |
    TraceEvent.TimeoutMonitor.Stop |
    TraceEvent.TimeoutMonitor.TimeOutHandler |
    TraceEvent.TimerBase.Run |
    TraceEvent.TimerFire |
    TraceEvent.TimerInstall |
    TraceEvent.TimerRemove |
    TraceEvent.TimeStamp |
    TraceEvent.TimeToDomReady |
    TraceEvent.TimeToInteractive |
    TraceEvent.TimeToZonesAndDomReady |
    TraceEvent.TimeToZonesComplete |
    TraceEvent.TopLevel |
    TraceEvent.TouchActionFilter.OnHasTouchEventHandlers |
    TraceEvent.TouchActionFilter.ResetTouchAction |
    TraceEvent.TouchActionFilter.SetTouchAction |
    TraceEvent.Tracing.Mojom.PerfettoService |
    TraceEvent.Tracing.Mojom.ProducerClient |
    TraceEvent.Tracing.Mojom.ProducerHost |
    TraceEvent.Tracing.Mojom.TracedProcess |
    TraceEvent.Tracing.Mojom.TracingService |
    TraceEvent.Tracing.Mojom.TracingSessionClient |
    TraceEvent.Tracing.Mojom.TracingSessionHost |
    TraceEvent.TracingSessionIdForWorker |
    TraceEvent.TracingStartedInBrowser |
    TraceEvent.TracingStartedInPage |
    TraceEvent.TrackerValidation |
    TraceEvent.TransferBuffer.Free |
    TraceEvent.TransfersBytesPendingOnDisk |
    TraceEvent.TransfersPendingOnDisk |
    TraceEvent.Translate.Mojom.ContentTranslateDriver |
    TraceEvent.Translate.Mojom.TranslateAgent |
    TraceEvent.TRANSPORT_CONNECT_JOB_CONNECT |
    TraceEvent.TreeSynchronizer.PushLayerPropertiesTo.Impl |
    TraceEvent.TreeSynchronizer.PushLayerPropertiesTo.Main |
    TraceEvent.TreeSynchronizer.SynchronizeTrees |
    TraceEvent.TRIAL_CERT_VERIFIER_JOB_COMPARISON_STARTED |
    TraceEvent.TRIAL_CERT_VERIFIER_JOB |
    TraceEvent.UDP_BYTES_RECEIVED |
    TraceEvent.UDP_BYTES_SENT |
    TraceEvent.UDP_CONNECT |
    TraceEvent.UDP_LOCAL_ADDRESS |
    TraceEvent.Ui_preconnection_tq |
    TraceEvent.Ui_thread_tq |
    TraceEvent.Ui_user_blocking_tq |
    TraceEvent.Ukm.Mojom.UkmRecorderInterface |
    TraceEvent.UnfreezableFrameMsg_Unload |
    TraceEvent.Unknowninterface |
    TraceEvent.UnloadEventEnd |
    TraceEvent.UnloadEventStart |
    TraceEvent.UpdateCounters |
    TraceEvent.UpdateLayer |
    TraceEvent.UpdateLayerTree |
    TraceEvent.UpdateLayoutTree |
    TraceEvent.UpdateStateFromAnimationDrivers |
    TraceEvent.UPLOAD_DATA_STREAM_INIT |
    TraceEvent.UPLOAD_DATA_STREAM_READ |
    TraceEvent.URL_REQUEST_DELEGATE_RECEIVED_REDIRECT |
    TraceEvent.URL_REQUEST_DELEGATE_RESPONSE_STARTED |
    TraceEvent.URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED |
    TraceEvent.URL_REQUEST_FILTERS_SET |
    TraceEvent.URL_REQUEST_JOB_BYTES_READ |
    TraceEvent.URL_REQUEST_JOB_FILTERED_BYTES_READ |
    TraceEvent.URL_REQUEST_REDIRECT_JOB |
    TraceEvent.URL_REQUEST_REDIRECTED |
    TraceEvent.URL_REQUEST_SET_PRIORITY |
    TraceEvent.URL_REQUEST_START_JOB |
    TraceEvent.URLLoaderClientImpl.OnReceiveResponse |
    TraceEvent.URLLoaderClientImpl.OnStartLoadingResponseBody |
    TraceEvent.UserEvent |
    TraceEvent.Usingallowed_touch_action |
    TraceEvent.Usingexistingdeadline |
    TraceEvent.Usingnewdeadline |
    TraceEvent.V8_tq |
    TraceEvent.V8.BytecodeBudgetInterrupt |
    TraceEvent.V8.BytecodeBudgetInterruptWithStackCheck |
    TraceEvent.V8.CallAsConstructor |
    TraceEvent.V8.CallFunction |
    TraceEvent.V8.Compile |
    TraceEvent.V8.CompileModule |
    TraceEvent.V8.DeoptimizeCode |
    TraceEvent.V8.DeserializeContext |
    TraceEvent.V8.DeserializeIsolate |
    TraceEvent.V8.EvaluateModule |
    TraceEvent.V8.GC_BACKGROUND_ARRAY_BUFFER_SWEEP |
    TraceEvent.V8.GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP |
    TraceEvent.V8.GC_BACKGROUND_SAFEPOINT |
    TraceEvent.V8.GC_BACKGROUND_UNMAPPER |
    TraceEvent.V8.GC_BACKGROUND_UNPARK |
    TraceEvent.V8.GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP |
    TraceEvent.V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE |
    TraceEvent.V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE |
    TraceEvent.V8.GC_HEAP_EPILOGUE_SAFEPOINT |
    TraceEvent.V8.GC_HEAP_EPILOGUE |
    TraceEvent.V8.GC_HEAP_EXTERNAL_EPILOGUE |
    TraceEvent.V8.GC_HEAP_EXTERNAL_PROLOGUE |
    TraceEvent.V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES |
    TraceEvent.V8.GC_HEAP_PROLOGUE_SAFEPOINT |
    TraceEvent.V8.GC_HEAP_PROLOGUE |
    TraceEvent.V8.GC_MARK_COMPACTOR |
    TraceEvent.V8.GC_MC_BACKGROUND_EVACUATE_COPY |
    TraceEvent.V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS |
    TraceEvent.V8.GC_MC_BACKGROUND_MARKING |
    TraceEvent.V8.GC_MC_BACKGROUND_SWEEPING |
    TraceEvent.V8.GC_MC_CLEAR_EXTERNAL_STRING_TABLE |
    TraceEvent.V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE |
    TraceEvent.V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS |
    TraceEvent.V8.GC_MC_CLEAR_JOIN_JOB |
    TraceEvent.V8.GC_MC_CLEAR_MAPS |
    TraceEvent.V8.GC_MC_CLEAR_STRING_FORWARDING_TABLE |
    TraceEvent.V8.GC_MC_CLEAR_STRING_TABLE |
    TraceEvent.V8.GC_MC_CLEAR_WEAK_COLLECTIONS |
    TraceEvent.V8.GC_MC_CLEAR_WEAK_GLOBAL_HANDLES |
    TraceEvent.V8.GC_MC_CLEAR_WEAK_LISTS |
    TraceEvent.V8.GC_MC_CLEAR_WEAK_REFERENCES |
    TraceEvent.V8.GC_MC_CLEAR |
    TraceEvent.V8.GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS |
    TraceEvent.V8.GC_MC_COMPLETE_SWEEPING |
    TraceEvent.V8.GC_MC_EPILOGUE |
    TraceEvent.V8.GC_MC_EVACUATE_CLEAN_UP |
    TraceEvent.V8.GC_MC_EVACUATE_COPY_PARALLEL |
    TraceEvent.V8.GC_MC_EVACUATE_COPY |
    TraceEvent.V8.GC_MC_EVACUATE_EPILOGUE |
    TraceEvent.V8.GC_MC_EVACUATE_PROLOGUE |
    TraceEvent.V8.GC_MC_EVACUATE_REBALANCE |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_CLIENT_HEAPS |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK |
    TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS |
    TraceEvent.V8.GC_MC_EVACUATE |
    TraceEvent.V8.GC_MC_FINISH_SWEEP_ARRAY_BUFFERS |
    TraceEvent.V8.GC_MC_FINISH |
    TraceEvent.V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE |
    TraceEvent.V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING |
    TraceEvent.V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE |
    TraceEvent.V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE |
    TraceEvent.V8.GC_MC_INCREMENTAL_FINALIZE_BODY |
    TraceEvent.V8.GC_MC_INCREMENTAL_FINALIZE |
    TraceEvent.V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE |
    TraceEvent.V8.GC_MC_INCREMENTAL_START |
    TraceEvent.V8.GC_MC_INCREMENTAL_SWEEP_ARRAY_BUFFERS |
    TraceEvent.V8.GC_MC_INCREMENTAL_SWEEPING |
    TraceEvent.V8.GC_MC_INCREMENTAL |
    TraceEvent.V8.GC_MC_MARK_CLIENT_HEAPS |
    TraceEvent.V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE |
    TraceEvent.V8.GC_MC_MARK_EMBEDDER_TRACING |
    TraceEvent.V8.GC_MC_MARK_FINISH_INCREMENTAL |
    TraceEvent.V8.GC_MC_MARK_FULL_CLOSURE_PARALLEL_JOIN |
    TraceEvent.V8.GC_MC_MARK_FULL_CLOSURE_PARALLEL |
    TraceEvent.V8.GC_MC_MARK_FULL_CLOSURE |
    TraceEvent.V8.GC_MC_MARK_MAIN |
    TraceEvent.V8.GC_MC_MARK_RETAIN_MAPS |
    TraceEvent.V8.GC_MC_MARK_ROOTS |
    TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING |
    TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON |
    TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY |
    TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES |
    TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS |
    TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE |
    TraceEvent.V8.GC_MC_MARK |
    TraceEvent.V8.GC_MC_PROLOGUE |
    TraceEvent.V8.GC_MC_SWEEP_EXTERNAL_POINTER_TABLE |
    TraceEvent.V8.GC_MC_SWEEP |
    TraceEvent.V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL |
    TraceEvent.V8.GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS |
    TraceEvent.V8.GC_SCAVENGER_FREE_REMEMBERED_SET |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE_FINALIZE |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE_PARALLEL |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE_ROOTS |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS |
    TraceEvent.V8.GC_SCAVENGER_SCAVENGE |
    TraceEvent.V8.GC_SCAVENGER_SWEEP_ARRAY_BUFFERS |
    TraceEvent.V8.GC_SCAVENGER |
    TraceEvent.V8.GC_STOP_THE_WORLD |
    TraceEvent.V8.GC_TIME_TO_SAFEPOINT |
    TraceEvent.V8.GCCompactor |
    TraceEvent.V8.GCFinalizeMC |
    TraceEvent.V8.GCFinalizeMCReduceMemory |
    TraceEvent.V8.GCIdleNotification |
    TraceEvent.V8.GCIncrementalMarking |
    TraceEvent.V8.GCIncrementalMarkingFinalize |
    TraceEvent.V8.GCIncrementalMarkingLayoutChange |
    TraceEvent.V8.GCIncrementalMarkingStart |
    TraceEvent.V8.GCPhantomHandleProcessingCallback |
    TraceEvent.V8.GCScavenger |
    TraceEvent.V8.HandleInterrupts |
    TraceEvent.V8.InvokeApiInterruptCallbacks |
    TraceEvent.V8.IsolateInitialize |
    TraceEvent.V8.NewContext |
    TraceEvent.V8.NewInstance |
    TraceEvent.V8.ParseOnBackground |
    TraceEvent.V8.ParseOnBackgroundParsing |
    TraceEvent.V8.ParseOnBackgroundWaiting |
    TraceEvent.V8.ProduceCache |
    TraceEvent.V8.ProduceModuleCache |
    TraceEvent.V8.Run |
    TraceEvent.V8.ScriptCompiler |
    TraceEvent.V8.StackGuard |
    TraceEvent.V8.Task |
    TraceEvent.V8ConsoleMessage.Exception |
    TraceEvent.V8ContextSnapshot.InstallRuntimeEnabled |
    TraceEvent.V8PerIsolateData.Initialize |
    TraceEvent.View.Layout |
    TraceEvent.View.Layoutbounds_changed |
    TraceEvent.View.Layoutset_bounds |
    TraceEvent.View.OnPaint |
    TraceEvent.View.OnPaintBackground |
    TraceEvent.View.OnPaintBorder |
    TraceEvent.View.Paint |
    TraceEvent.View.PaintChildren |
    TraceEvent.Viewport |
    TraceEvent.VisibleUnits.CanonicalPosition |
    TraceEvent.VisibleUnits.MostBackwardCaretPosition |
    TraceEvent.VisibleUnits.MostForwardCaretPosition |
    TraceEvent.Visitedlink.Mojom.VisitedLinkNotificationSink |
    TraceEvent.VisitedLinkWriter.AddURL |
    TraceEvent.VisitedLinkWriter.AddURLs |
    TraceEvent.VisuallyComplete100 |
    TraceEvent.VisualViewport.MainFrameDidChangeSize |
    TraceEvent.VisualViewport.SetSize |
    TraceEvent.Viz.Mojom.CompositingModeReporter |
    TraceEvent.Viz.Mojom.CompositorFrameSink |
    TraceEvent.Viz.Mojom.CompositorFrameSinkClient |
    TraceEvent.Viz.Mojom.DisplayClient |
    TraceEvent.Viz.Mojom.FrameSinkManager |
    TraceEvent.Viz.Mojom.FrameSinkManagerClient |
    TraceEvent.Viz.Mojom.Gpu |
    TraceEvent.Viz.Mojom.GpuHost |
    TraceEvent.Viz.Mojom.GpuMemoryBufferFactory |
    TraceEvent.Viz.Mojom.GpuService |
    TraceEvent.Viz.Mojom.InputTargetClient |
    TraceEvent.WaitingfornextBeginFrame |
    TraceEvent.WaitingForRendererResponse |
    TraceEvent.Web_cache.Mojom.WebCache |
    TraceEvent.WebCoalescedInputEvent.CoalesceWith |
    TraceEvent.WebContentsImpl.AddReceiverSet |
    TraceEvent.WebContentsImpl.AXTreeIDForMainFrameHasChanged |
    TraceEvent.WebContentsImpl.CancelActiveAndPendingDialogs |
    TraceEvent.WebContentsImpl.CancelKeyboardLockRequest |
    TraceEvent.WebContentsImpl.CancelModalDialogsForRenderManager |
    TraceEvent.WebContentsImpl.CanOverscrollContent |
    TraceEvent.WebContentsImpl.ClearTargetURL |
    TraceEvent.WebContentsImpl.ComputeWebPreferences |
    TraceEvent.WebContentsImpl.CreateRenderViewForRenderManager |
    TraceEvent.WebContentsImpl.CreateRenderWidgetHostViewForRenderManager |
    TraceEvent.WebContentsImpl.CreateThrottlesForNavigation |
    TraceEvent.WebContentsImpl.CreateWithOpener |
    TraceEvent.WebContentsImpl.DidAddMessageToConsole |
    TraceEvent.WebContentsImpl.DidChangeLoadProgress |
    TraceEvent.WebContentsImpl.DidChangeVisibleSecurityState |
    TraceEvent.WebContentsImpl.DidFinishNavigation |
    TraceEvent.WebContentsImpl.DidFirstVisuallyNonEmptyPaint |
    TraceEvent.WebContentsImpl.DidNavigateAnyFramePostCommit |
    TraceEvent.WebContentsImpl.DidNavigateMainFramePostCommit |
    TraceEvent.WebContentsImpl.DidNavigateMainFramePreCommit |
    TraceEvent.WebContentsImpl.DidReceiveInputEvent |
    TraceEvent.WebContentsImpl.DidStartLoading |
    TraceEvent.WebContentsImpl.DidStartNavigation |
    TraceEvent.WebContentsImpl.DidStopLoading |
    TraceEvent.WebContentsImpl.DocumentAvailableInMainFrame |
    TraceEvent.WebContentsImpl.DocumentOnLoadCompleted |
    TraceEvent.WebContentsImpl.DOMContentLoaded |
    TraceEvent.WebContentsImpl.Focus |
    TraceEvent.WebContentsImpl.FocusLocationBarByDefault |
    TraceEvent.WebContentsImpl.FocusOwningWebContents |
    TraceEvent.WebContentsImpl.FrameSizeChanged |
    TraceEvent.WebContentsImpl.FullscreenStateChanged |
    TraceEvent.WebContentsImpl.GetManifest |
    TraceEvent.WebContentsImpl.GetNavigationUIData |
    TraceEvent.WebContentsImpl.GetOrCreateWebPreferences |
    TraceEvent.WebContentsImpl.Init |
    TraceEvent.WebContentsImpl.LoadingStateChanged |
    TraceEvent.WebContentsImpl.LoadStateChanged |
    TraceEvent.WebContentsImpl.NotifyFrameSwapped |
    TraceEvent.WebContentsImpl.NotifyNavigationEntryChanged |
    TraceEvent.WebContentsImpl.NotifyNavigationEntryCommitted |
    TraceEvent.WebContentsImpl.NotifyNavigationStateChanged |
    TraceEvent.WebContentsImpl.NotifySwappedFromRenderManager |
    TraceEvent.WebContentsImpl.NotifyViewSwapped |
    TraceEvent.WebContentsImpl.NotifyWebContentsFocused |
    TraceEvent.WebContentsImpl.NotifyWebContentsLostFocus |
    TraceEvent.WebContentsImpl.Observe |
    TraceEvent.WebContentsImpl.OnAssociatedInterfaceRequest |
    TraceEvent.WebContentsImpl.OnCookiesAccessed |
    TraceEvent.WebContentsImpl.OnDidFinishLoad |
    TraceEvent.WebContentsImpl.OnFocusedElementChangedInFrame |
    TraceEvent.WebContentsImpl.OnMessageReceived |
    TraceEvent.WebContentsImpl.OnServiceWorkerAccessed |
    TraceEvent.WebContentsImpl.OnTextAutosizerPageInfoChanged |
    TraceEvent.WebContentsImpl.OnWebPreferencesChanged |
    TraceEvent.WebContentsImpl.ReadyToCommitNavigation |
    TraceEvent.WebContentsImpl.RemoveBrowserPluginEmbedder |
    TraceEvent.WebContentsImpl.RenderFrameCreated |
    TraceEvent.WebContentsImpl.RenderFrameDeleted |
    TraceEvent.WebContentsImpl.RenderFrameHostStateChanged |
    TraceEvent.WebContentsImpl.RenderViewCreated |
    TraceEvent.WebContentsImpl.RenderViewDeleted |
    TraceEvent.WebContentsImpl.RenderViewReady |
    TraceEvent.WebContentsImpl.RenderWidgetCreated |
    TraceEvent.WebContentsImpl.RenderWidgetDeleted |
    TraceEvent.WebContentsImpl.RenderWidgetGotFocus |
    TraceEvent.WebContentsImpl.RenderWidgetLostFocus |
    TraceEvent.WebContentsImpl.RenderWidgetWasResized |
    TraceEvent.WebContentsImpl.ReplicatePageFocus |
    TraceEvent.WebContentsImpl.ResetLoadProgressState |
    TraceEvent.WebContentsImpl.ResourceLoadComplete |
    TraceEvent.WebContentsImpl.RestoreFocus |
    TraceEvent.WebContentsImpl.SendChangeLoadProgress |
    TraceEvent.WebContentsImpl.SendScreenRects |
    TraceEvent.WebContentsImpl.SendToAllFrames |
    TraceEvent.WebContentsImpl.SetAsFocusedWebContentsIfNecessary |
    TraceEvent.WebContentsImpl.SetDelegate |
    TraceEvent.WebContentsImpl.SetFocusedFrame |
    TraceEvent.WebContentsImpl.SetFocusToLocationBar |
    TraceEvent.WebContentsImpl.SetHistoryOffsetAndLengthForView |
    TraceEvent.WebContentsImpl.SetInitialFocus |
    TraceEvent.WebContentsImpl.SetIsCrashed |
    TraceEvent.WebContentsImpl.SetNotWaitingForResponse |
    TraceEvent.WebContentsImpl.SetOpenerForNewContents |
    TraceEvent.WebContentsImpl.SetSlowWebPreferences |
    TraceEvent.WebContentsImpl.SetVisibilityAndNotifyObservers |
    TraceEvent.WebContentsImpl.SetVisibilityForChildViews |
    TraceEvent.WebContentsImpl.SetWebPreferences |
    TraceEvent.WebContentsImpl.ShowInsecureLocalhostWarningIfNeeded |
    TraceEvent.WebContentsImpl.StoreFocus |
    TraceEvent.WebContentsImpl.SubresourceResponseStarted |
    TraceEvent.WebContentsImpl.UnsafeFindFrameByFrameTreeNodeId |
    TraceEvent.WebContentsImpl.UpdateFaviconURL |
    TraceEvent.WebContentsImpl.UpdateStateForFrame |
    TraceEvent.WebContentsImpl.UpdateTargetURL |
    TraceEvent.WebContentsImpl.UpdateTitle |
    TraceEvent.WebContentsImpl.UpdateTitleForEntry |
    TraceEvent.WebContentsImpl.UpdateVisibilityAndNotifyPageAndView |
    TraceEvent.WebContentsImpl.UpdateWebContentsVisibility |
    TraceEvent.WebContentsImpl.WasShown |
    TraceEvent.WebContentsImpl.WebContentsImpl |
    TraceEvent.WebContentsImplLoading |
    TraceEvent.WebLocalFrameImpl.CreateChildframe |
    TraceEvent.WebLocalFrameImpl.CreateFrameView |
    TraceEvent.WebResourceRequestSender.OnReceivedRedirect |
    TraceEvent.WebResourceRequestSender.OnReceivedResponse |
    TraceEvent.WebResourceRequestSender.OnRequestComplete |
    TraceEvent.WebResourceRequestSender.OnStartLoadingResponseBody |
    TraceEvent.WebServiceWorkerProviderImpl.GetRegistration |
    TraceEvent.WebURLLoader.Context.Cancel |
    TraceEvent.WebURLLoader.Context.OnCompletedRequest |
    TraceEvent.WebURLLoader.Context.OnReceivedRedirect |
    TraceEvent.WebURLLoader.Context.OnReceivedResponse |
    TraceEvent.WebURLLoader.Context.OnStartLoadingResponseBody |
    TraceEvent.WebURLLoader.Context.Start |
    TraceEvent.WebURLLoader.LoadAsynchronously |
    TraceEvent.WebURLLoaderImpl.Context.Cancel |
    TraceEvent.WebURLLoaderImpl.Context.OnCompletedRequest |
    TraceEvent.WebURLLoaderImpl.Context.OnReceivedRedirect |
    TraceEvent.WebURLLoaderImpl.Context.OnReceivedResponse |
    TraceEvent.WebURLLoaderImpl.Context.OnStartLoadingResponseBody |
    TraceEvent.WebURLLoaderImpl.Context.Start |
    TraceEvent.WebURLLoaderImpl.LoadAsynchronously |
    TraceEvent.WebView.AttachWebContentsNativeView |
    TraceEvent.WebView.DetachWebContentsNativeView |
    TraceEvent.WebView.SetWebContents |
    TraceEvent.WebViewImpl.BeginFrame |
    TraceEvent.WebViewImpl.HandleInputEvent |
    TraceEvent.WebViewImpl.HandleKeyEvent |
    TraceEvent.WebViewImpl.UpdateAllLifecyclePhases |
    TraceEvent.Widget.Init |
    TraceEvent.Widget.OnMouseEvent |
    TraceEvent.Widget.OnNativeWidgetMove |
    TraceEvent.Widget.OnNativeWidgetSizeChanged |
    TraceEvent.WidgetBase.DidCommitAndDrawCompositorFrame |
    TraceEvent.WidgetBase.UpdateSelectionBounds |
    TraceEvent.WidgetBase.UpdateTextInputStateInternal |
    TraceEvent.WidgetBase.UpdateVisualProperties |
    TraceEvent.WidgetBase.WasHidden |
    TraceEvent.WidgetBase.WasShown |
    TraceEvent.WidgetBase.WillBeginMainFrame |
    TraceEvent.WidgetBaseInputHandler.OnHandleInputEvent |
    TraceEvent.WidgetHostMsg_Close_ACK |
    TraceEvent.WidgetInputHandlerImpl.DispatchEvent |
    TraceEvent.WidgetInputHandlerManager.DidHandleInputEventSentToCompositor |
    TraceEvent.WidgetInputHandlerManager.DidHandleInputEventSentToMain |
    TraceEvent.WillFailRequest |
    TraceEvent.WillProcessResponse |
    TraceEvent.WillStartRequest |
    TraceEvent.Worker_pausable_tq |
    TraceEvent.Worker_thread_internal_tq |
    TraceEvent.Worker_throttleable_tq |
    TraceEvent.WorkerThreadactive |
    TraceEvent.WorkerThreadborn |
    TraceEvent.WorkerThreaddead |
    TraceEvent.WritableFile.Sync |
    TraceEvent.X509Certificate.CreateFromDERCertChain |
    TraceEvent.XHRLoad |
    TraceEvent.XHRReadyStateChange |
    TraceEvent.YieldParserForScriptLoad |
    TraceEvent.YieldParserForScriptLoadAndBlockingResources |
    TraceEvent.ZeroSuggestProvider.Start |
    TraceEvent.ZonesAndDomReady |
    TraceEvent.ZonesReady;

  type A = 
    TraceEvent.A.F |
    TraceEvent.A.S;

  type ActivateLayerTree = 
    TraceEvent.ActivateLayerTree.I;

  type Activation = 
    TraceEvent.Activation.b |
    TraceEvent.Activation.e;

  type ActiveSchedulerTrackedFeature = 
    TraceEvent.ActiveSchedulerTrackedFeature.b |
    TraceEvent.ActiveSchedulerTrackedFeature.e;

  type Allactivesurfacesready = 
    TraceEvent.Allactivesurfacesready.I;

  type Animation = 
    TraceEvent.Animation.b |
    TraceEvent.Animation.e |
    TraceEvent.Animation.n;

  type AsyncSwapBuffers = 
    TraceEvent.AsyncSwapBuffers.F |
    TraceEvent.AsyncSwapBuffers.S;

  type BackForwardCache_MaybeStorePage = 
    TraceEvent.BackForwardCache_MaybeStorePage.X;

  type BeginFrame = 
    TraceEvent.BeginFrame.I;

  type BeginImplFrameToSendBeginMainFrame = 
    TraceEvent.BeginImplFrameToSendBeginMainFrame.b |
    TraceEvent.BeginImplFrameToSendBeginMainFrame.e;

  type BeginMainThreadFrame = 
    TraceEvent.BeginMainThreadFrame.I;

  type BeginNavigation = 
    TraceEvent.BeginNavigation.b |
    TraceEvent.BeginNavigation.e;

  type BlinkGCMarking = 
    TraceEvent.BlinkGCMarking.X;

  type Blocking = 
    TraceEvent.Blocking.I;

  type BrowserToRendererCompositor = 
    TraceEvent.BrowserToRendererCompositor.b |
    TraceEvent.BrowserToRendererCompositor.e;

  type BudgetPool_DisableThrottling = 
    TraceEvent.BudgetPool_DisableThrottling.X;

  type BudgetPool_EnableThrottling = 
    TraceEvent.BudgetPool_EnableThrottling.X;

  type CalculateRenderSurfaceLayerList = 
    TraceEvent.CalculateRenderSurfaceLayerList.X;

  type CancelAnimationFrame = 
    TraceEvent.CancelAnimationFrame.I;

  type CancelIdleCallback = 
    TraceEvent.CancelIdleCallback.I;

  type CANCELLED = 
    TraceEvent.CANCELLED.n;

  type Canvas2DLayerBridgeCreation = 
    TraceEvent.Canvas2DLayerBridgeCreation.I;

  type CERT_VERIFIER_REQUEST_BOUND_TO_JOB = 
    TraceEvent.CERT_VERIFIER_REQUEST_BOUND_TO_JOB.n;

  type CERT_VERIFIER_REQUEST = 
    TraceEvent.CERT_VERIFIER_REQUEST.b |
    TraceEvent.CERT_VERIFIER_REQUEST.e;

  type CERT_VERIFIER_TASK_BOUND = 
    TraceEvent.CERT_VERIFIER_TASK_BOUND.n;

  type CERT_VERIFIER_TASK = 
    TraceEvent.CERT_VERIFIER_TASK.b |
    TraceEvent.CERT_VERIFIER_TASK.e;

  type CERT_VERIFY_PROC_INPUT_CERT = 
    TraceEvent.CERT_VERIFY_PROC_INPUT_CERT.n;

  type CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT = 
    TraceEvent.CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT.b |
    TraceEvent.CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT.e;

  type CERT_VERIFY_PROC_PATH_BUILT = 
    TraceEvent.CERT_VERIFY_PROC_PATH_BUILT.n;

  type CERT_VERIFY_PROC_TARGET_CERT = 
    TraceEvent.CERT_VERIFY_PROC_TARGET_CERT.n;

  type CERT_VERIFY_PROC = 
    TraceEvent.CERT_VERIFY_PROC.b |
    TraceEvent.CERT_VERIFY_PROC.e;

  type CheckUrl = 
    TraceEvent.CheckUrl.F |
    TraceEvent.CheckUrl.S;

  type ClassifyNavigation = 
    TraceEvent.ClassifyNavigation.X;

  type Commit = 
    TraceEvent.Commit.b |
    TraceEvent.Commit.e;

  type CommitLoad = 
    TraceEvent.CommitLoad.X;

  type CommitNavigationEnd = 
    TraceEvent.CommitNavigationEnd.R;

  type CommitPendingTreesToCA = 
    TraceEvent.CommitPendingTreesToCA.X;

  type CompositeLayers = 
    TraceEvent.CompositeLayers.B |
    TraceEvent.CompositeLayers.E |
    TraceEvent.CompositeLayers.X;

  type Compositor_tq = 
    TraceEvent.Compositor_tq.X;

  type CONNECT_JOB_SET_SOCKET = 
    TraceEvent.CONNECT_JOB_SET_SOCKET.n;

  type CONNECT_JOB = 
    TraceEvent.CONNECT_JOB.b |
    TraceEvent.CONNECT_JOB.e;

  type ContextCreatedNotification = 
    TraceEvent.ContextCreatedNotification.X;

  type Control_tq = 
    TraceEvent.Control_tq.X;

  type COOKIE_INCLUSION_STATUS = 
    TraceEvent.COOKIE_INCLUSION_STATUS.n;

  type COOKIE_STORE_COOKIE_ADDED = 
    TraceEvent.COOKIE_STORE_COOKIE_ADDED.n;

  type COOKIE_STORE_COOKIE_DELETED = 
    TraceEvent.COOKIE_STORE_COOKIE_DELETED.n;

  type CreateGrGLInterfacebind_with_flush_on_macafterfunc = 
    TraceEvent.CreateGrGLInterfacebind_with_flush_on_macafterfunc.X;

  type CreateGrGLInterfacebind_with_flush_on_macbeforefunc = 
    TraceEvent.CreateGrGLInterfacebind_with_flush_on_macbeforefunc.X;

  type CreateIOSurface = 
    TraceEvent.CreateIOSurface.X;

  type Damagenotvisible = 
    TraceEvent.Damagenotvisible.I;

  type DecodeFont = 
    TraceEvent.DecodeFont.X;

  type DecodeImage = 
    TraceEvent.DecodeImage.X;

  type DecodeLazyPixelRef = 
    TraceEvent.DecodeLazyPixelRef.X;

  type Default_tq = 
    TraceEvent.Default_tq.B |
    TraceEvent.Default_tq.X;

  type Deferred = 
    TraceEvent.Deferred.F |
    TraceEvent.Deferred.S;

  type DidCommitProvisionalLoad_StateResetForNewDocument = 
    TraceEvent.DidCommitProvisionalLoad_StateResetForNewDocument.X;

  type DidPrepareTiles = 
    TraceEvent.DidPrepareTiles.I;

  type DiskUsage = 
    TraceEvent.DiskUsage.C;

  type DNS_TRANSACTION_ATTEMPT = 
    TraceEvent.DNS_TRANSACTION_ATTEMPT.n;

  type DNS_TRANSACTION_QUERY = 
    TraceEvent.DNS_TRANSACTION_QUERY.b |
    TraceEvent.DNS_TRANSACTION_QUERY.e;

  type DNS_TRANSACTION_RESPONSE = 
    TraceEvent.DNS_TRANSACTION_RESPONSE.n;

  type DNS_TRANSACTION = 
    TraceEvent.DNS_TRANSACTION.b |
    TraceEvent.DNS_TRANSACTION.e;

  type DomComplete = 
    TraceEvent.DomComplete.R;

  type DOMContentLoaded = 
    TraceEvent.DOMContentLoaded.b |
    TraceEvent.DOMContentLoaded.e;

  type DomContentLoadedEventEnd = 
    TraceEvent.DomContentLoadedEventEnd.R;

  type DomContentLoadedEventStart = 
    TraceEvent.DomContentLoadedEventStart.R;

  type DomInteractive = 
    TraceEvent.DomInteractive.R;

  type DomLoading = 
    TraceEvent.DomLoading.R;

  type DomReady = 
    TraceEvent.DomReady.R;

  type DomTime = 
    TraceEvent.DomTime.b |
    TraceEvent.DomTime.e;

  type DrawFrame = 
    TraceEvent.DrawFrame.I;

  type DrawLazyPixelRef = 
    TraceEvent.DrawLazyPixelRef.I;

  type Drawskipped = 
    TraceEvent.Drawskipped.I;

  type DroppedFrame = 
    TraceEvent.DroppedFrame.I;

  type EarlyOut_DeferCommit_InsideBeginMainFrame = 
    TraceEvent.EarlyOut_DeferCommit_InsideBeginMainFrame.I;

  type EarlyOut_NoDamage = 
    TraceEvent.EarlyOut_NoDamage.I;

  type EarlyOut_NoUpdates = 
    TraceEvent.EarlyOut_NoUpdates.I;

  type EndActivateToSubmitCompositorFrame = 
    TraceEvent.EndActivateToSubmitCompositorFrame.b |
    TraceEvent.EndActivateToSubmitCompositorFrame.e;

  type EndCommitToActivation = 
    TraceEvent.EndCommitToActivation.b |
    TraceEvent.EndCommitToActivation.e;

  type EndofTrace = 
    TraceEvent.EndofTrace.b |
    TraceEvent.EndofTrace.e;

  type Entiredisplaydamaged = 
    TraceEvent.Entiredisplaydamaged.I;

  type EvaluateScript = 
    TraceEvent.EvaluateScript.X;

  type EventDispatch = 
    TraceEvent.EventDispatch.X;

  type EventLatency = 
    TraceEvent.EventLatency.b |
    TraceEvent.EventLatency.e;

  type ExtensionHostMsg_AddFilteredListener = 
    TraceEvent.ExtensionHostMsg_AddFilteredListener.X;

  type ExtensionHostMsg_AddLazyListener = 
    TraceEvent.ExtensionHostMsg_AddLazyListener.X;

  type ExtensionHostMsg_AddListener = 
    TraceEvent.ExtensionHostMsg_AddListener.X;

  type ExtensionHostMsg_CloseMessagePort = 
    TraceEvent.ExtensionHostMsg_CloseMessagePort.X;

  type ExtensionHostMsg_EventAck = 
    TraceEvent.ExtensionHostMsg_EventAck.X;

  type ExtensionHostMsg_ExecuteCodeFinished = 
    TraceEvent.ExtensionHostMsg_ExecuteCodeFinished.X;

  type ExtensionHostMsg_GetMessageBundle = 
    TraceEvent.ExtensionHostMsg_GetMessageBundle.X;

  type ExtensionHostMsg_OpenChannelToExtension = 
    TraceEvent.ExtensionHostMsg_OpenChannelToExtension.X;

  type ExtensionHostMsg_OpenChannelToTab = 
    TraceEvent.ExtensionHostMsg_OpenChannelToTab.X;

  type ExtensionHostMsg_OpenMessagePort = 
    TraceEvent.ExtensionHostMsg_OpenMessagePort.X;

  type ExtensionHostMsg_PostMessage = 
    TraceEvent.ExtensionHostMsg_PostMessage.X;

  type ExtensionHostMsg_RemoveFilteredListener = 
    TraceEvent.ExtensionHostMsg_RemoveFilteredListener.X;

  type ExtensionHostMsg_RemoveListener = 
    TraceEvent.ExtensionHostMsg_RemoveListener.X;

  type ExtensionHostMsg_Request = 
    TraceEvent.ExtensionHostMsg_Request.X;

  type ExtensionMsg_ActivateExtension = 
    TraceEvent.ExtensionMsg_ActivateExtension.X;

  type ExtensionMsg_DeliverMessage = 
    TraceEvent.ExtensionMsg_DeliverMessage.X;

  type ExtensionMsg_DispatchEvent = 
    TraceEvent.ExtensionMsg_DispatchEvent.X;

  type ExtensionMsg_DispatchOnConnect = 
    TraceEvent.ExtensionMsg_DispatchOnConnect.X;

  type ExtensionMsg_DispatchOnDisconnect = 
    TraceEvent.ExtensionMsg_DispatchOnDisconnect.X;

  type ExtensionMsg_ExecuteCode = 
    TraceEvent.ExtensionMsg_ExecuteCode.X;

  type ExtensionMsg_Loaded = 
    TraceEvent.ExtensionMsg_Loaded.X;

  type ExtensionMsg_NotifyRenderViewType = 
    TraceEvent.ExtensionMsg_NotifyRenderViewType.X;

  type ExtensionMsg_Response = 
    TraceEvent.ExtensionMsg_Response.X;

  type ExtensionMsg_SetScriptingAllowlist = 
    TraceEvent.ExtensionMsg_SetScriptingAllowlist.X;

  type ExtensionMsg_SetSessionInfo = 
    TraceEvent.ExtensionMsg_SetSessionInfo.X;

  type ExtensionMsg_SetSystemFont = 
    TraceEvent.ExtensionMsg_SetSystemFont.X;

  type ExtensionMsg_SetTabId = 
    TraceEvent.ExtensionMsg_SetTabId.X;

  type ExtensionMsg_UpdateBrowserWindowId = 
    TraceEvent.ExtensionMsg_UpdateBrowserWindowId.X;

  type ExtensionMsg_UpdateDefaultPolicyHostRestrictions = 
    TraceEvent.ExtensionMsg_UpdateDefaultPolicyHostRestrictions.X;

  type ExtensionMsg_UpdateUserScripts = 
    TraceEvent.ExtensionMsg_UpdateUserScripts.X;

  type ExtensionMsg_ValidateMessagePort = 
    TraceEvent.ExtensionMsg_ValidateMessagePort.X;

  type ExtensionMsg_WatchPages = 
    TraceEvent.ExtensionMsg_WatchPages.X;

  type FaveReady_mark = 
    TraceEvent.FaveReady_mark.R;

  type FaveReady = 
    TraceEvent.FaveReady.b |
    TraceEvent.FaveReady.e;

  type FetchStart = 
    TraceEvent.FetchStart.R;

  type FireAnimationFrame = 
    TraceEvent.FireAnimationFrame.X;

  type FireIdleCallback = 
    TraceEvent.FireIdleCallback.X;

  type FirstContentfulPaint = 
    TraceEvent.FirstContentfulPaint.b |
    TraceEvent.FirstContentfulPaint.e |
    TraceEvent.FirstContentfulPaint.I |
    TraceEvent.FirstContentfulPaint.R;

  type FirstImagePaint = 
    TraceEvent.FirstImagePaint.R;

  type FirstLayout = 
    TraceEvent.FirstLayout.R;

  type FirstMeaningfulPaint = 
    TraceEvent.FirstMeaningfulPaint.b |
    TraceEvent.FirstMeaningfulPaint.e |
    TraceEvent.FirstMeaningfulPaint.R;

  type FirstMeaningfulPaintCandidate = 
    TraceEvent.FirstMeaningfulPaintCandidate.R;

  type FirstPaint = 
    TraceEvent.FirstPaint.I |
    TraceEvent.FirstPaint.R;

  type FirstTextPaint = 
    TraceEvent.FirstTextPaint.R;

  type FirstVisualChange = 
    TraceEvent.FirstVisualChange.b |
    TraceEvent.FirstVisualChange.e;

  type FooterEnd = 
    TraceEvent.FooterEnd.R;

  type FooterStart = 
    TraceEvent.FooterStart.R;

  type FooterTime = 
    TraceEvent.FooterTime.b |
    TraceEvent.FooterTime.e;

  type Frame_deferrable_tq = 
    TraceEvent.Frame_deferrable_tq.X;

  type Frame_loading_tq = 
    TraceEvent.Frame_loading_tq.X;

  type Frame_pausable_tq = 
    TraceEvent.Frame_pausable_tq.X;

  type Frame_throttleable_tq = 
    TraceEvent.Frame_throttleable_tq.X;

  type Frame_unpausable_tq = 
    TraceEvent.Frame_unpausable_tq.X;

  type Frame = 
    TraceEvent.Frame.b |
    TraceEvent.Frame.e;

  type FrameBlameContext = 
    TraceEvent.FrameBlameContext.LP |
    TraceEvent.FrameBlameContext.RP;

  type FrameCommittedInBrowser = 
    TraceEvent.FrameCommittedInBrowser.I;

  type FrameDeletedInBrowser = 
    TraceEvent.FrameDeletedInBrowser.I;

  type FrameHostMsg_CreateChildFrame = 
    TraceEvent.FrameHostMsg_CreateChildFrame.X;

  type FrameHostMsg_Unload_ACK = 
    TraceEvent.FrameHostMsg_Unload_ACK.X;

  type FramePresented = 
    TraceEvent.FramePresented.R;

  type FrameSequenceTracker = 
    TraceEvent.FrameSequenceTracker.b |
    TraceEvent.FrameSequenceTracker.e;

  type FrameStartedLoading = 
    TraceEvent.FrameStartedLoading.I;

  type FunctionCall = 
    TraceEvent.FunctionCall.B |
    TraceEvent.FunctionCall.E |
    TraceEvent.FunctionCall.X;

  type GetAccessToken = 
    TraceEvent.GetAccessToken.b |
    TraceEvent.GetAccessToken.e;

  type GlobalFirstContentfulPaint = 
    TraceEvent.GlobalFirstContentfulPaint.I;

  type GlResizeChromium = 
    TraceEvent.GlResizeChromium.X;

  type Goog_123_3_1_end = 
    TraceEvent.Goog_123_3_1_end.R;

  type Goog_123_3_1_start = 
    TraceEvent.Goog_123_3_1_start.R;

  type Goog_123_3_1 = 
    TraceEvent.Goog_123_3_1.b |
    TraceEvent.Goog_123_3_1.e;

  type GpuChannelMsg_CreateCommandBuffer = 
    TraceEvent.GpuChannelMsg_CreateCommandBuffer.X;

  type GpuChannelMsg_CreateGMBSharedImage = 
    TraceEvent.GpuChannelMsg_CreateGMBSharedImage.X;

  type GpuChannelMsg_CreateSharedImage = 
    TraceEvent.GpuChannelMsg_CreateSharedImage.X;

  type GpuChannelMsg_CreateSharedImageWithData = 
    TraceEvent.GpuChannelMsg_CreateSharedImageWithData.X;

  type GpuChannelMsg_DestroyCommandBuffer = 
    TraceEvent.GpuChannelMsg_DestroyCommandBuffer.X;

  type GpuChannelMsg_DestroySharedImage = 
    TraceEvent.GpuChannelMsg_DestroySharedImage.X;

  type GpuChannelMsg_RegisterSharedImageUploadBuffer = 
    TraceEvent.GpuChannelMsg_RegisterSharedImageUploadBuffer.X;

  type GpuCommandBufferMsg_AsyncFlush = 
    TraceEvent.GpuCommandBufferMsg_AsyncFlush.X;

  type GpuCommandBufferMsg_DestroyTransferBuffer = 
    TraceEvent.GpuCommandBufferMsg_DestroyTransferBuffer.X;

  type GpuCommandBufferMsg_RegisterTransferBuffer = 
    TraceEvent.GpuCommandBufferMsg_RegisterTransferBuffer.X;

  type GpuCommandBufferMsg_SetGetBuffer = 
    TraceEvent.GpuCommandBufferMsg_SetGetBuffer.X;

  type GpuCommandBufferMsg_WaitForGetOffsetInRange = 
    TraceEvent.GpuCommandBufferMsg_WaitForGetOffsetInRange.X;

  type GPUTask = 
    TraceEvent.GPUTask.X;

  type HandleMouseMove = 
    TraceEvent.HandleMouseMove.X;

  type HeadEnd = 
    TraceEvent.HeadEnd.R;

  type HeadTime = 
    TraceEvent.HeadTime.b |
    TraceEvent.HeadTime.e;

  type HitTest = 
    TraceEvent.HitTest.B |
    TraceEvent.HitTest.E |
    TraceEvent.HitTest.X;

  type HOST_RESOLVER_IMPL_ATTEMPT_FINISHED = 
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_FINISHED.n;

  type HOST_RESOLVER_IMPL_ATTEMPT_STARTED = 
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_STARTED.n;

  type HOST_RESOLVER_IMPL_CACHE_HIT = 
    TraceEvent.HOST_RESOLVER_IMPL_CACHE_HIT.n;

  type HOST_RESOLVER_IMPL_CREATE_JOB = 
    TraceEvent.HOST_RESOLVER_IMPL_CREATE_JOB.n;

  type HOST_RESOLVER_IMPL_DNS_TASK = 
    TraceEvent.HOST_RESOLVER_IMPL_DNS_TASK.b |
    TraceEvent.HOST_RESOLVER_IMPL_DNS_TASK.e;

  type HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK = 
    TraceEvent.HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK.n;

  type HOST_RESOLVER_IMPL_JOB_ATTACH = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB_ATTACH.n;

  type HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH.n;

  type HOST_RESOLVER_IMPL_JOB_STARTED = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB_STARTED.n;

  type HOST_RESOLVER_IMPL_JOB = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB.b |
    TraceEvent.HOST_RESOLVER_IMPL_JOB.e;

  type HOST_RESOLVER_IMPL_PROC_TASK = 
    TraceEvent.HOST_RESOLVER_IMPL_PROC_TASK.b |
    TraceEvent.HOST_RESOLVER_IMPL_PROC_TASK.e;

  type HOST_RESOLVER_IMPL_REQUEST = 
    TraceEvent.HOST_RESOLVER_IMPL_REQUEST.b |
    TraceEvent.HOST_RESOLVER_IMPL_REQUEST.e;

  type HTMLParserScriptRunnerExecuteScript = 
    TraceEvent.HTMLParserScriptRunnerExecuteScript.X;

  type HTTP_CACHE_ADD_TO_ENTRY = 
    TraceEvent.HTTP_CACHE_ADD_TO_ENTRY.b |
    TraceEvent.HTTP_CACHE_ADD_TO_ENTRY.e;

  type HTTP_CACHE_CALLER_REQUEST_HEADERS = 
    TraceEvent.HTTP_CACHE_CALLER_REQUEST_HEADERS.n;

  type HTTP_CACHE_CREATE_ENTRY = 
    TraceEvent.HTTP_CACHE_CREATE_ENTRY.b |
    TraceEvent.HTTP_CACHE_CREATE_ENTRY.e;

  type HTTP_CACHE_DOOM_ENTRY = 
    TraceEvent.HTTP_CACHE_DOOM_ENTRY.b |
    TraceEvent.HTTP_CACHE_DOOM_ENTRY.e;

  type HTTP_CACHE_GET_BACKEND = 
    TraceEvent.HTTP_CACHE_GET_BACKEND.b |
    TraceEvent.HTTP_CACHE_GET_BACKEND.e;

  type HTTP_CACHE_OPEN_OR_CREATE_ENTRY = 
    TraceEvent.HTTP_CACHE_OPEN_OR_CREATE_ENTRY.b |
    TraceEvent.HTTP_CACHE_OPEN_OR_CREATE_ENTRY.e;

  type HTTP_CACHE_READ_DATA = 
    TraceEvent.HTTP_CACHE_READ_DATA.b |
    TraceEvent.HTTP_CACHE_READ_DATA.e;

  type HTTP_CACHE_READ_INFO = 
    TraceEvent.HTTP_CACHE_READ_INFO.b |
    TraceEvent.HTTP_CACHE_READ_INFO.e;

  type HTTP_CACHE_WRITE_DATA = 
    TraceEvent.HTTP_CACHE_WRITE_DATA.b |
    TraceEvent.HTTP_CACHE_WRITE_DATA.e;

  type HTTP_CACHE_WRITE_INFO = 
    TraceEvent.HTTP_CACHE_WRITE_INFO.b |
    TraceEvent.HTTP_CACHE_WRITE_INFO.e;

  type HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB = 
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB.n;

  type HTTP_STREAM_JOB_BOUND_TO_REQUEST = 
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_REQUEST.n;

  type HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND.n;

  type HTTP_STREAM_JOB_CONTROLLER_BOUND = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_BOUND.n;

  type HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED.n;

  type HTTP_STREAM_JOB_CONTROLLER = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER.b |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER.e;

  type HTTP_STREAM_JOB_DELAYED = 
    TraceEvent.HTTP_STREAM_JOB_DELAYED.n;

  type HTTP_STREAM_JOB_INIT_CONNECTION = 
    TraceEvent.HTTP_STREAM_JOB_INIT_CONNECTION.b |
    TraceEvent.HTTP_STREAM_JOB_INIT_CONNECTION.e;

  type HTTP_STREAM_JOB_THROTTLED = 
    TraceEvent.HTTP_STREAM_JOB_THROTTLED.n;

  type HTTP_STREAM_JOB_WAITING = 
    TraceEvent.HTTP_STREAM_JOB_WAITING.b |
    TraceEvent.HTTP_STREAM_JOB_WAITING.e;

  type HTTP_STREAM_JOB = 
    TraceEvent.HTTP_STREAM_JOB.b |
    TraceEvent.HTTP_STREAM_JOB.e;

  type HTTP_STREAM_REQUEST_BOUND_TO_JOB = 
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_JOB.n;

  type HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION = 
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION.n;

  type HTTP_STREAM_REQUEST_PROTO = 
    TraceEvent.HTTP_STREAM_REQUEST_PROTO.n;

  type HTTP_STREAM_REQUEST_STARTED_JOB = 
    TraceEvent.HTTP_STREAM_REQUEST_STARTED_JOB.n;

  type HTTP_STREAM_REQUEST = 
    TraceEvent.HTTP_STREAM_REQUEST.b |
    TraceEvent.HTTP_STREAM_REQUEST.e;

  type HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS.n;

  type HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS.n;

  type HTTP_TRANSACTION_READ_BODY = 
    TraceEvent.HTTP_TRANSACTION_READ_BODY.b |
    TraceEvent.HTTP_TRANSACTION_READ_BODY.e;

  type HTTP_TRANSACTION_READ_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_READ_HEADERS.b |
    TraceEvent.HTTP_TRANSACTION_READ_HEADERS.e;

  type HTTP_TRANSACTION_READ_RESPONSE_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_READ_RESPONSE_HEADERS.n;

  type HTTP_TRANSACTION_SEND_REQUEST = 
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST.b |
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST.e;

  type HTTP2_SESSION_CLOSE = 
    TraceEvent.HTTP2_SESSION_CLOSE.n;

  type HTTP2_SESSION_INITIALIZED = 
    TraceEvent.HTTP2_SESSION_INITIALIZED.n;

  type HTTP2_SESSION_PING = 
    TraceEvent.HTTP2_SESSION_PING.n;

  type HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL = 
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL.n;

  type HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION = 
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION.n;

  type HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET = 
    TraceEvent.HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET.n;

  type HTTP2_SESSION_POOL_REMOVE_SESSION = 
    TraceEvent.HTTP2_SESSION_POOL_REMOVE_SESSION.n;

  type HTTP2_SESSION_RECV_DATA = 
    TraceEvent.HTTP2_SESSION_RECV_DATA.n;

  type HTTP2_SESSION_RECV_GOAWAY = 
    TraceEvent.HTTP2_SESSION_RECV_GOAWAY.n;

  type HTTP2_SESSION_RECV_HEADERS = 
    TraceEvent.HTTP2_SESSION_RECV_HEADERS.n;

  type HTTP2_SESSION_RECV_RST_STREAM = 
    TraceEvent.HTTP2_SESSION_RECV_RST_STREAM.n;

  type HTTP2_SESSION_RECV_SETTING = 
    TraceEvent.HTTP2_SESSION_RECV_SETTING.n;

  type HTTP2_SESSION_RECV_SETTINGS_ACK = 
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS_ACK.n;

  type HTTP2_SESSION_RECV_SETTINGS = 
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS.n;

  type HTTP2_SESSION_RECV_WINDOW_UPDATE = 
    TraceEvent.HTTP2_SESSION_RECV_WINDOW_UPDATE.n;

  type HTTP2_SESSION_SEND_DATA = 
    TraceEvent.HTTP2_SESSION_SEND_DATA.n;

  type HTTP2_SESSION_SEND_HEADERS = 
    TraceEvent.HTTP2_SESSION_SEND_HEADERS.n;

  type HTTP2_SESSION_SEND_RST_STREAM = 
    TraceEvent.HTTP2_SESSION_SEND_RST_STREAM.n;

  type HTTP2_SESSION_SEND_SETTINGS_ACK = 
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS_ACK.n;

  type HTTP2_SESSION_SEND_SETTINGS = 
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS.n;

  type HTTP2_SESSION_SEND_WINDOW_UPDATE = 
    TraceEvent.HTTP2_SESSION_SEND_WINDOW_UPDATE.n;

  type HTTP2_SESSION_UPDATE_RECV_WINDOW = 
    TraceEvent.HTTP2_SESSION_UPDATE_RECV_WINDOW.n;

  type HTTP2_SESSION_UPDATE_SEND_WINDOW = 
    TraceEvent.HTTP2_SESSION_UPDATE_SEND_WINDOW.n;

  type HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE = 
    TraceEvent.HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE.n;

  type HTTP2_SESSION = 
    TraceEvent.HTTP2_SESSION.b;

  type HTTP2_STREAM_SEND_PRIORITY = 
    TraceEvent.HTTP2_STREAM_SEND_PRIORITY.n;

  type HTTP2_STREAM_UPDATE_RECV_WINDOW = 
    TraceEvent.HTTP2_STREAM_UPDATE_RECV_WINDOW.n;

  type HTTP2_STREAM_UPDATE_SEND_WINDOW = 
    TraceEvent.HTTP2_STREAM_UPDATE_SEND_WINDOW.n;

  type HTTP3_DATA_FRAME_RECEIVED = 
    TraceEvent.HTTP3_DATA_FRAME_RECEIVED.n;

  type HTTP3_DATA_SENT = 
    TraceEvent.HTTP3_DATA_SENT.n;

  type HTTP3_HEADERS_DECODED = 
    TraceEvent.HTTP3_HEADERS_DECODED.n;

  type HTTP3_HEADERS_RECEIVED = 
    TraceEvent.HTTP3_HEADERS_RECEIVED.n;

  type HTTP3_HEADERS_SENT = 
    TraceEvent.HTTP3_HEADERS_SENT.n;

  type HTTP3_LOCAL_CONTROL_STREAM_CREATED = 
    TraceEvent.HTTP3_LOCAL_CONTROL_STREAM_CREATED.n;

  type HTTP3_LOCAL_QPACK_DECODER_STREAM_CREATED = 
    TraceEvent.HTTP3_LOCAL_QPACK_DECODER_STREAM_CREATED.n;

  type HTTP3_LOCAL_QPACK_ENCODER_STREAM_CREATED = 
    TraceEvent.HTTP3_LOCAL_QPACK_ENCODER_STREAM_CREATED.n;

  type HTTP3_PEER_CONTROL_STREAM_CREATED = 
    TraceEvent.HTTP3_PEER_CONTROL_STREAM_CREATED.n;

  type HTTP3_PEER_QPACK_DECODER_STREAM_CREATED = 
    TraceEvent.HTTP3_PEER_QPACK_DECODER_STREAM_CREATED.n;

  type HTTP3_PEER_QPACK_ENCODER_STREAM_CREATED = 
    TraceEvent.HTTP3_PEER_QPACK_ENCODER_STREAM_CREATED.n;

  type HTTP3_PRIORITY_UPDATE_SENT = 
    TraceEvent.HTTP3_PRIORITY_UPDATE_SENT.n;

  type HTTP3_SETTINGS_RECEIVED = 
    TraceEvent.HTTP3_SETTINGS_RECEIVED.n;

  type HTTP3_SETTINGS_RESUMED = 
    TraceEvent.HTTP3_SETTINGS_RESUMED.n;

  type HTTP3_SETTINGS_SENT = 
    TraceEvent.HTTP3_SETTINGS_SENT.n;

  type HTTP3_UNKNOWN_FRAME_RECEIVED = 
    TraceEvent.HTTP3_UNKNOWN_FRAME_RECEIVED.n;

  type IdentityGetAuthTokenFunction = 
    TraceEvent.IdentityGetAuthTokenFunction.b |
    TraceEvent.IdentityGetAuthTokenFunction.e;

  type IdentityMintRequestQueue = 
    TraceEvent.IdentityMintRequestQueue.b |
    TraceEvent.IdentityMintRequestQueue.e;

  type Idle_tq = 
    TraceEvent.Idle_tq.X;

  type ImageDecodeTask = 
    TraceEvent.ImageDecodeTask.B |
    TraceEvent.ImageDecodeTask.E |
    TraceEvent.ImageDecodeTask.X;

  type ImageUploadTask = 
    TraceEvent.ImageUploadTask.X;

  type InitializeMojoIPCChannel = 
    TraceEvent.InitializeMojoIPCChannel.X;

  type Initializing = 
    TraceEvent.Initializing.b |
    TraceEvent.Initializing.e;

  type Input_tq = 
    TraceEvent.Input_tq.X;

  type InputEventSentBlocking = 
    TraceEvent.InputEventSentBlocking.I;

  type InstallConditionalFeatures = 
    TraceEvent.InstallConditionalFeatures.X;

  type InteractiveTime = 
    TraceEvent.InteractiveTime.R;

  type InvalidateLayout = 
    TraceEvent.InvalidateLayout.I;

  type Io_thread_tq = 
    TraceEvent.Io_thread_tq.X;

  type Io_user_blocking_tq = 
    TraceEvent.Io_user_blocking_tq.X;

  type IPCChannel = 
    TraceEvent.IPCChannel.X;

  type IteratingoverWebContentsObservers = 
    TraceEvent.IteratingoverWebContentsObservers.X;

  type Jank = 
    TraceEvent.Jank.b |
    TraceEvent.Jank.e;

  type KeyframeModel = 
    TraceEvent.KeyframeModel.b |
    TraceEvent.KeyframeModel.e;

  type KeyWindow = 
    TraceEvent.KeyWindow.I;

  type LargeUIJank = 
    TraceEvent.LargeUIJank.b |
    TraceEvent.LargeUIJank.e;

  type LaunchProcess = 
    TraceEvent.LaunchProcess.X;

  type LayerId = 
    TraceEvent.LayerId.D |
    TraceEvent.LayerId.N;

  type Layout = 
    TraceEvent.Layout.B |
    TraceEvent.Layout.E |
    TraceEvent.Layout.X;

  type LayoutShift = 
    TraceEvent.LayoutShift.I;

  type LoadAnyStartablePendingRequests = 
    TraceEvent.LoadAnyStartablePendingRequests.X;

  type LoadEndeventUtils = 
    TraceEvent.LoadEndeventUtils.R;

  type LoadEndpixelQueue = 
    TraceEvent.LoadEndpixelQueue.R;

  type LoadEventEnd = 
    TraceEvent.LoadEventEnd.R;

  type LoadEventStart = 
    TraceEvent.LoadEventStart.R;

  type LoadFinished = 
    TraceEvent.LoadFinished.I;

  type LoadStarteventUtils = 
    TraceEvent.LoadStarteventUtils.R;

  type LoadStartpixelQueue = 
    TraceEvent.LoadStartpixelQueue.R;

  type LogMessage = 
    TraceEvent.LogMessage.I;

  type LongDrawInterval = 
    TraceEvent.LongDrawInterval.F |
    TraceEvent.LongDrawInterval.S;

  type LongIdlePeriod = 
    TraceEvent.LongIdlePeriod.b |
    TraceEvent.LongIdlePeriod.e;

  type LongIdlePeriodPaused = 
    TraceEvent.LongIdlePeriodPaused.b |
    TraceEvent.LongIdlePeriodPaused.e;

  type LongTask = 
    TraceEvent.LongTask.I;

  type Lteu = 
    TraceEvent.Lteu.b |
    TraceEvent.Lteu.e;

  type Ltpq = 
    TraceEvent.Ltpq.b |
    TraceEvent.Ltpq.e;

  type MainThreadSchedulerIdlePeriod = 
    TraceEvent.MainThreadSchedulerIdlePeriod.b |
    TraceEvent.MainThreadSchedulerIdlePeriod.e;

  type MajorGC = 
    TraceEvent.MajorGC.B |
    TraceEvent.MajorGC.E |
    TraceEvent.MajorGC.X;

  type Mark_jset = 
    TraceEvent.Mark_jset.R;

  type Mark_test = 
    TraceEvent.Mark_test.R;

  type MarkAsMainFrame = 
    TraceEvent.MarkAsMainFrame.I;

  type MarkDOMContent = 
    TraceEvent.MarkDOMContent.I;

  type MarkLoad = 
    TraceEvent.MarkLoad.I;

  type Measure_test = 
    TraceEvent.Measure_test.b |
    TraceEvent.Measure_test.e;

  type MemoryUsage = 
    TraceEvent.MemoryUsage.C;

  type MessagePipeclosing = 
    TraceEvent.MessagePipeclosing.f |
    TraceEvent.MessagePipeclosing.s |
    TraceEvent.MessagePipeclosing.X;

  type MessagePipepeerclosed = 
    TraceEvent.MessagePipepeerclosed.X;

  type MinorGC = 
    TraceEvent.MinorGC.B |
    TraceEvent.MinorGC.E |
    TraceEvent.MinorGC.X;

  type MintTokenFlow = 
    TraceEvent.MintTokenFlow.b |
    TraceEvent.MintTokenFlow.e;

  type Moredamageexpectedsoon = 
    TraceEvent.Moredamageexpectedsoon.I;

  type NavigationRequest = 
    TraceEvent.NavigationRequest.b |
    TraceEvent.NavigationRequest.e;

  type NavigationStart = 
    TraceEvent.NavigationStart.R;

  type NavigationStartToCommit = 
    TraceEvent.NavigationStartToCommit.b |
    TraceEvent.NavigationStartToCommit.e;

  type NavigationtimeToResponseStarted = 
    TraceEvent.NavigationtimeToResponseStarted.F |
    TraceEvent.NavigationtimeToResponseStarted.S;

  type NavigationTimingnavigationStart = 
    TraceEvent.NavigationTimingnavigationStart.I;

  type NeedsBeginFrameChanged = 
    TraceEvent.NeedsBeginFrameChanged.I;

  type NeedsBeginFrames = 
    TraceEvent.NeedsBeginFrames.F |
    TraceEvent.NeedsBeginFrames.S;

  type NeedsTickAnimations = 
    TraceEvent.NeedsTickAnimations.I;

  type NETWORK_DELEGATE_BEFORE_START_TRANSACTION = 
    TraceEvent.NETWORK_DELEGATE_BEFORE_START_TRANSACTION.b |
    TraceEvent.NETWORK_DELEGATE_BEFORE_START_TRANSACTION.e;

  type NETWORK_DELEGATE_BEFORE_URL_REQUEST = 
    TraceEvent.NETWORK_DELEGATE_BEFORE_URL_REQUEST.b |
    TraceEvent.NETWORK_DELEGATE_BEFORE_URL_REQUEST.e;

  type NETWORK_DELEGATE_HEADERS_RECEIVED = 
    TraceEvent.NETWORK_DELEGATE_HEADERS_RECEIVED.b |
    TraceEvent.NETWORK_DELEGATE_HEADERS_RECEIVED.e;

  type NETWORK_QUALITY_CHANGED = 
    TraceEvent.NETWORK_QUALITY_CHANGED.n;

  type Nodamageyet = 
    TraceEvent.Nodamageyet.I;

  type Non_waking_tq = 
    TraceEvent.Non_waking_tq.X;

  type Num_cpus = 
    TraceEvent.Num_cpus.M;

  type Obmark0c_search = 
    TraceEvent.Obmark0c_search.R;

  type Obmark0odbMB_120 = 
    TraceEvent.Obmark0odbMB_120.R;

  type Obmark0odbTR_11 = 
    TraceEvent.Obmark0odbTR_11.R;

  type Obmark0renderMB_120 = 
    TraceEvent.Obmark0renderMB_120.R;

  type Obmark0renderTR_11 = 
    TraceEvent.Obmark0renderTR_11.R;

  type Obmark0start = 
    TraceEvent.Obmark0start.R;

  type Obmark1c_foundMB_120 = 
    TraceEvent.Obmark1c_foundMB_120.R;

  type Obmark1c_foundTR_11 = 
    TraceEvent.Obmark1c_foundTR_11.R;

  type Obmark1odb_rMB_120 = 
    TraceEvent.Obmark1odb_rMB_120.R;

  type Obmark1odb_rTR_11 = 
    TraceEvent.Obmark1odb_rTR_11.R;

  type Obmark1renderedMB_120 = 
    TraceEvent.Obmark1renderedMB_120.R;

  type Obmark1renderedTR_11 = 
    TraceEvent.Obmark1renderedTR_11.R;

  type Obmeasurec_foundMB_120 = 
    TraceEvent.Obmeasurec_foundMB_120.b |
    TraceEvent.Obmeasurec_foundMB_120.e;

  type Obmeasurec_foundTR_11 = 
    TraceEvent.Obmeasurec_foundTR_11.b |
    TraceEvent.Obmeasurec_foundTR_11.e;

  type Obmeasureodb_rMB_120 = 
    TraceEvent.Obmeasureodb_rMB_120.b |
    TraceEvent.Obmeasureodb_rMB_120.e;

  type Obmeasureodb_rTR_11 = 
    TraceEvent.Obmeasureodb_rTR_11.b |
    TraceEvent.Obmeasureodb_rTR_11.e;

  type ObmeasureodbMB_120 = 
    TraceEvent.ObmeasureodbMB_120.b |
    TraceEvent.ObmeasureodbMB_120.e;

  type ObmeasureodbTR_11 = 
    TraceEvent.ObmeasureodbTR_11.b |
    TraceEvent.ObmeasureodbTR_11.e;

  type ObmeasurerenderedMB_120 = 
    TraceEvent.ObmeasurerenderedMB_120.b |
    TraceEvent.ObmeasurerenderedMB_120.e;

  type ObmeasurerenderedTR_11 = 
    TraceEvent.ObmeasurerenderedTR_11.b |
    TraceEvent.ObmeasurerenderedTR_11.e;

  type OnLoad = 
    TraceEvent.OnLoad.b |
    TraceEvent.OnLoad.e;

  type OnMintTokenSuccess = 
    TraceEvent.OnMintTokenSuccess.n;

  type OnRequestFailed = 
    TraceEvent.OnRequestFailed.b |
    TraceEvent.OnRequestFailed.e;

  type OnResponseStarted = 
    TraceEvent.OnResponseStarted.b |
    TraceEvent.OnResponseStarted.e;

  type OptimizelyEnd = 
    TraceEvent.OptimizelyEnd.R;

  type OptimizelyStart = 
    TraceEvent.OptimizelyStart.R;

  type OptimizelyTime = 
    TraceEvent.OptimizelyTime.b |
    TraceEvent.OptimizelyTime.e;

  type PageLoad = 
    TraceEvent.PageLoad.b |
    TraceEvent.PageLoad.e;

  type PageMsg_SetHistoryOffsetAndLength = 
    TraceEvent.PageMsg_SetHistoryOffsetAndLength.X;

  type Paint = 
    TraceEvent.Paint.I |
    TraceEvent.Paint.X;

  type PaintImage = 
    TraceEvent.PaintImage.X;

  type PaintNonDefaultBackgroundColor = 
    TraceEvent.PaintNonDefaultBackgroundColor.R;

  type ParseAuthorStyleSheet = 
    TraceEvent.ParseAuthorStyleSheet.X;

  type ParseHTML = 
    TraceEvent.ParseHTML.B |
    TraceEvent.ParseHTML.E |
    TraceEvent.ParseHTML.X;

  type PeakMemoryTracking = 
    TraceEvent.PeakMemoryTracking.F |
    TraceEvent.PeakMemoryTracking.S |
    TraceEvent.PeakMemoryTracking.T;

  type PipelineReporter = 
    TraceEvent.PipelineReporter.b |
    TraceEvent.PipelineReporter.e;

  type PlatformResourceSendRequest = 
    TraceEvent.PlatformResourceSendRequest.B |
    TraceEvent.PlatformResourceSendRequest.E;

  type PostCommit = 
    TraceEvent.PostCommit.X;

  type PostingToCompositor = 
    TraceEvent.PostingToCompositor.I;

  type PreemptionAllowedStackScope = 
    TraceEvent.PreemptionAllowedStackScope.b |
    TraceEvent.PreemptionAllowedStackScope.e;

  type PreloadRenderBlockingStatusChange = 
    TraceEvent.PreloadRenderBlockingStatusChange.I;

  type PrePaint = 
    TraceEvent.PrePaint.X;

  type Process_labels = 
    TraceEvent.Process_labels.M;

  type Process_name = 
    TraceEvent.Process_name.M;

  type Process_sort_index = 
    TraceEvent.Process_sort_index.M;

  type Process_uptime_seconds = 
    TraceEvent.Process_uptime_seconds.M;

  type ProcessCommitResponse = 
    TraceEvent.ProcessCommitResponse.X;

  type ProcessUIResourceRequestQueue = 
    TraceEvent.ProcessUIResourceRequestQueue.X;

  type PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST = 
    TraceEvent.PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST.n;

  type PROXY_RESOLUTION_SERVICE = 
    TraceEvent.PROXY_RESOLUTION_SERVICE.b |
    TraceEvent.PROXY_RESOLUTION_SERVICE.e;

  type QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS = 
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS.n;

  type QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS = 
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS.n;

  type QUIC_CONNECTION_MIGRATION_MODE = 
    TraceEvent.QUIC_CONNECTION_MIGRATION_MODE.n;

  type QUIC_SESSION_ACK_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_ACK_FRAME_RECEIVED.n;

  type QUIC_SESSION_ACK_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_ACK_FRAME_SENT.n;

  type QUIC_SESSION_CERTIFICATE_VERIFIED = 
    TraceEvent.QUIC_SESSION_CERTIFICATE_VERIFIED.n;

  type QUIC_SESSION_CLOSED = 
    TraceEvent.QUIC_SESSION_CLOSED.n;

  type QUIC_SESSION_COALESCED_PACKET_SENT = 
    TraceEvent.QUIC_SESSION_COALESCED_PACKET_SENT.n;

  type QUIC_SESSION_CRYPTO_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_CRYPTO_FRAME_RECEIVED.n;

  type QUIC_SESSION_CRYPTO_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_CRYPTO_FRAME_SENT.n;

  type QUIC_SESSION_HANDSHAKE_DONE_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_HANDSHAKE_DONE_FRAME_RECEIVED.n;

  type QUIC_SESSION_MAX_STREAMS_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_MAX_STREAMS_FRAME_RECEIVED.n;

  type QUIC_SESSION_PACKET_AUTHENTICATED = 
    TraceEvent.QUIC_SESSION_PACKET_AUTHENTICATED.n;

  type QUIC_SESSION_PACKET_LOST = 
    TraceEvent.QUIC_SESSION_PACKET_LOST.n;

  type QUIC_SESSION_PACKET_RECEIVED = 
    TraceEvent.QUIC_SESSION_PACKET_RECEIVED.n;

  type QUIC_SESSION_PADDING_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_PADDING_FRAME_RECEIVED.n;

  type QUIC_SESSION_PADDING_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_PADDING_FRAME_SENT.n;

  type QUIC_SESSION_PING_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_PING_FRAME_SENT.n;

  type QUIC_SESSION_RST_STREAM_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_RST_STREAM_FRAME_SENT.n;

  type QUIC_SESSION_STOP_SENDING_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_STOP_SENDING_FRAME_SENT.n;

  type QUIC_SESSION_STREAM_FRAME_COALESCED = 
    TraceEvent.QUIC_SESSION_STREAM_FRAME_COALESCED.n;

  type QUIC_SESSION_STREAM_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_STREAM_FRAME_RECEIVED.n;

  type QUIC_SESSION_STREAM_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_STREAM_FRAME_SENT.n;

  type QUIC_SESSION_TRANSPORT_PARAMETERS_RECEIVED = 
    TraceEvent.QUIC_SESSION_TRANSPORT_PARAMETERS_RECEIVED.n;

  type QUIC_SESSION_TRANSPORT_PARAMETERS_RESUMED = 
    TraceEvent.QUIC_SESSION_TRANSPORT_PARAMETERS_RESUMED.n;

  type QUIC_SESSION_TRANSPORT_PARAMETERS_SENT = 
    TraceEvent.QUIC_SESSION_TRANSPORT_PARAMETERS_SENT.n;

  type QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED = 
    TraceEvent.QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED.n;

  type QUIC_SESSION_VERSION_NEGOTIATED = 
    TraceEvent.QUIC_SESSION_VERSION_NEGOTIATED.n;

  type QUIC_SESSION_WINDOW_UPDATE_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_WINDOW_UPDATE_FRAME_RECEIVED.n;

  type QUIC_SESSION = 
    TraceEvent.QUIC_SESSION.b;

  type QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB = 
    TraceEvent.QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB.n;

  type QUIC_STREAM_FACTORY_JOB_CONNECT = 
    TraceEvent.QUIC_STREAM_FACTORY_JOB_CONNECT.b |
    TraceEvent.QUIC_STREAM_FACTORY_JOB_CONNECT.e;

  type QUIC_STREAM_FACTORY_JOB = 
    TraceEvent.QUIC_STREAM_FACTORY_JOB.b |
    TraceEvent.QUIC_STREAM_FACTORY_JOB.e;

  type RasterTask = 
    TraceEvent.RasterTask.B |
    TraceEvent.RasterTask.E |
    TraceEvent.RasterTask.X;

  type ReadyToCommitNavigation = 
    TraceEvent.ReadyToCommitNavigation.b |
    TraceEvent.ReadyToCommitNavigation.e;

  type ReceiveCompositorFrameToStartDraw = 
    TraceEvent.ReceiveCompositorFrameToStartDraw.b |
    TraceEvent.ReceiveCompositorFrameToStartDraw.e;

  type RedirectEnd = 
    TraceEvent.RedirectEnd.R;

  type RedirectStart = 
    TraceEvent.RedirectStart.R;

  type RendererAudioState = 
    TraceEvent.RendererAudioState.b;

  type RendererPriority = 
    TraceEvent.RendererPriority.b |
    TraceEvent.RendererPriority.e;

  type RendererProcessType = 
    TraceEvent.RendererProcessType.b |
    TraceEvent.RendererProcessType.e;

  type RendererVisibility = 
    TraceEvent.RendererVisibility.b |
    TraceEvent.RendererVisibility.e;

  type RenderFrame = 
    TraceEvent.RenderFrame.D |
    TraceEvent.RenderFrame.N |
    TraceEvent.RenderFrame.O;

  type RenderFrameHostImplBeforeUnload = 
    TraceEvent.RenderFrameHostImplBeforeUnload.b |
    TraceEvent.RenderFrameHostImplBeforeUnload.e;

  type RenderSurfaceReasonCount = 
    TraceEvent.RenderSurfaceReasonCount.I;

  type REQUEST_ALIVE = 
    TraceEvent.REQUEST_ALIVE.b |
    TraceEvent.REQUEST_ALIVE.e;

  type RequestAnimationFrame = 
    TraceEvent.RequestAnimationFrame.I;

  type RequestIdleCallback = 
    TraceEvent.RequestIdleCallback.I;

  type RequestMainThreadFrame = 
    TraceEvent.RequestMainThreadFrame.I;

  type RequestStart = 
    TraceEvent.RequestStart.R;

  type ResourceChangePriority = 
    TraceEvent.ResourceChangePriority.I |
    TraceEvent.ResourceChangePriority.X;

  type ResourceFinish = 
    TraceEvent.ResourceFinish.I;

  type ResourceMarkAsCached = 
    TraceEvent.ResourceMarkAsCached.I;

  type ResourceReceivedData = 
    TraceEvent.ResourceReceivedData.I;

  type ResourceReceiveResponse = 
    TraceEvent.ResourceReceiveResponse.I;

  type ResourceSendRequest = 
    TraceEvent.ResourceSendRequest.I;

  type ResourceWillSendRequest = 
    TraceEvent.ResourceWillSendRequest.I;

  type ResponseEnd = 
    TraceEvent.ResponseEnd.R;

  type Rootframemissing = 
    TraceEvent.Rootframemissing.I;

  type RunBestEffortPriorityTask = 
    TraceEvent.RunBestEffortPriorityTask.X;

  type RunControlPriorityTask = 
    TraceEvent.RunControlPriorityTask.X;

  type RunHighestPriorityTask = 
    TraceEvent.RunHighestPriorityTask.X;

  type RunHighPriorityTask = 
    TraceEvent.RunHighPriorityTask.X;

  type RunMicrotasks = 
    TraceEvent.RunMicrotasks.B |
    TraceEvent.RunMicrotasks.E |
    TraceEvent.RunMicrotasks.X;

  type RunningIdleTask = 
    TraceEvent.RunningIdleTask.b |
    TraceEvent.RunningIdleTask.e;

  type RunNormalPriorityTask = 
    TraceEvent.RunNormalPriorityTask.B |
    TraceEvent.RunNormalPriorityTask.X;

  type RunPendingMicrotask = 
    TraceEvent.RunPendingMicrotask.X;

  type RunRequest = 
    TraceEvent.RunRequest.n;

  type RunTask = 
    TraceEvent.RunTask.B |
    TraceEvent.RunTask.I |
    TraceEvent.RunTask.X;

  type RunVeryHighPriorityTask = 
    TraceEvent.RunVeryHighPriorityTask.X;

  type ScheduledTasks = 
    TraceEvent.ScheduledTasks.b |
    TraceEvent.ScheduledTasks.e;

  type ScheduledTasksState = 
    TraceEvent.ScheduledTasksState.n;

  type ScheduleFrameForImageAnimation = 
    TraceEvent.ScheduleFrameForImageAnimation.X;

  type ScheduleStyleRecalculation = 
    TraceEvent.ScheduleStyleRecalculation.I;

  type ScopedAllowBaseSyncPrimitivesOutsideBlockingScope = 
    TraceEvent.ScopedAllowBaseSyncPrimitivesOutsideBlockingScope.X;

  type ScopedAllowBlocking = 
    TraceEvent.ScopedAllowBlocking.X;

  type ScopedAllowIO = 
    TraceEvent.ScopedAllowIO.X;

  type ScopedBlockingCall = 
    TraceEvent.ScopedBlockingCall.X;

  type ScopedBlockingCallWithBaseSyncPrimitives = 
    TraceEvent.ScopedBlockingCallWithBaseSyncPrimitives.X;

  type ScopedSetIpcHash = 
    TraceEvent.ScopedSetIpcHash.B |
    TraceEvent.ScopedSetIpcHash.X;

  type Screenshot = 
    TraceEvent.Screenshot.O;

  type ScrollDeltaThisFrame = 
    TraceEvent.ScrollDeltaThisFrame.I;

  type SendBeginMainFrameToCommit = 
    TraceEvent.SendBeginMainFrameToCommit.b |
    TraceEvent.SendBeginMainFrameToCommit.e;

  type SequenceEnabled = 
    TraceEvent.SequenceEnabled.F;

  type SequenceManagerPostTask = 
    TraceEvent.SequenceManagerPostTask.B |
    TraceEvent.SequenceManagerPostTask.f |
    TraceEvent.SequenceManagerPostTask.s |
    TraceEvent.SequenceManagerPostTask.X;

  type SequenceManagerRunTask = 
    TraceEvent.SequenceManagerRunTask.B |
    TraceEvent.SequenceManagerRunTask.X;

  type SetLayerTreeId = 
    TraceEvent.SetLayerTreeId.I;

  type ShCompile = 
    TraceEvent.ShCompile.X;

  type ShortIdlePeriod = 
    TraceEvent.ShortIdlePeriod.b |
    TraceEvent.ShortIdlePeriod.e;

  type ShouldNotSendBeginFrame = 
    TraceEvent.ShouldNotSendBeginFrame.X;

  type SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED = 
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED.n;

  type SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED = 
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED.n;

  type SIMPLE_CACHE_ENTRY_CLOSE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_CLOSE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_CALL.n;

  type SIMPLE_CACHE_ENTRY_CLOSE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_END.n;

  type SIMPLE_CACHE_ENTRY_CREATE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_CREATE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_CALL.n;

  type SIMPLE_CACHE_ENTRY_CREATE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_END.n;

  type SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC.n;

  type SIMPLE_CACHE_ENTRY_DOOM_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_DOOM_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_CALL.n;

  type SIMPLE_CACHE_ENTRY_DOOM_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_END.n;

  type SIMPLE_CACHE_ENTRY_OPEN_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_CALL.n;

  type SIMPLE_CACHE_ENTRY_OPEN_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_END.n;

  type SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_CALL.n;

  type SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_END.n;

  type SIMPLE_CACHE_ENTRY_READ_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_READ_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_CALL.n;

  type SIMPLE_CACHE_ENTRY_READ_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_END.n;

  type SIMPLE_CACHE_ENTRY_SET_KEY = 
    TraceEvent.SIMPLE_CACHE_ENTRY_SET_KEY.n;

  type SIMPLE_CACHE_ENTRY_WRITE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_WRITE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_CALL.n;

  type SIMPLE_CACHE_ENTRY_WRITE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_END.n;

  type SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC.n;

  type SIMPLE_CACHE_ENTRY = 
    TraceEvent.SIMPLE_CACHE_ENTRY.b |
    TraceEvent.SIMPLE_CACHE_ENTRY.e;

  type Sizemismatch = 
    TraceEvent.Sizemismatch.I;

  type SmoothnessDroppedFrame = 
    TraceEvent.SmoothnessDroppedFrame.X;

  type SOCKET_ALIVE = 
    TraceEvent.SOCKET_ALIVE.b |
    TraceEvent.SOCKET_ALIVE.e;

  type SOCKET_BYTES_RECEIVED = 
    TraceEvent.SOCKET_BYTES_RECEIVED.n;

  type SOCKET_BYTES_SENT = 
    TraceEvent.SOCKET_BYTES_SENT.n;

  type SOCKET_IN_USE = 
    TraceEvent.SOCKET_IN_USE.b |
    TraceEvent.SOCKET_IN_USE.e;

  type SOCKET_POOL_BOUND_TO_CONNECT_JOB = 
    TraceEvent.SOCKET_POOL_BOUND_TO_CONNECT_JOB.n;

  type SOCKET_POOL_BOUND_TO_SOCKET = 
    TraceEvent.SOCKET_POOL_BOUND_TO_SOCKET.n;

  type SOCKET_POOL_CLOSING_SOCKET = 
    TraceEvent.SOCKET_POOL_CLOSING_SOCKET.n;

  type SOCKET_POOL_CONNECT_JOB_CREATED = 
    TraceEvent.SOCKET_POOL_CONNECT_JOB_CREATED.n;

  type SOCKET_POOL = 
    TraceEvent.SOCKET_POOL.b |
    TraceEvent.SOCKET_POOL.e;

  type SpeedIndex = 
    TraceEvent.SpeedIndex.b |
    TraceEvent.SpeedIndex.e;

  type SSL_CONNECT_JOB_CONNECT = 
    TraceEvent.SSL_CONNECT_JOB_CONNECT.b |
    TraceEvent.SSL_CONNECT_JOB_CONNECT.e;

  type SSL_CONNECT = 
    TraceEvent.SSL_CONNECT.b |
    TraceEvent.SSL_CONNECT.e;

  type SSL_HANDSHAKE_MESSAGE_RECEIVED = 
    TraceEvent.SSL_HANDSHAKE_MESSAGE_RECEIVED.n;

  type SSL_HANDSHAKE_MESSAGE_SENT = 
    TraceEvent.SSL_HANDSHAKE_MESSAGE_SENT.n;

  type SSL_SOCKET_BYTES_RECEIVED = 
    TraceEvent.SSL_SOCKET_BYTES_RECEIVED.n;

  type SSL_SOCKET_BYTES_SENT = 
    TraceEvent.SSL_SOCKET_BYTES_SENT.n;

  type StartDrawToSwapStart = 
    TraceEvent.StartDrawToSwapStart.b |
    TraceEvent.StartDrawToSwapStart.e;

  type StartMintToken = 
    TraceEvent.StartMintToken.n;

  type StopSendEvent = 
    TraceEvent.StopSendEvent.I;

  type SubmitCompositorFrameToPresentationCompositorFrame = 
    TraceEvent.SubmitCompositorFrameToPresentationCompositorFrame.b |
    TraceEvent.SubmitCompositorFrameToPresentationCompositorFrame.e;

  type SubmitToReceiveCompositorFrame = 
    TraceEvent.SubmitToReceiveCompositorFrame.b |
    TraceEvent.SubmitToReceiveCompositorFrame.e;

  type SubresourceFilterMsg_SetRulesetForProcess = 
    TraceEvent.SubresourceFilterMsg_SetRulesetForProcess.X;

  type Subthread_default_tq = 
    TraceEvent.Subthread_default_tq.X;

  type Swap = 
    TraceEvent.Swap.b |
    TraceEvent.Swap.e |
    TraceEvent.Swap.n;

  type SwapBuffers = 
    TraceEvent.SwapBuffers.I;

  type SwapEndToPresentationCompositorFrame = 
    TraceEvent.SwapEndToPresentationCompositorFrame.b |
    TraceEvent.SwapEndToPresentationCompositorFrame.e;

  type Swapskipped = 
    TraceEvent.Swapskipped.I;

  type Swapthrottled = 
    TraceEvent.Swapthrottled.I;

  type SyncParent = 
    TraceEvent.SyncParent.X;

  type TabSwitchVisibilityRequest = 
    TraceEvent.TabSwitchVisibilityRequest.b |
    TraceEvent.TabSwitchVisibilityRequest.e;

  type TaskQueueThrottler_TaskQueueThrottled = 
    TraceEvent.TaskQueueThrottler_TaskQueueThrottled.X;

  type TaskQueueThrottler_TaskQueueUnthrottled = 
    TraceEvent.TaskQueueThrottler_TaskQueueUnthrottled.X;

  type TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET = 
    TraceEvent.TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET.n;

  type TCP_CONNECT_ATTEMPT = 
    TraceEvent.TCP_CONNECT_ATTEMPT.b |
    TraceEvent.TCP_CONNECT_ATTEMPT.e;

  type TCP_CONNECT = 
    TraceEvent.TCP_CONNECT.b |
    TraceEvent.TCP_CONNECT.e;

  type Thread_name = 
    TraceEvent.Thread_name.M;

  type Thread_sort_index = 
    TraceEvent.Thread_sort_index.M;

  type ThreadPool_PostTask = 
    TraceEvent.ThreadPool_PostTask.f |
    TraceEvent.ThreadPool_PostTask.s |
    TraceEvent.ThreadPool_PostTask.X;

  type ThreadPool_RunTask_BlockShutdown = 
    TraceEvent.ThreadPool_RunTask_BlockShutdown.X;

  type ThreadPool_RunTask_ContinueOnShutdown = 
    TraceEvent.ThreadPool_RunTask_ContinueOnShutdown.X;

  type ThreadPool_RunTask_SkipOnShutdown = 
    TraceEvent.ThreadPool_RunTask_SkipOnShutdown.B |
    TraceEvent.ThreadPool_RunTask_SkipOnShutdown.X;

  type ThreadPool_RunTask = 
    TraceEvent.ThreadPool_RunTask.B |
    TraceEvent.ThreadPool_RunTask.X;

  type ThreadPool_TaskInfo = 
    TraceEvent.ThreadPool_TaskInfo.B |
    TraceEvent.ThreadPool_TaskInfo.X;

  type TimerFire = 
    TraceEvent.TimerFire.X;

  type TimerInstall = 
    TraceEvent.TimerInstall.I;

  type TimerRemove = 
    TraceEvent.TimerRemove.I;

  type TimeStamp = 
    TraceEvent.TimeStamp.I;

  type TimeToDomReady = 
    TraceEvent.TimeToDomReady.b |
    TraceEvent.TimeToDomReady.e;

  type TimeToInteractive = 
    TraceEvent.TimeToInteractive.b |
    TraceEvent.TimeToInteractive.e;

  type TimeToZonesAndDomReady = 
    TraceEvent.TimeToZonesAndDomReady.b |
    TraceEvent.TimeToZonesAndDomReady.e;

  type TimeToZonesComplete = 
    TraceEvent.TimeToZonesComplete.b |
    TraceEvent.TimeToZonesComplete.e;

  type TopLevel = 
    TraceEvent.TopLevel.N |
    TraceEvent.TopLevel.O;

  type TracingSessionIdForWorker = 
    TraceEvent.TracingSessionIdForWorker.I;

  type TracingStartedInBrowser = 
    TraceEvent.TracingStartedInBrowser.I;

  type TracingStartedInPage = 
    TraceEvent.TracingStartedInPage.I;

  type TrackerValidation = 
    TraceEvent.TrackerValidation.b |
    TraceEvent.TrackerValidation.e;

  type TransfersBytesPendingOnDisk = 
    TraceEvent.TransfersBytesPendingOnDisk.C;

  type TransfersPendingOnDisk = 
    TraceEvent.TransfersPendingOnDisk.C;

  type TRANSPORT_CONNECT_JOB_CONNECT = 
    TraceEvent.TRANSPORT_CONNECT_JOB_CONNECT.b |
    TraceEvent.TRANSPORT_CONNECT_JOB_CONNECT.e;

  type TRIAL_CERT_VERIFIER_JOB_COMPARISON_STARTED = 
    TraceEvent.TRIAL_CERT_VERIFIER_JOB_COMPARISON_STARTED.n;

  type TRIAL_CERT_VERIFIER_JOB = 
    TraceEvent.TRIAL_CERT_VERIFIER_JOB.b |
    TraceEvent.TRIAL_CERT_VERIFIER_JOB.e;

  type UDP_BYTES_RECEIVED = 
    TraceEvent.UDP_BYTES_RECEIVED.n;

  type UDP_BYTES_SENT = 
    TraceEvent.UDP_BYTES_SENT.n;

  type UDP_CONNECT = 
    TraceEvent.UDP_CONNECT.b |
    TraceEvent.UDP_CONNECT.e;

  type UDP_LOCAL_ADDRESS = 
    TraceEvent.UDP_LOCAL_ADDRESS.n;

  type Ui_preconnection_tq = 
    TraceEvent.Ui_preconnection_tq.X;

  type Ui_thread_tq = 
    TraceEvent.Ui_thread_tq.X;

  type Ui_user_blocking_tq = 
    TraceEvent.Ui_user_blocking_tq.X;

  type UnfreezableFrameMsg_Unload = 
    TraceEvent.UnfreezableFrameMsg_Unload.X;

  type Unknowninterface = 
    TraceEvent.Unknowninterface.X;

  type UnloadEventEnd = 
    TraceEvent.UnloadEventEnd.R;

  type UnloadEventStart = 
    TraceEvent.UnloadEventStart.R;

  type UpdateCounters = 
    TraceEvent.UpdateCounters.I;

  type UpdateLayer = 
    TraceEvent.UpdateLayer.B |
    TraceEvent.UpdateLayer.E |
    TraceEvent.UpdateLayer.I |
    TraceEvent.UpdateLayer.X;

  type UpdateLayerTree = 
    TraceEvent.UpdateLayerTree.X;

  type UpdateLayoutTree = 
    TraceEvent.UpdateLayoutTree.B |
    TraceEvent.UpdateLayoutTree.E |
    TraceEvent.UpdateLayoutTree.X;

  type UpdateStateFromAnimationDrivers = 
    TraceEvent.UpdateStateFromAnimationDrivers.X;

  type UPLOAD_DATA_STREAM_INIT = 
    TraceEvent.UPLOAD_DATA_STREAM_INIT.b |
    TraceEvent.UPLOAD_DATA_STREAM_INIT.e;

  type UPLOAD_DATA_STREAM_READ = 
    TraceEvent.UPLOAD_DATA_STREAM_READ.b |
    TraceEvent.UPLOAD_DATA_STREAM_READ.e;

  type URL_REQUEST_DELEGATE_RECEIVED_REDIRECT = 
    TraceEvent.URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.b |
    TraceEvent.URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.e;

  type URL_REQUEST_DELEGATE_RESPONSE_STARTED = 
    TraceEvent.URL_REQUEST_DELEGATE_RESPONSE_STARTED.b |
    TraceEvent.URL_REQUEST_DELEGATE_RESPONSE_STARTED.e;

  type URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED = 
    TraceEvent.URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED.n;

  type URL_REQUEST_FILTERS_SET = 
    TraceEvent.URL_REQUEST_FILTERS_SET.n;

  type URL_REQUEST_JOB_BYTES_READ = 
    TraceEvent.URL_REQUEST_JOB_BYTES_READ.n;

  type URL_REQUEST_JOB_FILTERED_BYTES_READ = 
    TraceEvent.URL_REQUEST_JOB_FILTERED_BYTES_READ.n;

  type URL_REQUEST_REDIRECT_JOB = 
    TraceEvent.URL_REQUEST_REDIRECT_JOB.n;

  type URL_REQUEST_REDIRECTED = 
    TraceEvent.URL_REQUEST_REDIRECTED.n;

  type URL_REQUEST_SET_PRIORITY = 
    TraceEvent.URL_REQUEST_SET_PRIORITY.n;

  type URL_REQUEST_START_JOB = 
    TraceEvent.URL_REQUEST_START_JOB.b |
    TraceEvent.URL_REQUEST_START_JOB.e;

  type UserEvent = 
    TraceEvent.UserEvent.I;

  type Usingallowed_touch_action = 
    TraceEvent.Usingallowed_touch_action.I;

  type Usingexistingdeadline = 
    TraceEvent.Usingexistingdeadline.I;

  type Usingnewdeadline = 
    TraceEvent.Usingnewdeadline.X;

  type V8_tq = 
    TraceEvent.V8_tq.X;

  type Viewport = 
    TraceEvent.Viewport.I;

  type VisuallyComplete100 = 
    TraceEvent.VisuallyComplete100.b |
    TraceEvent.VisuallyComplete100.e;

  type WaitingfornextBeginFrame = 
    TraceEvent.WaitingfornextBeginFrame.I;

  type WaitingForRendererResponse = 
    TraceEvent.WaitingForRendererResponse.b |
    TraceEvent.WaitingForRendererResponse.e;

  type WebContentsImplLoading = 
    TraceEvent.WebContentsImplLoading.F |
    TraceEvent.WebContentsImplLoading.S;

  type WidgetHostMsg_Close_ACK = 
    TraceEvent.WidgetHostMsg_Close_ACK.X;

  type WillFailRequest = 
    TraceEvent.WillFailRequest.b |
    TraceEvent.WillFailRequest.e;

  type WillProcessResponse = 
    TraceEvent.WillProcessResponse.b |
    TraceEvent.WillProcessResponse.e;

  type WillStartRequest = 
    TraceEvent.WillStartRequest.b |
    TraceEvent.WillStartRequest.e;

  type Worker_pausable_tq = 
    TraceEvent.Worker_pausable_tq.X;

  type Worker_thread_internal_tq = 
    TraceEvent.Worker_thread_internal_tq.X;

  type Worker_throttleable_tq = 
    TraceEvent.Worker_throttleable_tq.X;

  type WorkerThreadactive = 
    TraceEvent.WorkerThreadactive.B |
    TraceEvent.WorkerThreadactive.X;

  type WorkerThreadborn = 
    TraceEvent.WorkerThreadborn.I;

  type WorkerThreaddead = 
    TraceEvent.WorkerThreaddead.I;

  type XHRLoad = 
    TraceEvent.XHRLoad.X;

  type XHRReadyStateChange = 
    TraceEvent.XHRReadyStateChange.X;

  type YieldParserForScriptLoad = 
    TraceEvent.YieldParserForScriptLoad.f |
    TraceEvent.YieldParserForScriptLoad.s |
    TraceEvent.YieldParserForScriptLoad.X;

  type YieldParserForScriptLoadAndBlockingResources = 
    TraceEvent.YieldParserForScriptLoadAndBlockingResources.f |
    TraceEvent.YieldParserForScriptLoadAndBlockingResources.s |
    TraceEvent.YieldParserForScriptLoadAndBlockingResources.X;

  type ZonesAndDomReady = 
    TraceEvent.ZonesAndDomReady.R;

  type ZonesReady = 
    TraceEvent.ZonesReady.R;

  namespace A {
    interface F extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'a';
      // Denotes the ending of the async event A.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'a';
      // Denotes the beginning of the async event A.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ActivateLayerTree {
    interface I extends TraceEvent.Base {
      args: {
        frameId: number;
        layerTreeId: number;
      };
      name: 'ActivateLayerTree';
      // Denotes an event ActivateLayerTree. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Activation {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Activation';
      // Denotes the beginning of the nestable async flow event Activation.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Activation';
      // Denotes a step into the nestable async flow event Activation.
      ph: 'e';
      scope?: string;
    }
  }

  namespace ActiveSchedulerTrackedFeature {
    interface b extends TraceEvent.Base {
      args: {
        feature: string;
      };
      id2: {
        local: string;
      };
      name: 'ActiveSchedulerTrackedFeature';
      // Denotes the beginning of the nestable async flow event ActiveSchedulerTrackedFeature.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ActiveSchedulerTrackedFeature';
      // Denotes a step into the nestable async flow event ActiveSchedulerTrackedFeature.
      ph: 'e';
      scope: string;
    }
  }

  namespace ADFUEL {
    type AdFuelDOMContentLoaded = 
      TraceEvent.ADFUEL.AdFuelDOMContentLoaded.R;
  
    type AdFuelInitialized = 
      TraceEvent.ADFUEL.AdFuelInitialized.R;
  
    type AdFuelRequestComplete = 
      TraceEvent.ADFUEL.AdFuelRequestComplete.R;
  
    type AdRenderedad_bnr_atf_01 = 
      TraceEvent.ADFUEL.AdRenderedad_bnr_atf_01.R;
  
    type AdRenderedad_bnr_btf_01 = 
      TraceEvent.ADFUEL.AdRenderedad_bnr_btf_01.R;
  
    type AdRenderedad_mod_35731bb1e = 
      TraceEvent.ADFUEL.AdRenderedad_mod_35731bb1e.R;
  
    type AdRenderedad_oop_float_01 = 
      TraceEvent.ADFUEL.AdRenderedad_oop_float_01.R;
  
    type AdRenderedad_rect_btf_02 = 
      TraceEvent.ADFUEL.AdRenderedad_rect_btf_02.R;
  
    type ApplyingPageLevelTargeting = 
      TraceEvent.ADFUEL.ApplyingPageLevelTargeting.R;
  
    type ApplyingWindowSiteLevelOptions = 
      TraceEvent.ADFUEL.ApplyingWindowSiteLevelOptions.R;
  
    type BuildingSlotad_bnr_atf_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01.e;
  
    type BuildingSlotad_bnr_atf_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01End.R;
  
    type BuildingSlotad_bnr_atf_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01Start.R;
  
    type BuildingSlotad_bnr_btf_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01.e;
  
    type BuildingSlotad_bnr_btf_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01End.R;
  
    type BuildingSlotad_bnr_btf_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01Start.R;
  
    type BuildingSlotad_bnr_btf_02 = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02.b |
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02.e;
  
    type BuildingSlotad_bnr_btf_02End = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02End.R;
  
    type BuildingSlotad_bnr_btf_02Start = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02Start.R;
  
    type BuildingSlotad_mod_35731bb1e = 
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1e.b |
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1e.e;
  
    type BuildingSlotad_mod_35731bb1eEnd = 
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1eEnd.R;
  
    type BuildingSlotad_mod_35731bb1eStart = 
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1eStart.R;
  
    type BuildingSlotad_nfs_btf_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01.e;
  
    type BuildingSlotad_nfs_btf_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01End.R;
  
    type BuildingSlotad_nfs_btf_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_nfs_btf_01Start.R;
  
    type BuildingSlotad_oop_float_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01.e;
  
    type BuildingSlotad_oop_float_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01End.R;
  
    type BuildingSlotad_oop_float_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01Start.R;
  
    type BuildingSlotad_oop_skin_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01.e;
  
    type BuildingSlotad_oop_skin_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01End.R;
  
    type BuildingSlotad_oop_skin_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01Start.R;
  
    type BuildingSlotad_rect_atf_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01.e;
  
    type BuildingSlotad_rect_atf_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01End.R;
  
    type BuildingSlotad_rect_atf_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_atf_01Start.R;
  
    type BuildingSlotad_rect_btf_02 = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02.b |
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02.e;
  
    type BuildingSlotad_rect_btf_02End = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02End.R;
  
    type BuildingSlotad_rect_btf_02Start = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02Start.R;
  
    type DelayingQueueDispatch = 
      TraceEvent.ADFUEL.DelayingQueueDispatch.R;
  
    type DispatchQueue = 
      TraceEvent.ADFUEL.DispatchQueue.b |
      TraceEvent.ADFUEL.DispatchQueue.e;
  
    type DispatchQueueEnd = 
      TraceEvent.ADFUEL.DispatchQueueEnd.R;
  
    type DispatchQueueStart = 
      TraceEvent.ADFUEL.DispatchQueueStart.R;
  
    type GPTIncluded = 
      TraceEvent.ADFUEL.GPTIncluded.R;
  
    type PageLevelGPTBuild = 
      TraceEvent.ADFUEL.PageLevelGPTBuild.b |
      TraceEvent.ADFUEL.PageLevelGPTBuild.e;
  
    type PageLevelGPTBuildEnd = 
      TraceEvent.ADFUEL.PageLevelGPTBuildEnd.R;
  
    type PageLevelGPTBuildStart = 
      TraceEvent.ADFUEL.PageLevelGPTBuildStart.R;
  
    type QueueRegistrycnn_homepage_rb = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb.b |
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb.e;
  
    type QueueRegistrycnn_homepage_rb4326300473 = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473.b |
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473.e;
  
    type QueueRegistrycnn_homepage_rb4326300473End = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473End.R;
  
    type QueueRegistrycnn_homepage_rb4326300473Start = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb4326300473Start.R;
  
    type QueueRegistrycnn_homepage_rbEnd = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rbEnd.R;
  
    type QueueRegistrycnn_homepage_rbStart = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rbStart.R;
  
    type QueueRegistrycnn_homepage = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage.b |
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage.e;
  
    type QueueRegistrycnn_homepage6643718020 = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020.b |
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020.e;
  
    type QueueRegistrycnn_homepage6643718020End = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020End.R;
  
    type QueueRegistrycnn_homepage6643718020Start = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage6643718020Start.R;
  
    type QueueRegistrycnn_homepage8364052550Start = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage8364052550Start.R;
  
    type QueueRegistrycnn_homepageEnd = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepageEnd.R;
  
    type QueueRegistrycnn_homepageStart = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepageStart.R;
  
    type SendingRequest = 
      TraceEvent.ADFUEL.SendingRequest.b |
      TraceEvent.ADFUEL.SendingRequest.e;
  
    type SendingRequestEnd = 
      TraceEvent.ADFUEL.SendingRequestEnd.R;
  
    type SendingRequestStart = 
      TraceEvent.ADFUEL.SendingRequestStart.R;
  
    type SlotLoadedad_bnr_atf_01 = 
      TraceEvent.ADFUEL.SlotLoadedad_bnr_atf_01.R;
  
    type SlotLoadedad_mod_35731bb1e = 
      TraceEvent.ADFUEL.SlotLoadedad_mod_35731bb1e.R;
  
    type SlotLoadedad_oop_float_01 = 
      TraceEvent.ADFUEL.SlotLoadedad_oop_float_01.R;
  
    type SlotLoadedad_rect_btf_02 = 
      TraceEvent.ADFUEL.SlotLoadedad_rect_btf_02.R;
  
    namespace AdFuelDOMContentLoaded {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] AdFuel DOMContentLoaded';
        // Denotes a mark of the event AdFuelDOMContentLoaded.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdFuelInitialized {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] AdFuel Initialized';
        // Denotes a mark of the event AdFuelInitialized.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdFuelRequestComplete {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] AdFuel Request Complete';
        // Denotes a mark of the event AdFuelRequestComplete.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdFuelwindow {
      type Load = 
        TraceEvent.ADFUEL.AdFuelwindow.Load.R;
    
      namespace Load {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime?: number;
            };
          };
          name: '[ADFUEL] AdFuel window.load';
          // Denotes a mark of the event Load.
          ph: 'R';
          s?: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace AdRenderedad_bnr_atf_01 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_bnr_atf_01]';
        // Denotes a mark of the event AdRenderedad_bnr_atf_01.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_bnr_btf_01 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_bnr_btf_01]';
        // Denotes a mark of the event AdRenderedad_bnr_btf_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_mod_35731bb1e {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_mod_35731bb1e]';
        // Denotes a mark of the event AdRenderedad_mod_35731bb1e.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_oop_float_01 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_oop_float_01]';
        // Denotes a mark of the event AdRenderedad_oop_float_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_rect_btf_02 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_rect_btf_02]';
        // Denotes a mark of the event AdRenderedad_rect_btf_02.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ApplyingPageLevelTargeting {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Applying Page-Level Targeting';
        // Denotes a mark of the event ApplyingPageLevelTargeting.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ApplyingWindowSiteLevelOptions {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Applying Window Site-Level Options.';
        // Denotes a mark of the event ApplyingWindowSiteLevelOptions.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_atf_01 {
      interface b extends TraceEvent.Base {
        args: {
          startTime?: number;
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_bnr_atf_01.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_bnr_atf_01.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace BuildingSlotad_bnr_atf_01End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01] End';
        // Denotes a mark of the event BuildingSlotad_bnr_atf_01End.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_atf_01Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01] Start';
        // Denotes a mark of the event BuildingSlotad_bnr_atf_01Start.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_01 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_bnr_btf_01.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_bnr_btf_01.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_01End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01] End';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_01Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01] Start';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_02 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_bnr_btf_02.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02]';
        // Denotes a step into the nestable async flow event BuildingSlotad_bnr_btf_02.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_02End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02] End';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_02End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_02Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02] Start';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_02Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_mod_35731bb1e {
      interface b extends TraceEvent.Base {
        args: {
          startTime?: number;
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_mod_35731bb1e.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e]';
        // Denotes a step into the nestable async flow event BuildingSlotad_mod_35731bb1e.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace BuildingSlotad_mod_35731bb1eEnd {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e] End';
        // Denotes a mark of the event BuildingSlotad_mod_35731bb1eEnd.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_mod_35731bb1eStart {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e] Start';
        // Denotes a mark of the event BuildingSlotad_mod_35731bb1eStart.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_nfs_btf_01 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_nfs_btf_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_nfs_btf_01.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_nfs_btf_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_nfs_btf_01.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace BuildingSlotad_nfs_btf_01End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_nfs_btf_01] End';
        // Denotes a mark of the event BuildingSlotad_nfs_btf_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_nfs_btf_01Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_nfs_btf_01] Start';
        // Denotes a mark of the event BuildingSlotad_nfs_btf_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_float_01 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_float_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_oop_float_01.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_float_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_oop_float_01.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace BuildingSlotad_oop_float_01End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_float_01] End';
        // Denotes a mark of the event BuildingSlotad_oop_float_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_float_01Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_float_01] Start';
        // Denotes a mark of the event BuildingSlotad_oop_float_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_skin_01 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_skin_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_oop_skin_01.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_skin_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_oop_skin_01.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace BuildingSlotad_oop_skin_01End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_skin_01] End';
        // Denotes a mark of the event BuildingSlotad_oop_skin_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_skin_01Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_skin_01] Start';
        // Denotes a mark of the event BuildingSlotad_oop_skin_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_atf_01 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_rect_atf_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_rect_atf_01.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_rect_atf_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_rect_atf_01.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace BuildingSlotad_rect_atf_01End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_rect_atf_01] End';
        // Denotes a mark of the event BuildingSlotad_rect_atf_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_atf_01Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_rect_atf_01] Start';
        // Denotes a mark of the event BuildingSlotad_rect_atf_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_btf_02 {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_rect_btf_02]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_rect_btf_02.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_rect_btf_02]';
        // Denotes a step into the nestable async flow event BuildingSlotad_rect_btf_02.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_btf_02End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_rect_btf_02] End';
        // Denotes a mark of the event BuildingSlotad_rect_btf_02End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_btf_02Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_rect_btf_02] Start';
        // Denotes a mark of the event BuildingSlotad_rect_btf_02Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DelayingQueueDispatch {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: '[ADFUEL] Delaying Queue Dispatch';
        // Denotes a mark of the event DelayingQueueDispatch.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchQueue {
      interface b extends TraceEvent.Base {
        args: {
          startTime?: number;
        };
        id: string;
        name: '[ADFUEL] Dispatch Queue';
        // Denotes the beginning of the nestable async flow event DispatchQueue.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Dispatch Queue';
        // Denotes a step into the nestable async flow event DispatchQueue.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace DispatchQueueEnd {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Dispatch Queue End';
        // Denotes a mark of the event DispatchQueueEnd.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchQueueStart {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Dispatch Queue Start';
        // Denotes a mark of the event DispatchQueueStart.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GPTIncluded {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] GPT Included';
        // Denotes a mark of the event GPTIncluded.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageLevelGPTBuild {
      interface b extends TraceEvent.Base {
        args: {
          startTime?: number;
        };
        id: string;
        name: '[ADFUEL] Page-Level GPT Build';
        // Denotes the beginning of the nestable async flow event PageLevelGPTBuild.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Page-Level GPT Build';
        // Denotes a step into the nestable async flow event PageLevelGPTBuild.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace PageLevelGPTBuildEnd {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Page-Level GPT Build End';
        // Denotes a mark of the event PageLevelGPTBuildEnd.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageLevelGPTBuildStart {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Page-Level GPT Build Start';
        // Denotes a mark of the event PageLevelGPTBuildStart.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rb {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb]';
        // Denotes the beginning of the nestable async flow event QueueRegistrycnn_homepage_rb.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb]';
        // Denotes a step into the nestable async flow event QueueRegistrycnn_homepage_rb.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rb4326300473 {
      interface b extends TraceEvent.Base {
        args: {
          startTime: number;
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb - 4326300473]';
        // Denotes the beginning of the nestable async flow event QueueRegistrycnn_homepage_rb4326300473.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb - 4326300473]';
        // Denotes a step into the nestable async flow event QueueRegistrycnn_homepage_rb4326300473.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rb4326300473End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb - 4326300473] End';
        // Denotes a mark of the event QueueRegistrycnn_homepage_rb4326300473End.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rb4326300473Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb - 4326300473] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepage_rb4326300473Start.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rbEnd {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb] End';
        // Denotes a mark of the event QueueRegistrycnn_homepage_rbEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rbStart {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepage_rbStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage]';
        // Denotes the beginning of the nestable async flow event QueueRegistrycnn_homepage.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage]';
        // Denotes a step into the nestable async flow event QueueRegistrycnn_homepage.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage6643718020 {
      interface b extends TraceEvent.Base {
        args: {
          startTime: number;
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage - 6643718020]';
        // Denotes the beginning of the nestable async flow event QueueRegistrycnn_homepage6643718020.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage - 6643718020]';
        // Denotes a step into the nestable async flow event QueueRegistrycnn_homepage6643718020.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace QueueRegistrycnn_homepage6643718020End {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage - 6643718020] End';
        // Denotes a mark of the event QueueRegistrycnn_homepage6643718020End.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage6643718020Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage - 6643718020] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepage6643718020Start.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage8364052550Start {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage - 8364052550] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepage8364052550Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepageEnd {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage] End';
        // Denotes a mark of the event QueueRegistrycnn_homepageEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepageStart {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepageStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RegisteringModule {
      type Admiralv1_0_1 = 
        TraceEvent.ADFUEL.RegisteringModule.Admiralv1_0_1.R;
    
      type AmazonA9Modulev3_2_5 = 
        TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev3_2_5.R;
    
      type AmazonA9Modulev4_0_18 = 
        TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev4_0_18.R;
    
      type AmazonA9Modulev4_0_23 = 
        TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev4_0_23.R;
    
      type BlockthroughModulev4_0_1 = 
        TraceEvent.ADFUEL.RegisteringModule.BlockthroughModulev4_0_1.R;
    
      type BlockthroughModulev4_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.BlockthroughModulev4_0_2.R;
    
      type CEPModulev3_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.CEPModulev3_0_2.R;
    
      type CEPModulev4_0_3 = 
        TraceEvent.ADFUEL.RegisteringModule.CEPModulev4_0_3.R;
    
      type CEPModulev4_0_4 = 
        TraceEvent.ADFUEL.RegisteringModule.CEPModulev4_0_4.R;
    
      type CreativeReviewModulev3_0_5 = 
        TraceEvent.ADFUEL.RegisteringModule.CreativeReviewModulev3_0_5.R;
    
      type CreativeReviewModulev4_0_1 = 
        TraceEvent.ADFUEL.RegisteringModule.CreativeReviewModulev4_0_1.R;
    
      type CriteoModulev3_2_2 = 
        TraceEvent.ADFUEL.RegisteringModule.CriteoModulev3_2_2.R;
    
      type FreewheelProgrammatic1_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.FreewheelProgrammatic1_0_2.R;
    
      type IndexExchangeIdentity1_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.IndexExchangeIdentity1_1_1.R;
    
      type IndexExchangeWrapperModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.IndexExchangeWrapperModulev3_1_1.R;
    
      type IntegralAdScienceModulev4_0_4 = 
        TraceEvent.ADFUEL.RegisteringModule.IntegralAdScienceModulev4_0_4.R;
    
      type IntegralAdScienceModulev4_0_6 = 
        TraceEvent.ADFUEL.RegisteringModule.IntegralAdScienceModulev4_0_6.R;
    
      type InViewRefreshv3_0_5 = 
        TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv3_0_5.R;
    
      type InViewRefreshv4_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv4_0_2.R;
    
      type InViewRefreshv4_0_6 = 
        TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv4_0_6.R;
    
      type KruxModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.KruxModulev3_1_1.R;
    
      type KruxModulev4_1_2 = 
        TraceEvent.ADFUEL.RegisteringModule.KruxModulev4_1_2.R;
    
      type KruxModulev4_1_5 = 
        TraceEvent.ADFUEL.RegisteringModule.KruxModulev4_1_5.R;
    
      type MalvertisingDetectionv4_0_5 = 
        TraceEvent.ADFUEL.RegisteringModule.MalvertisingDetectionv4_0_5.R;
    
      type MalvertisingDetectionv4_0_6 = 
        TraceEvent.ADFUEL.RegisteringModule.MalvertisingDetectionv4_0_6.R;
    
      type PrebidModulev3_3_0 = 
        TraceEvent.ADFUEL.RegisteringModule.PrebidModulev3_3_0.R;
    
      type PrebidModulev4_0_26 = 
        TraceEvent.ADFUEL.RegisteringModule.PrebidModulev4_0_26.R;
    
      type PrebidModulev4_0_46 = 
        TraceEvent.ADFUEL.RegisteringModule.PrebidModulev4_0_46.R;
    
      type ProximicModulev3_1_2 = 
        TraceEvent.ADFUEL.RegisteringModule.ProximicModulev3_1_2.R;
    
      type ProximicModulev4_0_4 = 
        TraceEvent.ADFUEL.RegisteringModule.ProximicModulev4_0_4.R;
    
      type ProximicModulev4_0_5 = 
        TraceEvent.ADFUEL.RegisteringModule.ProximicModulev4_0_5.R;
    
      type SSAIModulev4_0_12 = 
        TraceEvent.ADFUEL.RegisteringModule.SSAIModulev4_0_12.R;
    
      type TransactionIDModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev3_1_1.R;
    
      type TransactionIDModulev4_0_1 = 
        TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev4_0_1.R;
    
      type TransactionIDModulev4_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev4_0_2.R;
    
      type TurnerGUIDModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.TurnerGUIDModulev3_1_1.R;
    
      type TurnerGUIDModulev4_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.TurnerGUIDModulev4_0_2.R;
    
      type WarnerMediaIdentityModulev4_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.WarnerMediaIdentityModulev4_0_2.R;
    
      type WarnerMediaSegments4_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.WarnerMediaSegments4_0_2.R;
    
      namespace Admiralv1_0_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Admiral v1.0.1';
          // Denotes a mark of the event Admiralv1_0_1.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AmazonA9Modulev3_2_5 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Amazon A9 Module v3.2.5';
          // Denotes a mark of the event AmazonA9Modulev3_2_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AmazonA9Modulev4_0_18 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Amazon A9 Module v4.0.18';
          // Denotes a mark of the event AmazonA9Modulev4_0_18.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AmazonA9Modulev4_0_23 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Amazon A9 Module v4.0.23';
          // Denotes a mark of the event AmazonA9Modulev4_0_23.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace BlockthroughModulev4_0_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Blockthrough Module v4.0.1';
          // Denotes a mark of the event BlockthroughModulev4_0_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace BlockthroughModulev4_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Blockthrough Module v4.0.2';
          // Denotes a mark of the event BlockthroughModulev4_0_2.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CEPModulev3_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: CEP Module v3.0.2';
          // Denotes a mark of the event CEPModulev3_0_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CEPModulev4_0_3 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: CEP Module v4.0.3';
          // Denotes a mark of the event CEPModulev4_0_3.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CEPModulev4_0_4 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: CEP Module v4.0.4';
          // Denotes a mark of the event CEPModulev4_0_4.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CreativeReviewModulev3_0_5 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Creative Review Module v3.0.5';
          // Denotes a mark of the event CreativeReviewModulev3_0_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CreativeReviewModulev4_0_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Creative Review Module v4.0.1';
          // Denotes a mark of the event CreativeReviewModulev4_0_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CriteoModulev3_2_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Criteo Module v3.2.2';
          // Denotes a mark of the event CriteoModulev3_2_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FreewheelProgrammatic1_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Freewheel Programmatic 1.0.2';
          // Denotes a mark of the event FreewheelProgrammatic1_0_2.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace IndexExchangeIdentity1_1_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime?: number;
            };
          };
          name: '[ADFUEL] Registering Module: Index Exchange Identity 1.1.1';
          // Denotes a mark of the event IndexExchangeIdentity1_1_1.
          ph: 'R';
          s?: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace IndexExchangeWrapperModulev3_1_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: IndexExchange Wrapper Module v3.1.1';
          // Denotes a mark of the event IndexExchangeWrapperModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace IntegralAdScienceModulev4_0_4 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Integral Ad Science Module v4.0.4';
          // Denotes a mark of the event IntegralAdScienceModulev4_0_4.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace IntegralAdScienceModulev4_0_6 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Integral Ad Science Module v4.0.6';
          // Denotes a mark of the event IntegralAdScienceModulev4_0_6.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace InViewRefreshv3_0_5 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: In View Refresh v3.0.5';
          // Denotes a mark of the event InViewRefreshv3_0_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace InViewRefreshv4_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: In View Refresh v4.0.2';
          // Denotes a mark of the event InViewRefreshv4_0_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace InViewRefreshv4_0_6 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: In View Refresh v4.0.6';
          // Denotes a mark of the event InViewRefreshv4_0_6.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace KruxModulev3_1_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Krux Module v3.1.1';
          // Denotes a mark of the event KruxModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace KruxModulev4_1_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Krux Module v4.1.2';
          // Denotes a mark of the event KruxModulev4_1_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace KruxModulev4_1_5 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Krux Module v4.1.5';
          // Denotes a mark of the event KruxModulev4_1_5.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace MalvertisingDetectionv4_0_5 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Malvertising Detection v4.0.5';
          // Denotes a mark of the event MalvertisingDetectionv4_0_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace MalvertisingDetectionv4_0_6 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Malvertising Detection v4.0.6';
          // Denotes a mark of the event MalvertisingDetectionv4_0_6.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PrebidModulev3_3_0 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Prebid Module v3.3.0';
          // Denotes a mark of the event PrebidModulev3_3_0.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PrebidModulev4_0_26 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Prebid Module v4.0.26';
          // Denotes a mark of the event PrebidModulev4_0_26.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PrebidModulev4_0_46 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Prebid Module v4.0.46';
          // Denotes a mark of the event PrebidModulev4_0_46.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProximicModulev3_1_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Proximic Module v3.1.2';
          // Denotes a mark of the event ProximicModulev3_1_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProximicModulev4_0_4 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Proximic Module v4.0.4';
          // Denotes a mark of the event ProximicModulev4_0_4.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProximicModulev4_0_5 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Proximic Module v4.0.5';
          // Denotes a mark of the event ProximicModulev4_0_5.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SourcepointAddon {
        type AdBlockingv4_0_1 = 
          TraceEvent.ADFUEL.RegisteringModule.SourcepointAddon.AdBlockingv4_0_1.R;
      
        type AdBlockingv4_0_2 = 
          TraceEvent.ADFUEL.RegisteringModule.SourcepointAddon.AdBlockingv4_0_2.R;
      
        namespace AdBlockingv4_0_1 {
          interface R extends TraceEvent.Base {
            args: {
              data: {
                navigationId: string;
              };
            };
            name: '[ADFUEL] Registering Module: Sourcepoint Add-on: Ad Blocking v4.0.1';
            // Denotes a mark of the event AdBlockingv4_0_1.
            ph: 'R';
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      
        namespace AdBlockingv4_0_2 {
          interface R extends TraceEvent.Base {
            args: {
              data: {
                navigationId: string;
                startTime: number;
              };
            };
            name: '[ADFUEL] Registering Module: Sourcepoint Add-on: Ad Blocking v4.0.2';
            // Denotes a mark of the event AdBlockingv4_0_2.
            ph: 'R';
            s: string;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    
      namespace SSAIModulev4_0_12 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: SSAI Module v4.0.12';
          // Denotes a mark of the event SSAIModulev4_0_12.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TransactionIDModulev3_1_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Transaction ID Module v3.1.1';
          // Denotes a mark of the event TransactionIDModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TransactionIDModulev4_0_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Transaction ID Module v4.0.1';
          // Denotes a mark of the event TransactionIDModulev4_0_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TransactionIDModulev4_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Transaction ID Module v4.0.2';
          // Denotes a mark of the event TransactionIDModulev4_0_2.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TurnerGUIDModulev3_1_1 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Turner GUID Module v3.1.1';
          // Denotes a mark of the event TurnerGUIDModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TurnerGUIDModulev4_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: Turner GUID Module v4.0.2';
          // Denotes a mark of the event TurnerGUIDModulev4_0_2.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WarnerMediaIdentityModulev4_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: WarnerMedia Identity Module v4.0.2';
          // Denotes a mark of the event WarnerMediaIdentityModulev4_0_2.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WarnerMediaSegments4_0_2 {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              navigationId: string;
              startTime: number;
            };
          };
          name: '[ADFUEL] Registering Module: WarnerMedia Segments 4.0.2';
          // Denotes a mark of the event WarnerMediaSegments4_0_2.
          ph: 'R';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace RegistryLoadcdn {
      namespace Cnn {
        namespace Comadscnncnn_homepage {
          type Json = 
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.Json.b |
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.Json.e;
        
          type JsonEnd = 
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonEnd.R;
        
          type JsonStart = 
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonStart.R;
        
          namespace Json {
            interface b extends TraceEvent.Base {
              args: {
                startTime?: number;
              };
              id: string;
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json]';
              // Denotes the beginning of the nestable async flow event Json.
              ph: 'b';
              scope?: string;
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts?: number;
            }
          
            interface e extends TraceEvent.Base {
              args: {
              
              };
              id: string;
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json]';
              // Denotes a step into the nestable async flow event Json.
              ph: 'e';
              scope?: string;
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts?: number;
            }
          }
        
          namespace JsonEnd {
            interface R extends TraceEvent.Base {
              args: {
                data: {
                  navigationId: string;
                  startTime?: number;
                };
              };
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json] End';
              // Denotes a mark of the event JsonEnd.
              ph: 'R';
              s?: string;
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts: number;
            }
          }
        
          namespace JsonStart {
            interface R extends TraceEvent.Base {
              args: {
                data: {
                  navigationId: string;
                  startTime?: number;
                };
              };
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json] Start';
              // Denotes a mark of the event JsonStart.
              ph: 'R';
              s?: string;
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts: number;
            }
          }
        }
      }
    }
  
    namespace SendingRequest {
      interface b extends TraceEvent.Base {
        args: {
          startTime?: number;
        };
        id: string;
        name: '[ADFUEL] Sending Request';
        // Denotes the beginning of the nestable async flow event SendingRequest.
        ph: 'b';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Sending Request';
        // Denotes a step into the nestable async flow event SendingRequest.
        ph: 'e';
        scope?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts?: number;
      }
    }
  
    namespace SendingRequestEnd {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Sending Request End';
        // Denotes a mark of the event SendingRequestEnd.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendingRequestStart {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: '[ADFUEL] Sending Request Start';
        // Denotes a mark of the event SendingRequestStart.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_bnr_atf_01 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_bnr_atf_01]';
        // Denotes a mark of the event SlotLoadedad_bnr_atf_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_mod_35731bb1e {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_mod_35731bb1e]';
        // Denotes a mark of the event SlotLoadedad_mod_35731bb1e.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_oop_float_01 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_oop_float_01]';
        // Denotes a mark of the event SlotLoadedad_oop_float_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_rect_btf_02 {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_rect_btf_02]';
        // Denotes a mark of the event SlotLoadedad_rect_btf_02.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Allactivesurfacesready {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'All active surfaces ready';
      // Denotes an event Allactivesurfacesready. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Animation {
    interface b extends TraceEvent.Base {
      args: {
        data: {
          id: string;
          name: string;
          nodeId: number;
          nodeName: string;
          state: string;
        };
        endData?: {
          state: string;
        };
      };
      id?: string;
      id2?: {
        local: string;
      };
      name: 'Animation';
      // Denotes the beginning of the nestable async flow event Animation.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
        endData?: {
          state: string;
        };
      };
      id?: string;
      id2?: {
        local: string;
      };
      name: 'Animation';
      // Denotes a step into the nestable async flow event Animation.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface n extends TraceEvent.Base {
      args: {
        data: {
          compositeFailed?: number;
          state?: string;
          unsupportedProperties?: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
          }[];
        };
      };
      id?: string;
      id2?: {
        local: string;
      };
      name: 'Animation';
      // Denotes the ending of the nestable async flow event Animation.
      ph: 'n';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace AnimationHost {
    type ActivateAnimations = 
      TraceEvent.AnimationHost.ActivateAnimations.X;
  
    type TickAnimations = 
      TraceEvent.AnimationHost.TickAnimations.X;
  
    type UpdateAnimationState = 
      TraceEvent.AnimationHost.UpdateAnimationState.X;
  
    namespace ActivateAnimations {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationHost::ActivateAnimations';
        // Denotes the end of the event ActivateAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TickAnimations {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationHost::TickAnimations';
        // Denotes the end of the event TickAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateAnimationState {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationHost::UpdateAnimationState';
        // Denotes the end of the event UpdateAnimationState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace AnimationTimeline {
    type ServiceAnimations = 
      TraceEvent.AnimationTimeline.ServiceAnimations.X;
  
    namespace ServiceAnimations {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationTimeline::serviceAnimations';
        // Denotes the end of the event ServiceAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace AsyncSwapBuffers {
    interface F extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'AsyncSwapBuffers';
      // Denotes the ending of the async event AsyncSwapBuffers.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'AsyncSwapBuffers';
      // Denotes the beginning of the async event AsyncSwapBuffers.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AutocompleteController {
    type Start = 
      TraceEvent.AutocompleteController.Start.X;
  
    type UpdateResult = 
      TraceEvent.AutocompleteController.UpdateResult.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
          text: string;
        };
        // Duration.
        dur: number;
        name: 'AutocompleteController::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateResult {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AutocompleteController::UpdateResult';
        // Denotes the end of the event UpdateResult.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Autofill {
    namespace Mojom {
      type AutofillAgent = 
        TraceEvent.Autofill.Mojom.AutofillAgent.X;
    
      type AutofillDriver = 
        TraceEvent.Autofill.Mojom.AutofillDriver.X;
    
      type PasswordAutofillAgent = 
        TraceEvent.Autofill.Mojom.PasswordAutofillAgent.X;
    
      type PasswordManagerDriver = 
        TraceEvent.Autofill.Mojom.PasswordManagerDriver.X;
    
      namespace AutofillAgent {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'autofill.mojom.AutofillAgent';
          // Denotes the end of the event AutofillAgent.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AutofillDriver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'autofill.mojom.AutofillDriver';
          // Denotes the end of the event AutofillDriver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PasswordAutofillAgent {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'autofill.mojom.PasswordAutofillAgent';
          // Denotes the end of the event PasswordAutofillAgent.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PasswordManagerDriver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'autofill.mojom.PasswordManagerDriver';
          // Denotes the end of the event PasswordManagerDriver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace BackendImpl {
    type CreateEntryImpl = 
      TraceEvent.BackendImpl.CreateEntryImpl.X;
  
    type MatchEntry = 
      TraceEvent.BackendImpl.MatchEntry.X;
  
    type OpenEntryImpl = 
      TraceEvent.BackendImpl.OpenEntryImpl.X;
  
    namespace CreateEntryImpl {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackendImpl::CreateEntryImpl';
        // Denotes the end of the event CreateEntryImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MatchEntry {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackendImpl::MatchEntry';
        // Denotes the end of the event MatchEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OpenEntryImpl {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackendImpl::OpenEntryImpl';
        // Denotes the end of the event OpenEntryImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BackForwardCache_MaybeStorePage {
    interface X extends TraceEvent.Base {
      args: {
        can_store: string;
      };
      // Duration.
      dur: number;
      name: 'BackForwardCache_MaybeStorePage';
      // Denotes the end of the event BackForwardCache_MaybeStorePage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BackForwardCacheBufferLimitTracker {
    type DidRemoveFrameOrWorkerFromBackForwardCache = 
      TraceEvent.BackForwardCacheBufferLimitTracker.DidRemoveFrameOrWorkerFromBackForwardCache.X;
  
    namespace DidRemoveFrameOrWorkerFromBackForwardCache {
      interface X extends TraceEvent.Base {
        args: {
          substracted_bytes: number;
          total_bytes_buffered: number;
        };
        // Duration.
        dur: number;
        name: 'BackForwardCacheBufferLimitTracker::DidRemoveFrameOrWorkerFromBackForwardCache';
        // Denotes the end of the event DidRemoveFrameOrWorkerFromBackForwardCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BackgroundHTMLParser {
    type AppendRawBytesFromMainThread = 
      TraceEvent.BackgroundHTMLParser.AppendRawBytesFromMainThread.X;
  
    type Init = 
      TraceEvent.BackgroundHTMLParser.Init.X;
  
    type PumpTokenizer = 
      TraceEvent.BackgroundHTMLParser.PumpTokenizer.X;
  
    type SendTokensToMainThread = 
      TraceEvent.BackgroundHTMLParser.SendTokensToMainThread.f |
      TraceEvent.BackgroundHTMLParser.SendTokensToMainThread.s |
      TraceEvent.BackgroundHTMLParser.SendTokensToMainThread.X;
  
    namespace AppendRawBytesFromMainThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackgroundHTMLParser::AppendRawBytesFromMainThread';
        // Denotes the end of the event AppendRawBytesFromMainThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Init {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'BackgroundHTMLParser::Init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PumpTokenizer {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackgroundHTMLParser::pumpTokenizer';
        // Denotes the end of the event PumpTokenizer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendTokensToMainThread {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'BackgroundHTMLParser::sendTokensToMainThread';
        // Denotes the ending of the async flow event SendTokensToMainThread.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'BackgroundHTMLParser::sendTokensToMainThread';
        // Denotes the beginning of the async flow event SendTokensToMainThread.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackgroundHTMLParser::sendTokensToMainThread';
        // Denotes the end of the event SendTokensToMainThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BeginFrame {
    interface I extends TraceEvent.Base {
      args: {
        frameSeqId: number;
        layerTreeId: number;
      };
      name: 'BeginFrame';
      // Denotes an event BeginFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace BeginImplFrameToSendBeginMainFrame {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'BeginImplFrameToSendBeginMainFrame';
      // Denotes the beginning of the nestable async flow event BeginImplFrameToSendBeginMainFrame.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'BeginImplFrameToSendBeginMainFrame';
      // Denotes a step into the nestable async flow event BeginImplFrameToSendBeginMainFrame.
      ph: 'e';
      scope?: string;
    }
  }

  namespace BeginMainThreadFrame {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frameId: number;
        };
        layerTreeId: number;
      };
      name: 'BeginMainThreadFrame';
      // Denotes an event BeginMainThreadFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BeginNavigation {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'BeginNavigation';
      // Denotes the beginning of the nestable async flow event BeginNavigation.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'BeginNavigation';
      // Denotes a step into the nestable async flow event BeginNavigation.
      ph: 'e';
      scope: string;
    }
  }

  namespace BenchmarkInstrumentation {
    type DisplayRenderingStats = 
      TraceEvent.BenchmarkInstrumentation.DisplayRenderingStats.I;
  
    type ImplThreadRenderingStats = 
      TraceEvent.BenchmarkInstrumentation.ImplThreadRenderingStats.I;
  
    namespace DisplayRenderingStats {
      interface I extends TraceEvent.Base {
        args: {
          data: {
            frame_count: number;
          };
        };
        name: 'BenchmarkInstrumentation::DisplayRenderingStats';
        // Denotes an event DisplayRenderingStats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ImplThreadRenderingStats {
      interface I extends TraceEvent.Base {
        args: {
          data: {
            approximated_visible_content_area: number;
            checkerboarded_needs_raster_content_area: number;
            checkerboarded_no_recording_content_area: number;
            checkerboarded_visible_content_area: number;
            frame_count: number;
            visible_content_area: number;
          };
        };
        name: 'BenchmarkInstrumentation::ImplThreadRenderingStats';
        // Denotes an event ImplThreadRenderingStats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BitmapImage {
    type DataChanged = 
      TraceEvent.BitmapImage.DataChanged.X;
  
    type Draw = 
      TraceEvent.BitmapImage.Draw.X;
  
    namespace DataChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BitmapImage::dataChanged';
        // Denotes the end of the event DataChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Draw {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BitmapImage::draw';
        // Denotes the end of the event Draw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Blankframe {
    type NooverlaysorCALayers = 
      TraceEvent.Blankframe.NooverlaysorCALayers.X;
  
    namespace NooverlaysorCALayers {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Blank frame: No overlays or CALayers';
        // Denotes the end of the event NooverlaysorCALayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Blink {
    namespace Mojom {
      type AgentMetricsCollectorHost = 
        TraceEvent.Blink.Mojom.AgentMetricsCollectorHost.X;
    
      type AppCacheBackend = 
        TraceEvent.Blink.Mojom.AppCacheBackend.X;
    
      type AppCacheFrontend = 
        TraceEvent.Blink.Mojom.AppCacheFrontend.X;
    
      type AppCacheHost = 
        TraceEvent.Blink.Mojom.AppCacheHost.X;
    
      type AssociatedInterfaceProvider = 
        TraceEvent.Blink.Mojom.AssociatedInterfaceProvider.X;
    
      type AutoplayConfigurationClient = 
        TraceEvent.Blink.Mojom.AutoplayConfigurationClient.X;
    
      type Blob = 
        TraceEvent.Blink.Mojom.Blob.X;
    
      type BlobReaderClient = 
        TraceEvent.Blink.Mojom.BlobReaderClient.X;
    
      type BlobRegistry = 
        TraceEvent.Blink.Mojom.BlobRegistry.X;
    
      type BrowserInterfaceBroker = 
        TraceEvent.Blink.Mojom.BrowserInterfaceBroker.X;
    
      type CodeCacheHost = 
        TraceEvent.Blink.Mojom.CodeCacheHost.X;
    
      type ContentSecurityNotifier = 
        TraceEvent.Blink.Mojom.ContentSecurityNotifier.X;
    
      type ControllerServiceWorker = 
        TraceEvent.Blink.Mojom.ControllerServiceWorker.X;
    
      type DiskAllocator = 
        TraceEvent.Blink.Mojom.DiskAllocator.X;
    
      type DomStorage = 
        TraceEvent.Blink.Mojom.DomStorage.X;
    
      type DomStorageProvider = 
        TraceEvent.Blink.Mojom.DomStorageProvider.X;
    
      type FileSystemManager = 
        TraceEvent.Blink.Mojom.FileSystemManager.X;
    
      type FrameWidget = 
        TraceEvent.Blink.Mojom.FrameWidget.X;
    
      type FrameWidgetHost = 
        TraceEvent.Blink.Mojom.FrameWidgetHost.X;
    
      type HighPriorityLocalFrame = 
        TraceEvent.Blink.Mojom.HighPriorityLocalFrame.X;
    
      type LocalFrame = 
        TraceEvent.Blink.Mojom.LocalFrame.X;
    
      type LocalFrameHost = 
        TraceEvent.Blink.Mojom.LocalFrameHost.X;
    
      type LocalMainFrameHost = 
        TraceEvent.Blink.Mojom.LocalMainFrameHost.X;
    
      type ManifestManager = 
        TraceEvent.Blink.Mojom.ManifestManager.X;
    
      type PageBroadcast = 
        TraceEvent.Blink.Mojom.PageBroadcast.X;
    
      type PeerConnectionManager = 
        TraceEvent.Blink.Mojom.PeerConnectionManager.X;
    
      type PluginRegistry = 
        TraceEvent.Blink.Mojom.PluginRegistry.X;
    
      type RemoteFrame = 
        TraceEvent.Blink.Mojom.RemoteFrame.X;
    
      type RemoteFrameHost = 
        TraceEvent.Blink.Mojom.RemoteFrameHost.X;
    
      type RemoteMainFrame = 
        TraceEvent.Blink.Mojom.RemoteMainFrame.X;
    
      type RendererAudioOutputStreamFactory = 
        TraceEvent.Blink.Mojom.RendererAudioOutputStreamFactory.X;
    
      type ReportingObserver = 
        TraceEvent.Blink.Mojom.ReportingObserver.X;
    
      type ServiceWorker = 
        TraceEvent.Blink.Mojom.ServiceWorker.X;
    
      type ServiceWorkerContainer = 
        TraceEvent.Blink.Mojom.ServiceWorkerContainer.X;
    
      type ServiceWorkerContainerHost = 
        TraceEvent.Blink.Mojom.ServiceWorkerContainerHost.X;
    
      type ServiceWorkerFetchResponseCallback = 
        TraceEvent.Blink.Mojom.ServiceWorkerFetchResponseCallback.X;
    
      type ServiceWorkerObjectHost = 
        TraceEvent.Blink.Mojom.ServiceWorkerObjectHost.X;
    
      type StorageArea = 
        TraceEvent.Blink.Mojom.StorageArea.X;
    
      type StorageAreaObserver = 
        TraceEvent.Blink.Mojom.StorageAreaObserver.X;
    
      type TextInputHost = 
        TraceEvent.Blink.Mojom.TextInputHost.X;
    
      type Widget = 
        TraceEvent.Blink.Mojom.Widget.X;
    
      type WidgetHost = 
        TraceEvent.Blink.Mojom.WidgetHost.X;
    
      type WidgetInputHandler = 
        TraceEvent.Blink.Mojom.WidgetInputHandler.X;
    
      type WidgetInputHandlerHost = 
        TraceEvent.Blink.Mojom.WidgetInputHandlerHost.X;
    
      namespace AgentMetricsCollectorHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AgentMetricsCollectorHost';
          // Denotes the end of the event AgentMetricsCollectorHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AppCacheBackend {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AppCacheBackend';
          // Denotes the end of the event AppCacheBackend.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AppCacheFrontend {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AppCacheFrontend';
          // Denotes the end of the event AppCacheFrontend.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AppCacheHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AppCacheHost';
          // Denotes the end of the event AppCacheHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AssociatedInterfaceProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AssociatedInterfaceProvider';
          // Denotes the end of the event AssociatedInterfaceProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AutoplayConfigurationClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AutoplayConfigurationClient';
          // Denotes the end of the event AutoplayConfigurationClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Blob {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.Blob';
          // Denotes the end of the event Blob.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace BlobReaderClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.BlobReaderClient';
          // Denotes the end of the event BlobReaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace BlobRegistry {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.BlobRegistry';
          // Denotes the end of the event BlobRegistry.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace BrowserInterfaceBroker {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.BrowserInterfaceBroker';
          // Denotes the end of the event BrowserInterfaceBroker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CodeCacheHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.CodeCacheHost';
          // Denotes the end of the event CodeCacheHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ContentSecurityNotifier {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ContentSecurityNotifier';
          // Denotes the end of the event ContentSecurityNotifier.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ControllerServiceWorker {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ControllerServiceWorker';
          // Denotes the end of the event ControllerServiceWorker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace DiskAllocator {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.DiskAllocator';
          // Denotes the end of the event DiskAllocator.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace DomStorage {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.DomStorage';
          // Denotes the end of the event DomStorage.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace DomStorageProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.DomStorageProvider';
          // Denotes the end of the event DomStorageProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FileSystemManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.FileSystemManager';
          // Denotes the end of the event FileSystemManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameWidget {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.FrameWidget';
          // Denotes the end of the event FrameWidget.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameWidgetHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.FrameWidgetHost';
          // Denotes the end of the event FrameWidgetHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace HighPriorityLocalFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.HighPriorityLocalFrame';
          // Denotes the end of the event HighPriorityLocalFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace LocalFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.LocalFrame';
          // Denotes the end of the event LocalFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace LocalFrameHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.LocalFrameHost';
          // Denotes the end of the event LocalFrameHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace LocalMainFrameHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.LocalMainFrameHost';
          // Denotes the end of the event LocalMainFrameHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ManifestManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ManifestManager';
          // Denotes the end of the event ManifestManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PageBroadcast {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.PageBroadcast';
          // Denotes the end of the event PageBroadcast.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PeerConnectionManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.PeerConnectionManager';
          // Denotes the end of the event PeerConnectionManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PluginRegistry {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.PluginRegistry';
          // Denotes the end of the event PluginRegistry.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RemoteFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.RemoteFrame';
          // Denotes the end of the event RemoteFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RemoteFrameHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.RemoteFrameHost';
          // Denotes the end of the event RemoteFrameHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RemoteMainFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.RemoteMainFrame';
          // Denotes the end of the event RemoteMainFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RendererAudioOutputStreamFactory {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.RendererAudioOutputStreamFactory';
          // Denotes the end of the event RendererAudioOutputStreamFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ReportingObserver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ReportingObserver';
          // Denotes the end of the event ReportingObserver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorker {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ServiceWorker';
          // Denotes the end of the event ServiceWorker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorkerContainer {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ServiceWorkerContainer';
          // Denotes the end of the event ServiceWorkerContainer.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorkerContainerHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ServiceWorkerContainerHost';
          // Denotes the end of the event ServiceWorkerContainerHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorkerFetchResponseCallback {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ServiceWorkerFetchResponseCallback';
          // Denotes the end of the event ServiceWorkerFetchResponseCallback.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorkerObjectHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ServiceWorkerObjectHost';
          // Denotes the end of the event ServiceWorkerObjectHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace StorageArea {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.StorageArea';
          // Denotes the end of the event StorageArea.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace StorageAreaObserver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.StorageAreaObserver';
          // Denotes the end of the event StorageAreaObserver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TextInputHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.TextInputHost';
          // Denotes the end of the event TextInputHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Widget {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.Widget';
          // Denotes the end of the event Widget.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WidgetHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.WidgetHost';
          // Denotes the end of the event WidgetHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WidgetInputHandler {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.WidgetInputHandler';
          // Denotes the end of the event WidgetInputHandler.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WidgetInputHandlerHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.WidgetInputHandlerHost';
          // Denotes the end of the event WidgetInputHandlerHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace BlinkGC {
    type AtomicPauseMarkEpilogue = 
      TraceEvent.BlinkGC.AtomicPauseMarkEpilogue.X;
  
    type AtomicPauseMarkPrologue = 
      TraceEvent.BlinkGC.AtomicPauseMarkPrologue.X;
  
    type AtomicPauseMarkRoots = 
      TraceEvent.BlinkGC.AtomicPauseMarkRoots.X;
  
    type AtomicPauseMarkTransitiveClosure = 
      TraceEvent.BlinkGC.AtomicPauseMarkTransitiveClosure.X;
  
    type AtomicPauseSweepAndCompact = 
      TraceEvent.BlinkGC.AtomicPauseSweepAndCompact.X;
  
    type AtomicPhase = 
      TraceEvent.BlinkGC.AtomicPhase.B |
      TraceEvent.BlinkGC.AtomicPhase.E;
  
    type CompleteSweep = 
      TraceEvent.BlinkGC.CompleteSweep.X;
  
    type ConcurrentMarkingStep = 
      TraceEvent.BlinkGC.ConcurrentMarkingStep.X;
  
    type ConcurrentSweepingStep = 
      TraceEvent.BlinkGC.ConcurrentSweepingStep.X;
  
    type IncrementalMarkingStartMarking = 
      TraceEvent.BlinkGC.IncrementalMarkingStartMarking.X;
  
    type IncrementalMarkingStep = 
      TraceEvent.BlinkGC.IncrementalMarkingStep.X;
  
    type IncrementalMarkingWithDeadline = 
      TraceEvent.BlinkGC.IncrementalMarkingWithDeadline.X;
  
    type LazySweepInIdle = 
      TraceEvent.BlinkGC.LazySweepInIdle.X;
  
    type LazySweepOnAllocation = 
      TraceEvent.BlinkGC.LazySweepOnAllocation.X;
  
    type MarkBailOutObjects = 
      TraceEvent.BlinkGC.MarkBailOutObjects.X;
  
    type MarkFlushEphemeronPairs = 
      TraceEvent.BlinkGC.MarkFlushEphemeronPairs.X;
  
    type MarkFlushV8References = 
      TraceEvent.BlinkGC.MarkFlushV8References.X;
  
    type MarkInvokeEphemeronCallbacks = 
      TraceEvent.BlinkGC.MarkInvokeEphemeronCallbacks.X;
  
    type MarkProcessMarkingWorklist = 
      TraceEvent.BlinkGC.MarkProcessMarkingWorklist.X;
  
    type MarkProcessNotFullyconstructeddWorklist = 
      TraceEvent.BlinkGC.MarkProcessNotFullyconstructeddWorklist.X;
  
    type MarkProcessWorklists = 
      TraceEvent.BlinkGC.MarkProcessWorklists.X;
  
    type MarkProcessWriteBarrierWorklist = 
      TraceEvent.BlinkGC.MarkProcessWriteBarrierWorklist.X;
  
    type UnifiedMarkingStep = 
      TraceEvent.BlinkGC.UnifiedMarkingStep.X;
  
    type VisitRoots = 
      TraceEvent.BlinkGC.VisitRoots.X;
  
    namespace AtomicPauseMarkEpilogue {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.AtomicPauseMarkEpilogue';
        // Denotes the end of the event AtomicPauseMarkEpilogue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPauseMarkPrologue {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.AtomicPauseMarkPrologue';
        // Denotes the end of the event AtomicPauseMarkPrologue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPauseMarkRoots {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.AtomicPauseMarkRoots';
        // Denotes the end of the event AtomicPauseMarkRoots.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPauseMarkTransitiveClosure {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.AtomicPauseMarkTransitiveClosure';
        // Denotes the end of the event AtomicPauseMarkTransitiveClosure.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPauseSweepAndCompact {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.AtomicPauseSweepAndCompact';
        // Denotes the end of the event AtomicPauseSweepAndCompact.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPhase {
      interface B extends TraceEvent.Base {
        args: {
          forced: boolean;
        };
        name: 'BlinkGC.AtomicPhase';
        // Denotes the beginning of the event AtomicPhase.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
        
        };
        name: 'BlinkGC.AtomicPhase';
        // Denotes the ending of the event AtomicPhase.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompleteSweep {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.CompleteSweep';
        // Denotes the end of the event CompleteSweep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ConcurrentMarkingStep {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.ConcurrentMarkingStep';
        // Denotes the end of the event ConcurrentMarkingStep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ConcurrentSweepingStep {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.ConcurrentSweepingStep';
        // Denotes the end of the event ConcurrentSweepingStep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IncrementalMarkingStartMarking {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
          reason: string;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.IncrementalMarkingStartMarking';
        // Denotes the end of the event IncrementalMarkingStartMarking.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IncrementalMarkingStep {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.IncrementalMarkingStep';
        // Denotes the end of the event IncrementalMarkingStep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IncrementalMarkingWithDeadline {
      interface X extends TraceEvent.Base {
        args: {
          deadline_ms: number;
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.IncrementalMarkingWithDeadline';
        // Denotes the end of the event IncrementalMarkingWithDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LazySweepInIdle {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
          idleDeltaInSeconds: number;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.LazySweepInIdle';
        // Denotes the end of the event LazySweepInIdle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LazySweepOnAllocation {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.LazySweepOnAllocation';
        // Denotes the end of the event LazySweepOnAllocation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkBailOutObjects {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkBailOutObjects';
        // Denotes the end of the event MarkBailOutObjects.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkFlushEphemeronPairs {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkFlushEphemeronPairs';
        // Denotes the end of the event MarkFlushEphemeronPairs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkFlushV8References {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkFlushV8References';
        // Denotes the end of the event MarkFlushV8References.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkInvokeEphemeronCallbacks {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkInvokeEphemeronCallbacks';
        // Denotes the end of the event MarkInvokeEphemeronCallbacks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkProcessMarkingWorklist {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkProcessMarkingWorklist';
        // Denotes the end of the event MarkProcessMarkingWorklist.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkProcessNotFullyconstructeddWorklist {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkProcessNotFullyconstructeddWorklist';
        // Denotes the end of the event MarkProcessNotFullyconstructeddWorklist.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkProcessWorklists {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkProcessWorklists';
        // Denotes the end of the event MarkProcessWorklists.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkProcessWriteBarrierWorklist {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.MarkProcessWriteBarrierWorklist';
        // Denotes the end of the event MarkProcessWriteBarrierWorklist.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnifiedMarkingStep {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.UnifiedMarkingStep';
        // Denotes the end of the event UnifiedMarkingStep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitRoots {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
          forced: boolean;
        };
        // Duration.
        dur: number;
        name: 'BlinkGC.VisitRoots';
        // Denotes the end of the event VisitRoots.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BlinkGCMarking {
    interface X extends TraceEvent.Base {
      args: {
        gcReason: string;
        lazySweeping: boolean;
      };
      // Duration.
      dur: number;
      name: 'BlinkGCMarking';
      // Denotes the end of the event BlinkGCMarking.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BlobReader {
    type CountSize = 
      TraceEvent.BlobReader.CountSize.F |
      TraceEvent.BlobReader.CountSize.S;
  
    type ReadBytesItem = 
      TraceEvent.BlobReader.ReadBytesItem.X;
  
    type ReadMore = 
      TraceEvent.BlobReader.ReadMore.F |
      TraceEvent.BlobReader.ReadMore.S;
  
    namespace CountSize {
      interface F extends TraceEvent.Base {
        args: {
          result: string;
          size: number;
        };
        id2: {
          local: string;
        };
        name: 'BlobReader::CountSize';
        // Denotes the ending of the async event CountSize.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'BlobReader::CountSize';
        // Denotes the beginning of the async event CountSize.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadBytesItem {
      interface X extends TraceEvent.Base {
        args: {
          uuid: string;
        };
        // Duration.
        dur: number;
        name: 'BlobReader::ReadBytesItem';
        // Denotes the end of the event ReadBytesItem.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadMore {
      interface F extends TraceEvent.Base {
        args: {
          num_bytes: number;
          result: string;
        };
        id2: {
          local: string;
        };
        name: 'BlobReader::ReadMore';
        // Denotes the ending of the async event ReadMore.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'BlobReader::ReadMore';
        // Denotes the beginning of the async event ReadMore.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface F extends TraceEvent.Base {
      args: {
        bytes_written: number;
      };
      id2: {
        local: string;
      };
      name: 'BlobReader';
      // Denotes the ending of the async event BlobReader.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
        uuid: string;
      };
      id2: {
        local: string;
      };
      name: 'BlobReader';
      // Denotes the beginning of the async event BlobReader.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Blocking {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Blocking';
      // Denotes an event Blocking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BookmarkProvider {
    type Start = 
      TraceEvent.BookmarkProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BookmarkProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Browser {
    type OnActiveTabChanged = 
      TraceEvent.Browser.OnActiveTabChanged.X;
  
    type OnTabStripModelChanged = 
      TraceEvent.Browser.OnTabStripModelChanged.X;
  
    type RenderProcessHostImpl = 
      TraceEvent.Browser.RenderProcessHostImpl.b;
  
    type UpdateToolbar = 
      TraceEvent.Browser.UpdateToolbar.X;
  
    namespace OnActiveTabChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Browser::OnActiveTabChanged';
        // Denotes the end of the event OnActiveTabChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnTabStripModelChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Browser::OnTabStripModelChanged';
        // Denotes the end of the event OnTabStripModelChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderProcessHostImpl {
      interface b extends TraceEvent.Base {
        args: {
          browser_context: string;
          render_process_host: string;
        };
        id2: {
          local: string;
        };
        name: 'Browser.RenderProcessHostImpl';
        // Denotes the beginning of the nestable async flow event RenderProcessHostImpl.
        ph: 'b';
        scope: string;
      }
    }
  
    namespace UpdateToolbar {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Browser::UpdateToolbar';
        // Denotes the end of the event UpdateToolbar.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BrowserCrApplication {
    type SendEvent = 
      TraceEvent.BrowserCrApplication.SendEvent.X;
  
    namespace SendEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserCrApplication::sendEvent';
        // Denotes the end of the event SendEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BrowserToRendererCompositor {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'BrowserToRendererCompositor';
      // Denotes the beginning of the nestable async flow event BrowserToRendererCompositor.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'BrowserToRendererCompositor';
      // Denotes a step into the nestable async flow event BrowserToRendererCompositor.
      ph: 'e';
      scope: string;
    }
  }

  namespace BrowserView {
    type Layout = 
      TraceEvent.BrowserView.Layout.X;
  
    type OnActiveTabChanged = 
      TraceEvent.BrowserView.OnActiveTabChanged.X;
  
    type UpdateUIForContents = 
      TraceEvent.BrowserView.UpdateUIForContents.X;
  
    namespace Layout {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserView::Layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnActiveTabChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserView::OnActiveTabChanged';
        // Denotes the end of the event OnActiveTabChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateUIForContents {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserView::UpdateUIForContents';
        // Denotes the end of the event UpdateUIForContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BrowserViewLayout {
    type Layout = 
      TraceEvent.BrowserViewLayout.Layout.X;
  
    type LayoutBookmarkAndInfoBars = 
      TraceEvent.BrowserViewLayout.LayoutBookmarkAndInfoBars.X;
  
    type LayoutContentsContainerView = 
      TraceEvent.BrowserViewLayout.LayoutContentsContainerView.X;
  
    type LayoutDownloadShelf = 
      TraceEvent.BrowserViewLayout.LayoutDownloadShelf.X;
  
    type LayoutTabStripRegion = 
      TraceEvent.BrowserViewLayout.LayoutTabStripRegion.X;
  
    type LayoutToolbar = 
      TraceEvent.BrowserViewLayout.LayoutToolbar.X;
  
    type LayoutWebUITabStrip = 
      TraceEvent.BrowserViewLayout.LayoutWebUITabStrip.X;
  
    namespace Layout {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::Layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayoutBookmarkAndInfoBars {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::LayoutBookmarkAndInfoBars';
        // Denotes the end of the event LayoutBookmarkAndInfoBars.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayoutContentsContainerView {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::LayoutContentsContainerView';
        // Denotes the end of the event LayoutContentsContainerView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayoutDownloadShelf {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::LayoutDownloadShelf';
        // Denotes the end of the event LayoutDownloadShelf.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayoutTabStripRegion {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::LayoutTabStripRegion';
        // Denotes the end of the event LayoutTabStripRegion.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayoutToolbar {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::LayoutToolbar';
        // Denotes the end of the event LayoutToolbar.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayoutWebUITabStrip {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserViewLayout::LayoutWebUITabStrip';
        // Denotes the end of the event LayoutWebUITabStrip.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BudgetPool_DisableThrottling {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'BudgetPool_DisableThrottling';
      // Denotes the end of the event BudgetPool_DisableThrottling.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BudgetPool_EnableThrottling {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'BudgetPool_EnableThrottling';
      // Denotes the end of the event BudgetPool_EnableThrottling.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CalculateRenderSurfaceLayerList {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CalculateRenderSurfaceLayerList';
      // Denotes the end of the event CalculateRenderSurfaceLayerList.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CancelAnimationFrame {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          id: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'CancelAnimationFrame';
      // Denotes an event CancelAnimationFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CancelIdleCallback {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          id: number;
        };
      };
      name: 'CancelIdleCallback';
      // Denotes an event CancelIdleCallback. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CANCELLED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'CANCELLED';
      // Denotes the ending of the nestable async flow event CANCELLED.
      ph: 'n';
      scope: string;
    }
  }

  namespace Canvas2DLayerBridge {
    type FinalizeFrame = 
      TraceEvent.Canvas2DLayerBridge.FinalizeFrame.X;
  
    type FlushRecording = 
      TraceEvent.Canvas2DLayerBridge.FlushRecording.X;
  
    namespace FinalizeFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Canvas2DLayerBridge::FinalizeFrame';
        // Denotes the end of the event FinalizeFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushRecording {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Canvas2DLayerBridge::flushRecording';
        // Denotes the end of the event FlushRecording.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Canvas2DLayerBridgeCreation {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Canvas2DLayerBridgeCreation';
      // Denotes an event Canvas2DLayerBridgeCreation. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace CanvasRenderingContext2D {
    type FinalizeFrame = 
      TraceEvent.CanvasRenderingContext2D.FinalizeFrame.X;
  
    namespace FinalizeFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasRenderingContext2D::FinalizeFrame';
        // Denotes the end of the event FinalizeFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CanvasResourceProviderSharedImage {
    type CreateResource = 
      TraceEvent.CanvasResourceProviderSharedImage.CreateResource.X;
  
    type CreateSkSurface = 
      TraceEvent.CanvasResourceProviderSharedImage.CreateSkSurface.X;
  
    type Snapshot = 
      TraceEvent.CanvasResourceProviderSharedImage.Snapshot.X;
  
    namespace CreateResource {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceProviderSharedImage::CreateResource';
        // Denotes the end of the event CreateResource.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateSkSurface {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceProviderSharedImage::CreateSkSurface';
        // Denotes the end of the event CreateSkSurface.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Snapshot {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceProviderSharedImage::Snapshot';
        // Denotes the end of the event Snapshot.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CanvasResourceRasterSharedImage {
    type Bitmap = 
      TraceEvent.CanvasResourceRasterSharedImage.Bitmap.X;
  
    type Create = 
      TraceEvent.CanvasResourceRasterSharedImage.Create.X;
  
    namespace Bitmap {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceRasterSharedImage::Bitmap';
        // Denotes the end of the event Bitmap.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Create {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceRasterSharedImage::Create';
        // Denotes the end of the event Create.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CARendererLayerTree {
    type CommitScheduledCALayers = 
      TraceEvent.CARendererLayerTree.CommitScheduledCALayers.X;
  
    namespace CommitScheduledCALayers {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CARendererLayerTree::CommitScheduledCALayers';
        // Denotes the end of the event CommitScheduledCALayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CATransactionCoordinator {
    type Postcommithandler = 
      TraceEvent.CATransactionCoordinator.Postcommithandler.X;
  
    type Precommithandler = 
      TraceEvent.CATransactionCoordinator.Precommithandler.X;
  
    namespace Postcommithandler {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CATransactionCoordinator: post-commit handler';
        // Denotes the end of the event Postcommithandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Precommithandler {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CATransactionCoordinator: pre-commit handler';
        // Denotes the end of the event Precommithandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Cc {
    namespace Mojom {
      type RenderFrameMetadataObserver = 
        TraceEvent.Cc.Mojom.RenderFrameMetadataObserver.X;
    
      type RenderFrameMetadataObserverClient = 
        TraceEvent.Cc.Mojom.RenderFrameMetadataObserverClient.X;
    
      namespace RenderFrameMetadataObserver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'cc.mojom.RenderFrameMetadataObserver';
          // Denotes the end of the event RenderFrameMetadataObserver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RenderFrameMetadataObserverClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'cc.mojom.RenderFrameMetadataObserverClient';
          // Denotes the end of the event RenderFrameMetadataObserverClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace CERT_VERIFIER_REQUEST_BOUND_TO_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_REQUEST_BOUND_TO_JOB';
      // Denotes the ending of the nestable async flow event CERT_VERIFIER_REQUEST_BOUND_TO_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace CERT_VERIFIER_REQUEST {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_REQUEST';
      // Denotes the beginning of the nestable async flow event CERT_VERIFIER_REQUEST.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'CERT_VERIFIER_REQUEST';
      // Denotes a step into the nestable async flow event CERT_VERIFIER_REQUEST.
      ph: 'e';
      scope: string;
    }
  }

  namespace CERT_VERIFIER_TASK_BOUND {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_TASK_BOUND';
      // Denotes the ending of the nestable async flow event CERT_VERIFIER_TASK_BOUND.
      ph: 'n';
      scope: string;
    }
  }

  namespace CERT_VERIFIER_TASK {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_TASK';
      // Denotes the beginning of the nestable async flow event CERT_VERIFIER_TASK.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'CERT_VERIFIER_TASK';
      // Denotes a step into the nestable async flow event CERT_VERIFIER_TASK.
      ph: 'e';
      scope: string;
    }
  }

  namespace CERT_VERIFY_PROC_INPUT_CERT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          certificate: string;
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFY_PROC_INPUT_CERT';
      // Denotes the ending of the nestable async flow event CERT_VERIFY_PROC_INPUT_CERT.
      ph: 'n';
      scope: string;
    }
  }

  namespace CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          best_result_index: number;
          digest_policy: number;
          has_valid_path: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT';
      // Denotes the beginning of the nestable async flow event CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT';
      // Denotes a step into the nestable async flow event CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT.
      ph: 'e';
      scope: string;
    }
  }

  namespace CERT_VERIFY_PROC_PATH_BUILT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          certificates: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
            '30': string;
            '31': string;
            '32': string;
            '33': string;
            '34': string;
            '35': string;
            '36': string;
            '37': string;
            '38': string;
            '39': string;
            '40': string;
            '41': string;
            '42': string;
            '43': string;
            '44': string;
            '45': string;
            '46': string;
            '47': string;
            '48': string;
            '49': string;
            '50': string;
            '51': string;
            '52': string;
            '53': string;
            '54': string;
            '55': string;
            '56': string;
            '57': string;
            '58': string;
            '59': string;
            '60': string;
            '61': string;
            '62': string;
            '63': string;
            '64': string;
            '65': string;
            '66': string;
            '67': string;
            '68': string;
            '69': string;
            '70': string;
            '71': string;
            '72': string;
            '73': string;
            '74': string;
            '75': string;
            '76': string;
            '77': string;
            '78': string;
            '79': string;
            '80': string;
            '81': string;
            '82': string;
            '83': string;
            '84': string;
            '85': string;
            '86': string;
            '87': string;
            '88': string;
            '89': string;
            '90': string;
            '91': string;
            '92': string;
            '93': string;
            '94': string;
            '95': string;
            '96': string;
            '97': string;
            '98': string;
            '99': string;
            '100': string;
            '101': string;
            '102': string;
            '103': string;
            '104': string;
            '105': string;
            '106': string;
            '107': string;
            '108': string;
            '109': string;
            '110': string;
            '111': string;
            '112': string;
            '113': string;
            '114': string;
            '115': string;
            '116': string;
            '117': string;
            '118': string;
            '119': string;
            '120': string;
            '121': string;
            '122': string;
            '123': string;
            '124': string;
            '125': string;
            '126': string;
            '127': string;
            '128': string;
            '129': string;
            '130': string;
            '131': string;
            '132': string;
            '133': string;
            '134': string;
            '135': string;
            '136': string;
            '137': string;
            '138': string;
            '139': string;
            '140': string;
            '141': string;
            '142': string;
            '143': string;
            '144': string;
            '145': string;
            '146': string;
            '147': string;
            '148': string;
            '149': string;
            '150': string;
            '151': string;
            '152': string;
            '153': string;
            '154': string;
            '155': string;
            '156': string;
            '157': string;
            '158': string;
            '159': string;
            '160': string;
            '161': string;
            '162': string;
            '163': string;
            '164': string;
            '165': string;
            '166': string;
            '167': string;
            '168': string;
            '169': string;
            '170': string;
            '171': string;
            '172': string;
            '173': string;
            '174': string;
            '175': string;
            '176': string;
            '177': string;
            '178': string;
            '179': string;
            '180': string;
            '181': string;
            '182': string;
            '183': string;
            '184': string;
            '185': string;
            '186': string;
            '187': string;
            '188': string;
            '189': string;
            '190': string;
            '191': string;
            '192': string;
            '193': string;
            '194': string;
            '195': string;
            '196': string;
            '197': string;
            '198': string;
            '199': string;
            '200': string;
            '201': string;
            '202': string;
            '203': string;
            '204': string;
            '205': string;
            '206': string;
            '207': string;
            '208': string;
            '209': string;
            '210': string;
            '211': string;
            '212': string;
            '213': string;
            '214': string;
            '215': string;
            '216': string;
            '217': string;
            '218': string;
            '219': string;
            '220': string;
            '221': string;
            '222': string;
            '223': string;
            '224': string;
            '225': string;
            '226': string;
            '227': string;
            '228': string;
            '229': string;
            '230': string;
            '231': string;
            '232': string;
            '233': string;
            '234': string;
            '235': string;
            '236': string;
            '237': string;
            '238': string;
            '239': string;
            '240': string;
            '241': string;
            '242': string;
            '243': string;
            '244': string;
            '245': string;
            '246': string;
            '247': string;
            '248': string;
            '249': string;
            '250': string;
            '251': string;
            '252': string;
            '253': string;
            '254': string;
            '255': string;
            '256': string;
            '257': string;
            '258': string;
            '259': string;
            '260': string;
            '261': string;
            '262': string;
            '263': string;
            '264': string;
            '265': string;
            '266': string;
            '267': string;
            '268': string;
            '269': string;
            '270': string;
            '271': string;
            '272': string;
            '273': string;
            '274': string;
            '275': string;
            '276': string;
            '277': string;
            '278': string;
            '279': string;
            '280': string;
            '281': string;
            '282': string;
            '283': string;
            '284': string;
            '285': string;
            '286': string;
            '287': string;
            '288': string;
            '289': string;
            '290': string;
            '291': string;
            '292': string;
            '293': string;
            '294': string;
            '295': string;
            '296': string;
            '297': string;
            '298': string;
            '299': string;
            '300': string;
            '301': string;
            '302': string;
            '303': string;
            '304': string;
            '305': string;
            '306': string;
            '307': string;
            '308': string;
            '309': string;
            '310': string;
            '311': string;
            '312': string;
            '313': string;
            '314': string;
            '315': string;
            '316': string;
            '317': string;
            '318': string;
            '319': string;
            '320': string;
            '321': string;
            '322': string;
            '323': string;
            '324': string;
            '325': string;
            '326': string;
            '327': string;
            '328': string;
            '329': string;
            '330': string;
            '331': string;
            '332': string;
            '333': string;
            '334': string;
            '335': string;
            '336': string;
            '337': string;
            '338': string;
            '339': string;
            '340': string;
            '341': string;
            '342': string;
            '343': string;
            '344': string;
            '345': string;
            '346': string;
            '347': string;
            '348': string;
            '349': string;
            '350': string;
            '351': string;
            '352': string;
            '353': string;
            '354': string;
            '355': string;
            '356': string;
            '357': string;
            '358': string;
            '359': string;
            '360': string;
            '361': string;
            '362': string;
            '363': string;
            '364': string;
            '365': string;
            '366': string;
            '367': string;
            '368': string;
            '369': string;
            '370': string;
            '371': string;
            '372': string;
            '373': string;
            '374': string;
            '375': string;
            '376': string;
            '377': string;
            '378': string;
            '379': string;
            '380': string;
            '381': string;
            '382': string;
            '383': string;
            '384': string;
            '385': string;
            '386': string;
            '387': string;
            '388': string;
            '389': string;
            '390': string;
            '391': string;
            '392': string;
            '393': string;
            '394': string;
            '395': string;
            '396': string;
            '397': string;
            '398': string;
            '399': string;
            '400': string;
            '401': string;
            '402': string;
            '403': string;
            '404': string;
            '405': string;
            '406': string;
            '407': string;
            '408': string;
            '409': string;
            '410': string;
            '411': string;
            '412': string;
            '413': string;
            '414': string;
            '415': string;
            '416': string;
            '417': string;
            '418': string;
            '419': string;
            '420': string;
            '421': string;
            '422': string;
            '423': string;
            '424': string;
            '425': string;
            '426': string;
            '427': string;
            '428': string;
            '429': string;
            '430': string;
            '431': string;
            '432': string;
            '433': string;
            '434': string;
            '435': string;
            '436': string;
            '437': string;
            '438': string;
            '439': string;
            '440': string;
            '441': string;
            '442': string;
            '443': string;
            '444': string;
            '445': string;
            '446': string;
            '447': string;
            '448': string;
            '449': string;
            '450': string;
            '451': string;
            '452': string;
            '453': string;
            '454': string;
            '455': string;
            '456': string;
            '457': string;
            '458': string;
            '459': string;
            '460': string;
            '461': string;
            '462': string;
            '463': string;
            '464': string;
            '465': string;
            '466': string;
            '467': string;
            '468': string;
            '469': string;
            '470': string;
            '471': string;
            '472': string;
            '473': string;
            '474': string;
            '475': string;
            '476': string;
            '477': string;
            '478': string;
            '479': string;
            '480': string;
            '481': string;
            '482': string;
            '483': string;
            '484': string;
            '485': string;
            '486': string;
            '487': string;
            '488': string;
            '489': string;
            '490': string;
            '491': string;
            '492': string;
            '493': string;
            '494': string;
            '495': string;
            '496': string;
            '497': string;
            '498': string;
            '499': string;
            '500': string;
            '501': string;
            '502': string;
            '503': string;
            '504': string;
            '505': string;
            '506': string;
            '507': string;
            '508': string;
            '509': string;
            '510': string;
            '511': string;
            '512': string;
            '513': string;
            '514': string;
            '515': string;
            '516': string;
            '517': string;
            '518': string;
            '519': string;
            '520': string;
            '521': string;
            '522': string;
            '523': string;
            '524': string;
            '525': string;
            '526': string;
            '527': string;
            '528': string;
            '529': string;
            '530': string;
            '531': string;
            '532': string;
            '533': string;
            '534': string;
            '535': string;
            '536': string;
            '537': string;
            '538': string;
            '539': string;
            '540': string;
            '541': string;
            '542': string;
            '543': string;
            '544': string;
            '545': string;
            '546': string;
            '547': string;
            '548': string;
            '549': string;
            '550': string;
            '551': string;
            '552': string;
            '553': string;
            '554': string;
            '555': string;
            '556': string;
            '557': string;
            '558': string;
            '559': string;
            '560': string;
            '561': string;
            '562': string;
            '563': string;
            '564': string;
            '565': string;
            '566': string;
            '567': string;
            '568': string;
            '569': string;
            '570': string;
            '571': string;
            '572': string;
            '573': string;
            '574': string;
            '575': string;
            '576': string;
            '577': string;
            '578': string;
            '579': string;
            '580': string;
            '581': string;
            '582': string;
            '583': string;
            '584': string;
            '585': string;
            '586': string;
            '587': string;
            '588': string;
            '589': string;
            '590': string;
            '591': string;
            '592': string;
            '593': string;
            '594': string;
            '595': string;
            '596': string;
            '597': string;
            '598': string;
            '599': string;
            '600': string;
            '601': string;
            '602': string;
            '603': string;
            '604': string;
            '605': string;
            '606': string;
            '607': string;
            '608': string;
            '609': string;
            '610': string;
            '611': string;
            '612': string;
            '613': string;
            '614': string;
            '615': string;
            '616': string;
            '617': string;
            '618': string;
            '619': string;
            '620': string;
            '621': string;
            '622': string;
            '623': string;
            '624': string;
            '625': string;
            '626': string;
            '627': string;
            '628': string;
            '629': string;
            '630': string;
            '631': string;
            '632': string;
            '633': string;
            '634': string;
            '635': string;
            '636': string;
            '637': string;
            '638': string;
            '639': string;
            '640': string;
            '641': string;
            '642': string;
            '643': string;
            '644': string;
            '645': string;
            '646': string;
            '647': string;
            '648': string;
            '649': string;
            '650': string;
            '651': string;
            '652': string;
            '653': string;
            '654': string;
            '655': string;
            '656': string;
            '657': string;
            '658': string;
            '659': string;
            '660': string;
            '661': string;
            '662': string;
            '663': string;
            '664': string;
            '665': string;
            '666': string;
            '667': string;
            '668': string;
            '669': string;
            '670': string;
            '671': string;
            '672': string;
            '673': string;
            '674': string;
            '675': string;
            '676': string;
            '677': string;
            '678': string;
            '679': string;
            '680': string;
            '681': string;
            '682': string;
            '683': string;
            '684': string;
            '685': string;
            '686': string;
            '687': string;
            '688': string;
            '689': string;
            '690': string;
            '691': string;
            '692': string;
            '693': string;
            '694': string;
            '695': string;
            '696': string;
            '697': string;
            '698': string;
            '699': string;
            '700': string;
            '701': string;
            '702': string;
            '703': string;
            '704': string;
            '705': string;
            '706': string;
            '707': string;
            '708': string;
            '709': string;
            '710': string;
            '711': string;
            '712': string;
            '713': string;
            '714': string;
            '715': string;
            '716': string;
            '717': string;
            '718': string;
            '719': string;
            '720': string;
            '721': string;
            '722': string;
            '723': string;
            '724': string;
            '725': string;
            '726': string;
            '727': string;
            '728': string;
            '729': string;
            '730': string;
            '731': string;
            '732': string;
            '733': string;
            '734': string;
            '735': string;
            '736': string;
            '737': string;
            '738': string;
            '739': string;
            '740': string;
            '741': string;
            '742': string;
            '743': string;
            '744': string;
            '745': string;
            '746': string;
            '747': string;
            '748': string;
            '749': string;
            '750': string;
            '751': string;
            '752': string;
            '753': string;
            '754': string;
            '755': string;
            '756': string;
            '757': string;
            '758': string;
            '759': string;
            '760': string;
            '761': string;
            '762': string;
            '763': string;
            '764': string;
            '765': string;
            '766': string;
            '767': string;
            '768': string;
            '769': string;
            '770': string;
            '771': string;
            '772': string;
            '773': string;
            '774': string;
            '775': string;
            '776': string;
            '777': string;
            '778': string;
            '779': string;
            '780': string;
            '781': string;
            '782': string;
            '783': string;
            '784': string;
            '785': string;
            '786': string;
            '787': string;
            '788': string;
            '789': string;
            '790': string;
            '791': string;
            '792': string;
            '793': string;
            '794': string;
            '795': string;
            '796': string;
            '797': string;
            '798': string;
            '799': string;
            '800': string;
            '801': string;
            '802': string;
            '803': string;
            '804': string;
            '805': string;
            '806': string;
            '807': string;
            '808': string;
            '809': string;
            '810': string;
            '811': string;
            '812': string;
            '813': string;
            '814': string;
            '815': string;
            '816': string;
            '817': string;
            '818': string;
            '819': string;
            '820': string;
            '821': string;
            '822': string;
            '823': string;
            '824': string;
            '825': string;
            '826': string;
            '827': string;
            '828': string;
            '829': string;
            '830': string;
            '831': string;
            '832': string;
            '833': string;
            '834': string;
            '835': string;
            '836': string;
            '837': string;
            '838': string;
            '839': string;
            '840': string;
            '841': string;
            '842': string;
            '843': string;
            '844': string;
            '845': string;
            '846': string;
            '847': string;
            '848': string;
            '849': string;
            '850': string;
            '851': string;
            '852': string;
            '853': string;
            '854': string;
            '855': string;
            '856': string;
            '857': string;
            '858': string;
            '859': string;
            '860': string;
            '861': string;
            '862': string;
            '863': string;
            '864': string;
            '865': string;
            '866': string;
            '867': string;
            '868': string;
            '869': string;
            '870': string;
            '871': string;
            '872': string;
            '873': string;
            '874': string;
            '875': string;
            '876': string;
            '877': string;
            '878': string;
            '879': string;
            '880': string;
            '881': string;
            '882': string;
            '883': string;
            '884': string;
            '885': string;
            '886': string;
            '887': string;
            '888': string;
            '889': string;
            '890': string;
            '891': string;
            '892': string;
            '893': string;
            '894': string;
            '895': string;
            '896': string;
            '897': string;
            '898': string;
            '899': string;
            '900': string;
            '901': string;
            '902': string;
            '903': string;
            '904': string;
            '905': string;
            '906': string;
            '907': string;
            '908': string;
            '909': string;
            '910': string;
            '911': string;
            '912': string;
            '913': string;
            '914': string;
            '915': string;
            '916': string;
            '917': string;
            '918': string;
            '919': string;
            '920': string;
            '921': string;
            '922': string;
            '923': string;
            '924': string;
            '925': string;
            '926': string;
            '927': string;
            '928': string;
            '929': string;
            '930': string;
            '931': string;
            '932': string;
            '933': string;
            '934': string;
            '935': string;
            '936': string;
            '937': string;
            '938': string;
            '939': string;
            '940': string;
            '941': string;
            '942': string;
            '943': string;
            '944': string;
            '945': string;
            '946': string;
            '947': string;
            '948': string;
            '949': string;
            '950': string;
            '951': string;
            '952': string;
            '953': string;
            '954': string;
            '955': string;
            '956': string;
            '957': string;
            '958': string;
            '959': string;
            '960': string;
            '961': string;
            '962': string;
            '963': string;
            '964': string;
            '965': string;
            '966': string;
            '967': string;
            '968': string;
            '969': string;
            '970': string;
            '971': string;
            '972': string;
            '973': string;
            '974': string;
            '975': string;
            '976': string;
            '977': string;
            '978': string;
            '979': string;
            '980': string;
            '981': string;
            '982': string;
            '983': string;
            '984': string;
            '985': string;
            '986': string;
            '987': string;
            '988': string;
            '989': string;
            '990': string;
            '991': string;
            '992': string;
            '993': string;
            '994': string;
            '995': string;
            '996': string;
            '997': string;
            '998': string;
            '999': string;
            '1000': string;
            '1001': string;
            '1002': string;
            '1003': string;
            '1004': string;
            '1005': string;
            '1006': string;
            '1007': string;
            '1008': string;
            '1009': string;
            '1010': string;
            '1011': string;
            '1012': string;
            '1013': string;
            '1014': string;
            '1015': string;
            '1016': string;
            '1017': string;
            '1018': string;
            '1019': string;
            '1020': string;
            '1021': string;
            '1022': string;
            '1023': string;
            '1024': string;
            '1025': string;
            '1026': string;
            '1027': string;
            '1028': string;
            '1029': string;
            '1030': string;
            '1031': string;
            '1032': string;
            '1033': string;
            '1034': string;
            '1035': string;
            '1036': string;
            '1037': string;
            '1038': string;
            '1039': string;
            '1040': string;
            '1041': string;
            '1042': string;
            '1043': string;
            '1044': string;
            '1045': string;
            '1046': string;
            '1047': string;
            '1048': string;
            '1049': string;
            '1050': string;
            '1051': string;
            '1052': string;
            '1053': string;
            '1054': string;
            '1055': string;
            '1056': string;
            '1057': string;
            '1058': string;
            '1059': string;
            '1060': string;
            '1061': string;
            '1062': string;
            '1063': string;
            '1064': string;
            '1065': string;
            '1066': string;
            '1067': string;
            '1068': string;
            '1069': string;
            '1070': string;
            '1071': string;
            '1072': string;
            '1073': string;
            '1074': string;
            '1075': string;
            '1076': string;
            '1077': string;
            '1078': string;
            '1079': string;
            '1080': string;
            '1081': string;
            '1082': string;
            '1083': string;
            '1084': string;
            '1085': string;
            '1086': string;
            '1087': string;
            '1088': string;
            '1089': string;
            '1090': string;
            '1091': string;
            '1092': string;
            '1093': string;
            '1094': string;
            '1095': string;
            '1096': string;
            '1097': string;
            '1098': string;
            '1099': string;
            '1100': string;
            '1101': string;
            '1102': string;
            '1103': string;
            '1104': string;
            '1105': string;
            '1106': string;
            '1107': string;
            '1108': string;
            '1109': string;
            '1110': string;
            '1111': string;
            '1112': string;
            '1113': string;
            '1114': string;
            '1115': string;
            '1116': string;
            '1117': string;
            '1118': string;
            '1119': string;
            '1120': string;
            '1121': string;
            '1122': string;
            '1123': string;
            '1124': string;
            '1125': string;
            '1126': string;
            '1127': string;
            '1128': string;
            '1129': string;
            '1130': string;
            '1131': string;
            '1132': string;
            '1133': string;
            '1134': string;
            '1135': string;
            '1136': string;
            '1137': string;
            '1138': string;
            '1139': string;
            '1140': string;
            '1141': string;
            '1142': string;
            '1143': string;
            '1144': string;
            '1145': string;
            '1146': string;
            '1147': string;
            '1148': string;
            '1149': string;
            '1150': string;
            '1151': string;
            '1152': string;
            '1153': string;
            '1154': string;
            '1155': string;
            '1156': string;
            '1157': string;
            '1158': string;
            '1159': string;
            '1160': string;
            '1161': string;
            '1162': string;
            '1163': string;
            '1164': string;
            '1165': string;
            '1166': string;
            '1167': string;
            '1168': string;
            '1169': string;
            '1170': string;
            '1171': string;
            '1172': string;
            '1173': string;
            '1174': string;
            '1175': string;
            '1176': string;
            '1177': string;
            '1178': string;
            '1179': string;
            '1180': string;
            '1181': string;
            '1182': string;
            '1183': string;
            '1184': string;
            '1185': string;
            '1186': string;
            '1187': string;
            '1188': string;
            '1189': string;
            '1190': string;
            '1191': string;
            '1192': string;
            '1193': string;
            '1194': string;
            '1195': string;
            '1196': string;
            '1197': string;
            '1198': string;
            '1199': string;
            '1200': string;
            '1201': string;
            '1202': string;
            '1203': string;
            '1204': string;
            '1205': string;
            '1206': string;
            '1207': string;
            '1208': string;
            '1209': string;
            '1210': string;
            '1211': string;
            '1212': string;
            '1213': string;
            '1214': string;
            '1215': string;
            '1216': string;
            '1217': string;
            '1218': string;
            '1219': string;
            '1220': string;
            '1221': string;
            '1222': string;
            '1223': string;
            '1224': string;
            '1225': string;
            '1226': string;
            '1227': string;
            '1228': string;
            '1229': string;
            '1230': string;
            '1231': string;
            '1232': string;
            '1233': string;
            '1234': string;
            '1235': string;
            '1236': string;
            '1237': string;
            '1238': string;
            '1239': string;
            '1240': string;
            '1241': string;
            '1242': string;
            '1243': string;
            '1244': string;
            '1245': string;
            '1246': string;
            '1247': string;
            '1248': string;
            '1249': string;
            '1250': string;
            '1251': string;
            '1252': string;
            '1253': string;
            '1254': string;
            '1255': string;
            '1256': string;
            '1257': string;
            '1258': string;
            '1259': string;
            '1260': string;
            '1261': string;
            '1262': string;
            '1263': string;
            '1264': string;
            '1265': string;
            '1266': string;
            '1267': string;
            '1268': string;
            '1269': string;
            '1270': string;
            '1271': string;
            '1272': string;
            '1273': string;
            '1274': string;
            '1275': string;
            '1276': string;
            '1277': string;
            '1278': string;
            '1279': string;
            '1280': string;
            '1281': string;
            '1282': string;
            '1283': string;
            '1284': string;
            '1285': string;
            '1286': string;
            '1287': string;
            '1288': string;
            '1289': string;
            '1290': string;
            '1291': string;
            '1292': string;
            '1293': string;
            '1294': string;
            '1295': string;
            '1296': string;
            '1297': string;
            '1298': string;
            '1299': string;
            '1300': string;
            '1301': string;
            '1302': string;
            '1303': string;
            '1304': string;
            '1305': string;
            '1306': string;
            '1307': string;
            '1308': string;
            '1309': string;
            '1310': string;
            '1311': string;
            '1312': string;
            '1313': string;
            '1314': string;
            '1315': string;
            '1316': string;
            '1317': string;
            '1318': string;
            '1319': string;
            '1320': string;
            '1321': string;
            '1322': string;
            '1323': string;
            '1324': string;
            '1325': string;
            '1326': string;
            '1327': string;
            '1328': string;
            '1329': string;
            '1330': string;
            '1331': string;
            '1332': string;
            '1333': string;
            '1334': string;
            '1335': string;
            '1336': string;
            '1337': string;
            '1338': string;
            '1339': string;
            '1340': string;
            '1341': string;
            '1342': string;
            '1343': string;
            '1344': string;
            '1345': string;
            '1346': string;
            '1347': string;
            '1348': string;
            '1349': string;
            '1350': string;
            '1351': string;
            '1352': string;
            '1353': string;
            '1354': string;
            '1355': string;
            '1356': string;
            '1357': string;
            '1358': string;
            '1359': string;
            '1360': string;
            '1361': string;
            '1362': string;
            '1363': string;
            '1364': string;
            '1365': string;
            '1366': string;
            '1367': string;
            '1368': string;
            '1369': string;
            '1370': string;
            '1371': string;
            '1372': string;
            '1373': string;
            '1374': string;
            '1375': string;
            '1376': string;
            '1377': string;
            '1378': string;
            '1379': string;
            '1380': string;
            '1381': string;
            '1382': string;
            '1383': string;
            '1384': string;
            '1385': string;
            '1386': string;
            '1387': string;
            '1388': string;
            '1389': string;
            '1390': string;
            '1391': string;
            '1392': string;
            '1393': string;
            '1394': string;
            '1395': string;
            '1396': string;
            '1397': string;
            '1398': string;
            '1399': string;
            '1400': string;
            '1401': string;
            '1402': string;
            '1403': string;
            '1404': string;
            '1405': string;
            '1406': string;
            '1407': string;
            '1408': string;
            '1409': string;
            '1410': string;
            '1411': string;
            '1412': string;
            '1413': string;
            '1414': string;
            '1415': string;
            '1416': string;
            '1417': string;
            '1418': string;
            '1419': string;
            '1420': string;
            '1421': string;
            '1422': string;
            '1423': string;
            '1424': string;
            '1425': string;
            '1426': string;
            '1427': string;
            '1428': string;
            '1429': string;
            '1430': string;
            '1431': string;
            '1432': string;
            '1433': string;
            '1434': string;
            '1435': string;
            '1436': string;
            '1437': string;
            '1438': string;
            '1439': string;
            '1440': string;
            '1441': string;
            '1442': string;
            '1443': string;
            '1444': string;
            '1445': string;
            '1446': string;
            '1447': string;
            '1448': string;
            '1449': string;
            '1450': string;
            '1451': string;
            '1452': string;
            '1453': string;
            '1454': string;
            '1455': string;
            '1456': string;
            '1457': string;
            '1458': string;
            '1459': string;
            '1460': string;
            '1461': string;
            '1462': string;
            '1463': string;
            '1464': string;
            '1465': string;
            '1466': string;
            '1467': string;
            '1468': string;
            '1469': string;
            '1470': string;
            '1471': string;
            '1472': string;
            '1473': string;
            '1474': string;
            '1475': string;
            '1476': string;
            '1477': string;
            '1478': string;
            '1479': string;
            '1480': string;
            '1481': string;
            '1482': string;
            '1483': string;
            '1484': string;
            '1485': string;
            '1486': string;
            '1487': string;
            '1488': string;
            '1489': string;
            '1490': string;
            '1491': string;
            '1492': string;
            '1493': string;
            '1494': string;
            '1495': string;
            '1496': string;
            '1497': string;
            '1498': string;
            '1499': string;
            '1500': string;
            '1501': string;
            '1502': string;
            '1503': string;
            '1504': string;
            '1505': string;
            '1506': string;
            '1507': string;
            '1508': string;
            '1509': string;
            '1510': string;
            '1511': string;
            '1512': string;
            '1513': string;
            '1514': string;
            '1515': string;
            '1516': string;
            '1517': string;
            '1518': string;
            '1519': string;
            '1520': string;
            '1521': string;
            '1522': string;
            '1523': string;
            '1524': string;
            '1525': string;
            '1526': string;
            '1527': string;
            '1528': string;
            '1529': string;
            '1530': string;
            '1531': string;
            '1532': string;
            '1533': string;
            '1534': string;
            '1535': string;
            '1536': string;
            '1537': string;
            '1538': string;
            '1539': string;
            '1540': string;
            '1541': string;
            '1542': string;
            '1543': string;
            '1544': string;
            '1545': string;
            '1546': string;
            '1547': string;
            '1548': string;
            '1549': string;
            '1550': string;
            '1551': string;
            '1552': string;
            '1553': string;
            '1554': string;
            '1555': string;
            '1556': string;
            '1557': string;
            '1558': string;
            '1559': string;
            '1560': string;
            '1561': string;
            '1562': string;
            '1563': string;
            '1564': string;
            '1565': string;
            '1566': string;
            '1567': string;
            '1568': string;
            '1569': string;
            '1570': string;
            '1571': string;
            '1572': string;
            '1573': string;
            '1574': string;
            '1575': string;
            '1576': string;
            '1577': string;
            '1578': string;
            '1579': string;
            '1580': string;
            '1581': string;
            '1582': string;
            '1583': string;
            '1584': string;
            '1585': string;
            '1586': string;
            '1587': string;
            '1588': string;
            '1589': string;
            '1590': string;
            '1591': string;
            '1592': string;
            '1593': string;
            '1594': string;
            '1595': string;
            '1596': string;
            '1597': string;
            '1598': string;
            '1599': string;
            '1600': string;
            '1601': string;
            '1602': string;
            '1603': string;
            '1604': string;
            '1605': string;
            '1606': string;
            '1607': string;
            '1608': string;
            '1609': string;
            '1610': string;
            '1611': string;
            '1612': string;
            '1613': string;
            '1614': string;
            '1615': string;
            '1616': string;
            '1617': string;
            '1618': string;
            '1619': string;
            '1620': string;
            '1621': string;
            '1622': string;
            '1623': string;
            '1624': string;
            '1625': string;
            '1626': string;
            '1627': string;
            '1628': string;
            '1629': string;
            '1630': string;
            '1631': string;
            '1632': string;
            '1633': string;
            '1634': string;
            '1635': string;
            '1636': string;
            '1637': string;
            '1638': string;
            '1639': string;
            '1640': string;
            '1641': string;
            '1642': string;
            '1643': string;
            '1644': string;
            '1645': string;
            '1646': string;
            '1647': string;
            '1648': string;
            '1649': string;
            '1650': string;
            '1651': string;
            '1652': string;
            '1653': string;
            '1654': string;
            '1655': string;
            '1656': string;
            '1657': string;
            '1658': string;
            '1659': string;
            '1660': string;
            '1661': string;
            '1662': string;
            '1663': string;
            '1664': string;
            '1665': string;
            '1666': string;
            '1667': string;
            '1668': string;
            '1669': string;
            '1670': string;
            '1671': string;
            '1672': string;
            '1673': string;
            '1674': string;
            '1675'?: string;
            '1676'?: string;
            '1677'?: string;
            '1678'?: string;
            '1679'?: string;
            '1680'?: string;
            '1681'?: string;
            '1682'?: string;
            '1683'?: string;
            '1684'?: string;
            '1685'?: string;
            '1686'?: string;
            '1687'?: string;
            '1688'?: string;
            '1689'?: string;
            '1690'?: string;
            '1691'?: string;
            '1692'?: string;
            '1693'?: string;
            '1694'?: string;
            '1695'?: string;
            '1696'?: string;
            '1697'?: string;
            '1698'?: string;
            '1699'?: string;
            '1700'?: string;
            '1701'?: string;
            '1702'?: string;
            '1703'?: string;
            '1704'?: string;
            '1705'?: string;
            '1706'?: string;
            '1707'?: string;
            '1708'?: string;
            '1709'?: string;
            '1710'?: string;
            '1711'?: string;
            '1712'?: string;
            '1713'?: string;
            '1714'?: string;
            '1715'?: string;
            '1716'?: string;
            '1717'?: string;
            '1718'?: string;
            '1719'?: string;
            '1720'?: string;
            '1721'?: string;
            '1722'?: string;
            '1723'?: string;
            '1724'?: string;
            '1725'?: string;
            '1726'?: string;
            '1727'?: string;
            '1728'?: string;
            '1729'?: string;
            '1730'?: string;
            '1731'?: string;
            '1732'?: string;
            '1733'?: string;
            '1734'?: string;
            '1735'?: string;
            '1736'?: string;
            '1737'?: string;
            '1738'?: string;
            '1739'?: string;
            '1740'?: string;
            '1741'?: string;
            '1742'?: string;
            '1743'?: string;
            '1744'?: string;
            '1745'?: string;
            '1746'?: string;
            '1747'?: string;
            '1748'?: string;
            '1749'?: string;
            '1750'?: string;
            '1751'?: string;
            '1752'?: string;
            '1753'?: string;
            '1754'?: string;
            '1755'?: string;
            '1756'?: string;
            '1757'?: string;
            '1758'?: string;
            '1759'?: string;
            '1760'?: string;
            '1761'?: string;
            '1762'?: string;
            '1763'?: string;
            '1764'?: string;
            '1765'?: string;
            '1766'?: string;
            '1767'?: string;
            '1768'?: string;
            '1769'?: string;
            '1770'?: string;
            '1771'?: string;
            '1772'?: string;
            '1773'?: string;
            '1774'?: string;
            '1775'?: string;
            '1776'?: string;
            '1777'?: string;
            '1778'?: string;
            '1779'?: string;
            '1780'?: string;
            '1781'?: string;
            '1782'?: string;
            '1783'?: string;
            '1784'?: string;
            '1785'?: string;
            '1786'?: string;
            '1787'?: string;
            '1788'?: string;
            '1789'?: string;
            '1790'?: string;
            '1791'?: string;
            '1792'?: string;
            '1793'?: string;
            '1794'?: string;
            '1795'?: string;
            '1796'?: string;
            '1797'?: string;
            '1798'?: string;
            '1799'?: string;
            '1800'?: string;
            '1801'?: string;
            '1802'?: string;
            '1803'?: string;
            '1804'?: string;
            '1805'?: string;
            '1806'?: string;
            '1807'?: string;
            '1808'?: string;
            '1809'?: string;
            '1810'?: string;
            '1811'?: string;
            '1812'?: string;
            '1813'?: string;
            '1814'?: string;
            '1815'?: string;
            '1816'?: string;
            '1817'?: string;
            '1818'?: string;
            '1819'?: string;
            '1820'?: string;
            '1821'?: string;
            '1822'?: string;
            '1823'?: string;
            '1824'?: string;
            '1825'?: string;
            '1826'?: string;
            '1827'?: string;
            '1828'?: string;
            '1829'?: string;
            '1830'?: string;
            '1831'?: string;
            '1832'?: string;
            '1833'?: string;
            '1834'?: string;
            '1835'?: string;
            '1836'?: string;
            '1837'?: string;
            '1838'?: string;
            '1839'?: string;
            '1840'?: string;
            '1841'?: string;
            '1842'?: string;
            '1843'?: string;
            '1844'?: string;
            '1845'?: string;
            '1846'?: string;
            '1847'?: string;
            '1848'?: string;
            '1849'?: string;
            '1850'?: string;
            '1851'?: string;
            '1852'?: string;
            '1853'?: string;
            '1854'?: string;
            '1855'?: string;
            '1856'?: string;
            '1857'?: string;
            '1858'?: string;
            '1859'?: string;
            '1860'?: string;
            '1861'?: string;
            '1862'?: string;
            '1863'?: string;
            '1864'?: string;
            '1865'?: string;
            '1866'?: string;
            '1867'?: string;
            '1868'?: string;
            '1869'?: string;
            '1870'?: string;
            '1871'?: string;
            '1872'?: string;
            '1873'?: string;
            '1874'?: string;
            '1875'?: string;
            '1876'?: string;
            '1877'?: string;
            '1878'?: string;
            '1879'?: string;
            '1880'?: string;
            '1881'?: string;
            '1882'?: string;
            '1883'?: string;
            '1884'?: string;
            '1885'?: string;
            '1886'?: string;
            '1887'?: string;
            '1888'?: string;
            '1889'?: string;
            '1890'?: string;
            '1891'?: string;
            '1892'?: string;
            '1893'?: string;
            '1894'?: string;
            '1895'?: string;
            '1896'?: string;
            '1897'?: string;
            '1898'?: string;
            '1899'?: string;
            '1900'?: string;
            '1901'?: string;
            '1902'?: string;
            '1903'?: string;
            '1904'?: string;
            '1905'?: string;
            '1906'?: string;
            '1907'?: string;
            '1908'?: string;
            '1909'?: string;
            '1910'?: string;
            '1911'?: string;
            '1912'?: string;
            '1913'?: string;
            '1914'?: string;
            '1915'?: string;
            '1916'?: string;
            '1917'?: string;
            '1918'?: string;
            '1919'?: string;
            '1920'?: string;
            '1921'?: string;
            '1922'?: string;
            '1923'?: string;
            '1924'?: string;
            '1925'?: string;
            '1926'?: string;
            '1927'?: string;
            '1928'?: string;
            '1929'?: string;
            '1930'?: string;
            '1931'?: string;
            '1932'?: string;
            '1933'?: string;
            '1934'?: string;
            '1935'?: string;
            '1936'?: string;
            '1937'?: string;
            '1938'?: string;
            '1939'?: string;
            '1940'?: string;
            '1941'?: string;
            '1942'?: string;
            '1943'?: string;
            '1944'?: string;
            '1945'?: string;
            '1946'?: string;
            '1947'?: string;
            '1948'?: string;
            '1949'?: string;
            '1950'?: string;
            '1951'?: string;
            '1952'?: string;
            '1953'?: string;
            '1954'?: string;
            '1955'?: string;
            '1956'?: string;
            '1957'?: string;
            '1958'?: string;
            '1959'?: string;
            '1960'?: string;
            '1961'?: string;
            '1962'?: string;
            '1963'?: string;
            '1964'?: string;
            '1965'?: string;
            '1966'?: string;
            '1967'?: string;
            '1968'?: string;
            '1969'?: string;
            '1970'?: string;
            '1971'?: string;
            '1972'?: string;
            '1973'?: string;
            '1974'?: string;
            '1975'?: string;
            '1976'?: string;
            '1977'?: string;
            '1978'?: string;
            '1979'?: string;
            '1980'?: string;
            '1981'?: string;
            '1982'?: string;
            '1983'?: string;
            '1984'?: string;
            '1985'?: string;
            '1986'?: string;
            '1987'?: string;
            '1988'?: string;
            '1989'?: string;
            '1990'?: string;
            '1991'?: string;
            '1992'?: string;
            '1993'?: string;
            '1994'?: string;
            '1995'?: string;
            '1996'?: string;
            '1997'?: string;
            '1998'?: string;
            '1999'?: string;
            '2000'?: string;
            '2001'?: string;
            '2002'?: string;
            '2003'?: string;
            '2004'?: string;
            '2005'?: string;
            '2006'?: string;
            '2007'?: string;
            '2008'?: string;
            '2009'?: string;
            '2010'?: string;
            '2011'?: string;
            '2012'?: string;
            '2013'?: string;
            '2014'?: string;
            '2015'?: string;
            '2016'?: string;
            '2017'?: string;
            '2018'?: string;
            '2019'?: string;
            '2020'?: string;
            '2021'?: string;
            '2022'?: string;
            '2023'?: string;
            '2024'?: string;
            '2025'?: string;
            '2026'?: string;
            '2027'?: string;
            '2028'?: string;
            '2029'?: string;
            '2030'?: string;
            '2031'?: string;
            '2032'?: string;
            '2033'?: string;
            '2034'?: string;
            '2035'?: string;
            '2036'?: string;
            '2037'?: string;
            '2038'?: string;
            '2039'?: string;
            '2040'?: string;
            '2041'?: string;
            '2042'?: string;
            '2043'?: string;
            '2044'?: string;
            '2045'?: string;
            '2046'?: string;
            '2047'?: string;
            '2048'?: string;
            '2049'?: string;
            '2050'?: string;
            '2051'?: string;
            '2052'?: string;
            '2053'?: string;
            '2054'?: string;
            '2055'?: string;
            '2056'?: string;
            '2057'?: string;
            '2058'?: string;
            '2059'?: string;
            '2060'?: string;
            '2061'?: string;
            '2062'?: string;
            '2063'?: string;
            '2064'?: string;
            '2065'?: string;
            '2066'?: string;
            '2067'?: string;
            '2068'?: string;
            '2069'?: string;
            '2070'?: string;
            '2071'?: string;
            '2072'?: string;
            '2073'?: string;
            '2074'?: string;
            '2075'?: string;
            '2076'?: string;
            '2077'?: string;
            '2078'?: string;
            '2079'?: string;
            '2080'?: string;
            '2081'?: string;
            '2082'?: string;
            '2083'?: string;
            '2084'?: string;
            '2085'?: string;
            '2086'?: string;
            '2087'?: string;
            '2088'?: string;
            '2089'?: string;
            '2090'?: string;
            '2091'?: string;
            '2092'?: string;
            '2093'?: string;
            '2094'?: string;
            '2095'?: string;
            '2096'?: string;
            '2097'?: string;
            '2098'?: string;
            '2099'?: string;
            '2100'?: string;
            '2101'?: string;
            '2102'?: string;
            '2103'?: string;
            '2104'?: string;
            '2105'?: string;
            '2106'?: {
            
            };
            '2107'?: {
            
            };
            '2108'?: {
            
            };
            '2109'?: {
            
            };
            '2110'?: {
            
            };
            '2111'?: {
            
            };
            '2112'?: {
            
            };
            '2113'?: {
            
            };
            '2114'?: {
            
            };
            '2115'?: {
            
            };
            '2116'?: {
            
            };
            '2117'?: {
            
            };
            '2118'?: {
            
            };
            '2119'?: {
            
            };
            '2120'?: {
            
            };
            '2121'?: {
            
            };
            '2122'?: {
            
            };
            '2123'?: {
            
            };
            '2124'?: {
            
            };
            '2125'?: {
            
            };
            '2126'?: {
            
            };
            '2127'?: {
            
            };
            '2128'?: {
            
            };
            '2129'?: {
            
            };
            '2130'?: {
            
            };
            '2131'?: {
            
            };
            '2132'?: {
            
            };
            '2133'?: {
            
            };
            '2134'?: {
            
            };
            '2135'?: {
            
            };
            '2136'?: {
            
            };
            '2137'?: {
            
            };
            '2138'?: {
            
            };
            '2139'?: {
            
            };
            '2140'?: {
            
            };
            '2141'?: {
            
            };
            '2142'?: {
            
            };
            '2143'?: {
            
            };
            '2144'?: {
            
            };
            '2145'?: {
            
            };
            '2146'?: {
            
            };
            '2147'?: {
            
            };
            '2148'?: {
            
            };
            '2149'?: {
            
            };
            '2150'?: {
            
            };
            '2151'?: {
            
            };
            '2152'?: {
            
            };
            '2153'?: {
            
            };
            '2154'?: {
            
            };
            '2155'?: {
            
            };
            '2156'?: {
            
            };
            '2157'?: {
            
            };
            '2158'?: {
            
            };
            '2159'?: {
            
            };
            '2160'?: {
            
            };
            '2161'?: {
            
            };
            '2162'?: {
            
            };
            '2163'?: {
            
            };
            '2164'?: {
            
            };
            '2165'?: {
            
            };
            '2166'?: {
            
            };
            '2167'?: {
            
            };
            '2168'?: {
            
            };
            '2169'?: {
            
            };
            '2170'?: {
            
            };
            '2171'?: {
            
            };
            '2172'?: {
            
            };
            '2173'?: {
            
            };
            '2174'?: {
            
            };
            '2175'?: {
            
            };
            '2176'?: {
            
            };
            '2177'?: {
            
            };
            '2178'?: {
            
            };
            '2179'?: {
            
            };
            '2180'?: {
            
            };
            '2181'?: {
            
            };
            '2182'?: {
            
            };
            '2183'?: {
            
            };
            '2184'?: {
            
            };
            '2185'?: {
            
            };
            '2186'?: {
            
            };
            '2187'?: {
            
            };
            '2188'?: {
            
            };
            '2189'?: {
            
            };
            '2190'?: {
            
            };
            '2191'?: {
            
            };
            '2192'?: {
            
            };
            '2193'?: {
            
            };
            '2194'?: {
            
            };
            '2195'?: {
            
            };
            '2196'?: {
            
            };
            '2197'?: {
            
            };
            '2198'?: {
            
            };
            '2199'?: {
            
            };
            '2200'?: {
            
            };
            '2201'?: {
            
            };
            '2202'?: {
            
            };
            '2203'?: {
            
            };
            '2204'?: {
            
            };
            '2205'?: {
            
            };
            '2206'?: {
            
            };
            '2207'?: {
            
            };
            '2208'?: {
            
            };
            '2209'?: {
            
            };
            '2210'?: {
            
            };
            '2211'?: {
            
            };
            '2212'?: {
            
            };
            '2213'?: {
            
            };
            '2214'?: {
            
            };
            '2215'?: {
            
            };
            '2216'?: {
            
            };
            '2217'?: {
            
            };
            '2218'?: {
            
            };
            '2219'?: {
            
            };
            '2220'?: {
            
            };
            '2221'?: {
            
            };
            '2222'?: {
            
            };
            '2223'?: {
            
            };
            '2224'?: {
            
            };
            '2225'?: {
            
            };
            '2226'?: {
            
            };
            '2227'?: {
            
            };
            '2228'?: {
            
            };
            '2229'?: {
            
            };
            '2230'?: {
            
            };
            '2231'?: {
            
            };
            '2232'?: {
            
            };
            '2233'?: {
            
            };
            '2234'?: {
            
            };
            '2235'?: {
            
            };
            '2236'?: {
            
            };
            '2237'?: {
            
            };
            '2238'?: {
            
            };
            '2239'?: {
            
            };
            '2240'?: {
            
            };
            '2241'?: {
            
            };
            '2242'?: {
            
            };
            '2243'?: {
            
            };
            '2244'?: {
            
            };
            '2245'?: {
            
            };
            '2246'?: {
            
            };
            '2247'?: {
            
            };
            '2248'?: {
            
            };
            '2249'?: {
            
            };
            '2250'?: {
            
            };
            '2251'?: {
            
            };
            '2252'?: {
            
            };
            '2253'?: {
            
            };
            '2254'?: {
            
            };
            '2255'?: {
            
            };
            '2256'?: {
            
            };
            '2257'?: {
            
            };
            '2258'?: {
            
            };
            '2259'?: {
            
            };
            '2260'?: {
            
            };
            '2261'?: {
            
            };
            '2262'?: {
            
            };
            '2263'?: {
            
            };
            '2264'?: {
            
            };
            '2265'?: {
            
            };
            '2266'?: {
            
            };
            '2267'?: {
            
            };
            '2268'?: {
            
            };
            '2269'?: {
            
            };
            '2270'?: {
            
            };
            '2271'?: {
            
            };
            '2272'?: {
            
            };
            '2273'?: {
            
            };
            '2274'?: {
            
            };
            '2275'?: {
            
            };
            '2276'?: {
            
            };
            '2277'?: {
            
            };
            '2278'?: {
            
            };
            '2279'?: {
            
            };
            '2280'?: {
            
            };
            '2281'?: {
            
            };
            '2282'?: {
            
            };
            '2283'?: {
            
            };
            '2284'?: {
            
            };
            '2285'?: {
            
            };
            '2286'?: {
            
            };
            '2287'?: {
            
            };
            '2288'?: {
            
            };
            '2289'?: {
            
            };
            '2290'?: {
            
            };
            '2291'?: {
            
            };
            '2292'?: {
            
            };
            '2293'?: {
            
            };
            '2294'?: {
            
            };
            '2295'?: {
            
            };
            '2296'?: {
            
            };
            '2297'?: {
            
            };
            '2298'?: {
            
            };
            '2299'?: {
            
            };
            '2300'?: {
            
            };
            '2301'?: {
            
            };
            '2302'?: {
            
            };
            '2303'?: {
            
            };
            '2304'?: {
            
            };
            '2305'?: {
            
            };
            '2306'?: {
            
            };
            '2307'?: {
            
            };
            '2308'?: {
            
            };
            '2309'?: {
            
            };
            '2310'?: {
            
            };
            '2311'?: {
            
            };
            '2312'?: {
            
            };
            '2313'?: {
            
            };
            '2314'?: {
            
            };
            '2315'?: {
            
            };
            '2316'?: {
            
            };
            '2317'?: {
            
            };
            '2318'?: {
            
            };
            '2319'?: {
            
            };
            '2320'?: {
            
            };
            '2321'?: {
            
            };
            '2322'?: {
            
            };
            '2323'?: {
            
            };
            '2324'?: {
            
            };
            '2325'?: {
            
            };
            '2326'?: {
            
            };
            '2327'?: {
            
            };
            '2328'?: {
            
            };
            '2329'?: {
            
            };
            '2330'?: {
            
            };
            '2331'?: {
            
            };
            '2332'?: {
            
            };
            '2333'?: {
            
            };
            '2334'?: {
            
            };
            '2335'?: {
            
            };
            '2336'?: {
            
            };
            '2337'?: {
            
            };
            '2338'?: {
            
            };
            '2339'?: {
            
            };
            '2340'?: {
            
            };
            '2341'?: {
            
            };
            '2342'?: {
            
            };
            '2343'?: {
            
            };
            '2344'?: {
            
            };
            '2345'?: {
            
            };
            '2346'?: {
            
            };
            '2347'?: {
            
            };
            '2348'?: {
            
            };
            '2349'?: {
            
            };
            '2350'?: {
            
            };
            '2351'?: {
            
            };
            '2352'?: {
            
            };
            '2353'?: {
            
            };
            '2354'?: {
            
            };
            '2355'?: {
            
            };
            '2356'?: {
            
            };
            '2357'?: {
            
            };
            '2358'?: {
            
            };
            '2359'?: {
            
            };
            '2360'?: {
            
            };
            '2361'?: {
            
            };
            '2362'?: {
            
            };
            '2363'?: {
            
            };
            '2364'?: {
            
            };
            '2365'?: {
            
            };
            '2366'?: {
            
            };
            '2367'?: {
            
            };
            '2368'?: {
            
            };
            '2369'?: {
            
            };
            '2370'?: {
            
            };
            '2371'?: {
            
            };
            '2372'?: {
            
            };
            '2373'?: {
            
            };
            '2374'?: {
            
            };
            '2375'?: {
            
            };
            '2376'?: {
            
            };
            '2377'?: {
            
            };
            '2378'?: {
            
            };
            '2379'?: {
            
            };
            '2380'?: {
            
            };
            '2381'?: {
            
            };
            '2382'?: {
            
            };
            '2383'?: {
            
            };
            '2384'?: {
            
            };
            '2385'?: {
            
            };
            '2386'?: {
            
            };
            '2387'?: {
            
            };
            '2388'?: {
            
            };
            '2389'?: {
            
            };
            '2390'?: {
            
            };
            '2391'?: {
            
            };
            '2392'?: {
            
            };
            '2393'?: {
            
            };
            '2394'?: {
            
            };
            '2395'?: {
            
            };
            '2396'?: {
            
            };
            '2397'?: {
            
            };
            '2398'?: {
            
            };
            '2399'?: {
            
            };
            '2400'?: {
            
            };
            '2401'?: {
            
            };
            '2402'?: {
            
            };
            '2403'?: {
            
            };
            '2404'?: {
            
            };
            '2405'?: {
            
            };
            '2406'?: {
            
            };
            '2407'?: {
            
            };
            '2408'?: {
            
            };
            '2409'?: {
            
            };
            '2410'?: {
            
            };
            '2411'?: {
            
            };
            '2412'?: {
            
            };
            '2413'?: {
            
            };
            '2414'?: {
            
            };
            '2415'?: {
            
            };
            '2416'?: {
            
            };
            '2417'?: {
            
            };
            '2418'?: {
            
            };
            '2419'?: {
            
            };
            '2420'?: {
            
            };
            '2421'?: {
            
            };
            '2422'?: {
            
            };
            '2423'?: {
            
            };
            '2424'?: {
            
            };
            '2425'?: {
            
            };
            '2426'?: {
            
            };
            '2427'?: {
            
            };
            '2428'?: {
            
            };
            '2429'?: {
            
            };
            '2430'?: {
            
            };
            '2431'?: {
            
            };
            '2432'?: {
            
            };
            '2433'?: {
            
            };
            '2434'?: {
            
            };
            '2435'?: {
            
            };
            '2436'?: {
            
            };
            '2437'?: {
            
            };
            '2438'?: {
            
            };
            '2439'?: {
            
            };
            '2440'?: {
            
            };
            '2441'?: {
            
            };
            '2442'?: {
            
            };
            '2443'?: {
            
            };
            '2444'?: {
            
            };
            '2445'?: {
            
            };
            '2446'?: {
            
            };
            '2447'?: {
            
            };
            '2448'?: {
            
            };
            '2449'?: {
            
            };
            '2450'?: {
            
            };
            '2451'?: {
            
            };
            '2452'?: {
            
            };
            '2453'?: {
            
            };
            '2454'?: {
            
            };
            '2455'?: {
            
            };
            '2456'?: {
            
            };
            '2457'?: {
            
            };
            '2458'?: {
            
            };
            '2459'?: {
            
            };
            '2460'?: {
            
            };
            '2461'?: {
            
            };
            '2462'?: {
            
            };
            '2463'?: {
            
            };
            '2464'?: {
            
            };
            '2465'?: {
            
            };
            '2466'?: {
            
            };
            '2467'?: {
            
            };
            '2468'?: {
            
            };
            '2469'?: {
            
            };
            '2470'?: {
            
            };
            '2471'?: {
            
            };
            '2472'?: {
            
            };
            '2473'?: {
            
            };
            '2474'?: {
            
            };
            '2475'?: {
            
            };
            '2476'?: {
            
            };
            '2477'?: {
            
            };
            '2478'?: {
            
            };
            '2479'?: {
            
            };
            '2480'?: {
            
            };
            '2481'?: {
            
            };
            '2482'?: {
            
            };
            '2483'?: {
            
            };
            '2484'?: {
            
            };
            '2485'?: {
            
            };
            '2486'?: {
            
            };
            '2487'?: {
            
            };
            '2488'?: {
            
            };
            '2489'?: {
            
            };
            '2490'?: {
            
            };
            '2491'?: {
            
            };
            '2492'?: {
            
            };
            '2493'?: {
            
            };
            '2494'?: {
            
            };
            '2495'?: {
            
            };
            '2496'?: {
            
            };
            '2497'?: {
            
            };
            '2498'?: {
            
            };
            '2499'?: {
            
            };
            '2500'?: {
            
            };
            '2501'?: {
            
            };
            '2502'?: {
            
            };
            '2503'?: {
            
            };
            '2504'?: {
            
            };
            '2505'?: {
            
            };
            '2506'?: {
            
            };
            '2507'?: {
            
            };
            '2508'?: {
            
            };
            '2509'?: {
            
            };
            '2510'?: {
            
            };
            '2511'?: {
            
            };
            '2512'?: {
            
            };
            '2513'?: {
            
            };
            '2514'?: {
            
            };
            '2515'?: {
            
            };
            '2516'?: {
            
            };
            '2517'?: {
            
            };
            '2518'?: {
            
            };
            '2519'?: {
            
            };
            '2520'?: {
            
            };
            '2521'?: {
            
            };
            '2522'?: {
            
            };
            '2523'?: {
            
            };
            '2524'?: {
            
            };
            '2525'?: {
            
            };
            '2526'?: {
            
            };
            '2527'?: {
            
            };
            '2528'?: {
            
            };
            '2529'?: {
            
            };
            '2530'?: {
            
            };
            '2531'?: {
            
            };
            '2532'?: {
            
            };
            '2533'?: {
            
            };
            '2534'?: {
            
            };
            '2535'?: {
            
            };
            '2536'?: {
            
            };
            '2537'?: {
            
            };
            '2538'?: {
            
            };
            '2539'?: {
            
            };
            '2540'?: {
            
            };
            '2541'?: {
            
            };
            '2542'?: {
            
            };
            '2543'?: {
            
            };
            '2544'?: {
            
            };
            '2545'?: {
            
            };
            '2546'?: {
            
            };
            '2547'?: {
            
            };
            '2548'?: {
            
            };
            '2549'?: {
            
            };
            '2550'?: {
            
            };
            '2551'?: {
            
            };
            '2552'?: {
            
            };
            '2553'?: {
            
            };
            '2554'?: {
            
            };
            '2555'?: {
            
            };
            '2556'?: {
            
            };
            '2557'?: {
            
            };
            '2558'?: {
            
            };
            '2559'?: {
            
            };
            '2560'?: {
            
            };
            '2561'?: {
            
            };
            '2562'?: {
            
            };
            '2563'?: {
            
            };
            '2564'?: {
            
            };
            '2565'?: {
            
            };
            '2566'?: {
            
            };
            '2567'?: {
            
            };
            '2568'?: {
            
            };
            '2569'?: {
            
            };
            '2570'?: {
            
            };
            '2571'?: {
            
            };
            '2572'?: {
            
            };
            '2573'?: {
            
            };
            '2574'?: {
            
            };
            '2575'?: {
            
            };
            '2576'?: {
            
            };
            '2577'?: {
            
            };
            '2578'?: {
            
            };
            '2579'?: {
            
            };
            '2580'?: {
            
            };
            '2581'?: {
            
            };
            '2582'?: {
            
            };
            '2583'?: {
            
            };
            '2584'?: {
            
            };
            '2585'?: {
            
            };
            '2586'?: {
            
            };
            '2587'?: {
            
            };
            '2588'?: {
            
            };
            '2589'?: {
            
            };
            '2590'?: {
            
            };
            '2591'?: {
            
            };
            '2592'?: {
            
            };
            '2593'?: {
            
            };
            '2594'?: {
            
            };
            '2595'?: {
            
            };
            '2596'?: {
            
            };
            '2597'?: {
            
            };
            '2598'?: {
            
            };
            '2599'?: {
            
            };
            '2600'?: {
            
            };
            '2601'?: {
            
            };
            '2602'?: {
            
            };
            '2603'?: {
            
            };
            '2604'?: {
            
            };
            '2605'?: {
            
            };
            '2606'?: {
            
            };
            '2607'?: {
            
            };
            '2608'?: {
            
            };
            '2609'?: {
            
            };
            '2610'?: {
            
            };
            '2611'?: {
            
            };
            '2612'?: {
            
            };
            '2613'?: {
            
            };
            '2614'?: {
            
            };
            '2615'?: {
            
            };
            '2616'?: {
            
            };
            '2617'?: {
            
            };
            '2618'?: {
            
            };
            '2619'?: {
            
            };
            '2620'?: {
            
            };
            '2621'?: {
            
            };
            '2622'?: {
            
            };
            '2623'?: {
            
            };
            '2624'?: {
            
            };
            '2625'?: {
            
            };
            '2626'?: {
            
            };
            '2627'?: {
            
            };
            '2628'?: {
            
            };
            '2629'?: {
            
            };
            '2630'?: {
            
            };
            '2631'?: {
            
            };
            '2632'?: {
            
            };
            '2633'?: {
            
            };
            '2634'?: {
            
            };
            '2635'?: {
            
            };
            '2636'?: {
            
            };
            '2637'?: {
            
            };
            '2638'?: {
            
            };
            '2639'?: {
            
            };
            '2640'?: {
            
            };
            '2641'?: {
            
            };
            '2642'?: {
            
            };
            '2643'?: {
            
            };
            '2644'?: {
            
            };
            '2645'?: {
            
            };
            '2646'?: {
            
            };
            '2647'?: {
            
            };
            '2648'?: {
            
            };
            '2649'?: {
            
            };
            '2650'?: {
            
            };
            '2651'?: {
            
            };
            '2652'?: {
            
            };
            '2653'?: {
            
            };
            '2654'?: {
            
            };
            '2655'?: {
            
            };
            '2656'?: {
            
            };
            '2657'?: {
            
            };
            '2658'?: {
            
            };
            '2659'?: {
            
            };
            '2660'?: {
            
            };
            '2661'?: {
            
            };
            '2662'?: {
            
            };
            '2663'?: {
            
            };
            '2664'?: {
            
            };
            '2665'?: {
            
            };
            '2666'?: {
            
            };
            '2667'?: {
            
            };
            '2668'?: {
            
            };
            '2669'?: {
            
            };
            '2670'?: {
            
            };
            '2671'?: {
            
            };
            '2672'?: {
            
            };
            '2673'?: {
            
            };
            '2674'?: {
            
            };
            '2675'?: {
            
            };
            '2676'?: {
            
            };
            '2677'?: {
            
            };
            '2678'?: {
            
            };
            '2679'?: {
            
            };
            '2680'?: {
            
            };
            '2681'?: {
            
            };
            '2682'?: {
            
            };
            '2683'?: {
            
            };
            '2684'?: {
            
            };
            '2685'?: {
            
            };
            '2686'?: {
            
            };
            '2687'?: {
            
            };
            '2688'?: {
            
            };
            '2689'?: {
            
            };
            '2690'?: {
            
            };
            '2691'?: {
            
            };
            '2692'?: {
            
            };
            '2693'?: {
            
            };
            '2694'?: {
            
            };
            '2695'?: {
            
            };
            '2696'?: {
            
            };
            '2697'?: {
            
            };
            '2698'?: {
            
            };
            '2699'?: {
            
            };
            '2700'?: {
            
            };
            '2701'?: {
            
            };
            '2702'?: {
            
            };
            '2703'?: {
            
            };
            '2704'?: {
            
            };
            '2705'?: {
            
            };
            '2706'?: {
            
            };
            '2707'?: {
            
            };
            '2708'?: {
            
            };
            '2709'?: {
            
            };
            '2710'?: {
            
            };
            '2711'?: {
            
            };
            '2712'?: {
            
            };
            '2713'?: {
            
            };
            '2714'?: {
            
            };
            '2715'?: {
            
            };
            '2716'?: {
            
            };
            '2717'?: {
            
            };
            '2718'?: {
            
            };
            '2719'?: {
            
            };
            '2720'?: {
            
            };
            '2721'?: {
            
            };
            '2722'?: {
            
            };
            '2723'?: {
            
            };
            '2724'?: {
            
            };
            '2725'?: {
            
            };
            '2726'?: {
            
            };
            '2727'?: {
            
            };
            '2728'?: {
            
            };
            '2729'?: {
            
            };
            '2730'?: {
            
            };
            '2731'?: {
            
            };
            '2732'?: {
            
            };
            '2733'?: {
            
            };
            '2734'?: {
            
            };
            '2735'?: {
            
            };
            '2736'?: {
            
            };
            '2737'?: {
            
            };
            '2738'?: {
            
            };
            '2739'?: {
            
            };
            '2740'?: {
            
            };
            '2741'?: {
            
            };
            '2742'?: {
            
            };
            '2743'?: {
            
            };
            '2744'?: {
            
            };
            '2745'?: {
            
            };
            '2746'?: {
            
            };
            '2747'?: {
            
            };
            '2748'?: {
            
            };
            '2749'?: {
            
            };
            '2750'?: {
            
            };
            '2751'?: {
            
            };
            '2752'?: {
            
            };
            '2753'?: {
            
            };
            '2754'?: {
            
            };
            '2755'?: {
            
            };
            '2756'?: {
            
            };
            '2757'?: {
            
            };
            '2758'?: {
            
            };
            '2759'?: {
            
            };
            '2760'?: {
            
            };
            '2761'?: {
            
            };
            '2762'?: {
            
            };
            '2763'?: {
            
            };
            '2764'?: {
            
            };
            '2765'?: {
            
            };
            '2766'?: {
            
            };
            '2767'?: {
            
            };
            '2768'?: {
            
            };
            '2769'?: {
            
            };
            '2770'?: {
            
            };
            '2771'?: {
            
            };
            '2772'?: {
            
            };
            '2773'?: {
            
            };
            '2774'?: {
            
            };
            '2775'?: {
            
            };
            '2776'?: {
            
            };
            '2777'?: {
            
            };
            '2778'?: {
            
            };
            '2779'?: {
            
            };
            '2780'?: {
            
            };
            '2781'?: {
            
            };
            '2782'?: {
            
            };
            '2783'?: {
            
            };
            '2784'?: {
            
            };
            '2785'?: {
            
            };
            '2786'?: {
            
            };
            '2787'?: {
            
            };
            '2788'?: {
            
            };
            '2789'?: {
            
            };
            '2790'?: {
            
            };
            '2791'?: {
            
            };
            '2792'?: {
            
            };
            '2793'?: {
            
            };
            '2794'?: {
            
            };
            '2795'?: {
            
            };
            '2796'?: {
            
            };
            '2797'?: {
            
            };
            '2798'?: {
            
            };
            '2799'?: {
            
            };
            '2800'?: {
            
            };
            '2801'?: {
            
            };
            '2802'?: {
            
            };
            '2803'?: {
            
            };
            '2804'?: {
            
            };
            '2805'?: {
            
            };
            '2806'?: {
            
            };
            '2807'?: {
            
            };
            '2808'?: {
            
            };
            '2809'?: {
            
            };
            '2810'?: {
            
            };
            '2811'?: {
            
            };
            '2812'?: {
            
            };
            '2813'?: {
            
            };
            '2814'?: {
            
            };
            '2815'?: {
            
            };
            '2816'?: {
            
            };
            '2817'?: {
            
            };
            '2818'?: {
            
            };
            '2819'?: {
            
            };
            '2820'?: {
            
            };
            '2821'?: {
            
            };
            '2822'?: {
            
            };
            '2823'?: {
            
            };
            '2824'?: {
            
            };
            '2825'?: {
            
            };
            '2826'?: {
            
            };
            '2827'?: {
            
            };
            '2828'?: {
            
            };
            '2829'?: {
            
            };
            '2830'?: {
            
            };
            '2831'?: {
            
            };
            '2832'?: {
            
            };
            '2833'?: {
            
            };
            '2834'?: {
            
            };
            '2835'?: {
            
            };
            '2836'?: {
            
            };
            '2837'?: {
            
            };
            '2838'?: {
            
            };
            '2839'?: {
            
            };
            '2840'?: {
            
            };
            '2841'?: {
            
            };
            '2842'?: {
            
            };
            '2843'?: {
            
            };
            '2844'?: {
            
            };
            '2845'?: {
            
            };
            '2846'?: {
            
            };
            '2847'?: {
            
            };
            '2848'?: {
            
            };
            '2849'?: {
            
            };
            '2850'?: {
            
            };
            '2851'?: {
            
            };
            '2852'?: {
            
            };
            '2853'?: {
            
            };
            '2854'?: {
            
            };
            '2855'?: {
            
            };
            '2856'?: {
            
            };
            '2857'?: {
            
            };
            '2858'?: {
            
            };
            '2859'?: {
            
            };
            '2860'?: {
            
            };
            '2861'?: {
            
            };
            '2862'?: {
            
            };
            '2863'?: {
            
            };
            '2864'?: {
            
            };
            '2865'?: {
            
            };
            '2866'?: {
            
            };
            '2867'?: {
            
            };
            '2868'?: {
            
            };
            '2869'?: {
            
            };
            '2870'?: {
            
            };
            '2871'?: {
            
            };
            '2872'?: {
            
            };
            '2873'?: {
            
            };
            '2874'?: {
            
            };
            '2875'?: {
            
            };
            '2876'?: {
            
            };
            '2877'?: {
            
            };
            '2878'?: {
            
            };
            '2879'?: {
            
            };
            '2880'?: {
            
            };
            '2881'?: {
            
            };
            '2882'?: {
            
            };
            '2883'?: {
            
            };
            '2884'?: {
            
            };
            '2885'?: {
            
            };
            '2886'?: {
            
            };
            '2887'?: {
            
            };
            '2888'?: {
            
            };
            '2889'?: {
            
            };
            '2890'?: {
            
            };
            '2891'?: {
            
            };
            '2892'?: {
            
            };
            '2893'?: {
            
            };
            '2894'?: {
            
            };
            '2895'?: {
            
            };
            '2896'?: {
            
            };
            '2897'?: {
            
            };
            '2898'?: {
            
            };
            '2899'?: {
            
            };
            '2900'?: {
            
            };
            '2901'?: {
            
            };
            '2902'?: {
            
            };
            '2903'?: {
            
            };
            '2904'?: {
            
            };
            '2905'?: {
            
            };
            '2906'?: {
            
            };
            '2907'?: {
            
            };
            '2908'?: {
            
            };
            '2909'?: {
            
            };
            '2910'?: {
            
            };
            '2911'?: {
            
            };
            '2912'?: {
            
            };
            '2913'?: {
            
            };
            '2914'?: {
            
            };
            '2915'?: {
            
            };
            '2916'?: {
            
            };
            '2917'?: {
            
            };
            '2918'?: {
            
            };
            '2919'?: {
            
            };
            '2920'?: {
            
            };
            '2921'?: {
            
            };
            '2922'?: {
            
            };
            '2923'?: {
            
            };
            '2924'?: {
            
            };
            '2925'?: {
            
            };
            '2926'?: {
            
            };
            '2927'?: {
            
            };
            '2928'?: {
            
            };
            '2929'?: {
            
            };
            '2930'?: {
            
            };
            '2931'?: {
            
            };
            '2932'?: {
            
            };
            '2933'?: {
            
            };
            '2934'?: {
            
            };
            '2935'?: {
            
            };
            '2936'?: {
            
            };
            '2937'?: {
            
            };
            '2938'?: {
            
            };
            '2939'?: {
            
            };
            '2940'?: {
            
            };
            '2941'?: {
            
            };
            '2942'?: {
            
            };
            '2943'?: {
            
            };
            '2944'?: {
            
            };
            '2945'?: {
            
            };
            '2946'?: {
            
            };
            '2947'?: {
            
            };
            '2948'?: {
            
            };
            '2949'?: {
            
            };
            '2950'?: {
            
            };
            '2951'?: {
            
            };
            '2952'?: {
            
            };
            '2953'?: {
            
            };
            '2954'?: {
            
            };
            '2955'?: {
            
            };
            '2956'?: {
            
            };
            '2957'?: {
            
            };
            '2958'?: {
            
            };
            '2959'?: {
            
            };
            '2960'?: {
            
            };
            '2961'?: {
            
            };
            '2962'?: {
            
            };
            '2963'?: {
            
            };
            '2964'?: {
            
            };
            '2965'?: {
            
            };
            '2966'?: {
            
            };
            '2967'?: {
            
            };
            '2968'?: {
            
            };
            '2969'?: {
            
            };
            '2970'?: {
            
            };
            '2971'?: {
            
            };
            '2972'?: {
            
            };
            '2973'?: {
            
            };
            '2974'?: {
            
            };
            '2975'?: {
            
            };
            '2976'?: {
            
            };
            '2977'?: {
            
            };
            '2978'?: {
            
            };
            '2979'?: {
            
            };
            '2980'?: {
            
            };
            '2981'?: {
            
            };
            '2982'?: {
            
            };
            '2983'?: {
            
            };
            '2984'?: {
            
            };
            '2985'?: {
            
            };
            '2986'?: {
            
            };
            '2987'?: {
            
            };
            '2988'?: {
            
            };
            '2989'?: {
            
            };
            '2990'?: {
            
            };
            '2991'?: {
            
            };
            '2992'?: {
            
            };
            '2993'?: {
            
            };
            '2994'?: {
            
            };
            '2995'?: {
            
            };
            '2996'?: {
            
            };
            '2997'?: {
            
            };
            '2998'?: {
            
            };
            '2999'?: {
            
            };
            '3000'?: {
            
            };
            '3001'?: {
            
            };
            '3002'?: {
            
            };
            '3003'?: {
            
            };
            '3004'?: {
            
            };
            '3005'?: {
            
            };
            '3006'?: {
            
            };
            '3007'?: {
            
            };
            '3008'?: {
            
            };
            '3009'?: {
            
            };
            '3010'?: {
            
            };
            '3011'?: {
            
            };
            '3012'?: {
            
            };
            '3013'?: {
            
            };
            '3014'?: {
            
            };
            '3015'?: {
            
            };
            '3016'?: {
            
            };
            '3017'?: {
            
            };
            '3018'?: {
            
            };
            '3019'?: {
            
            };
            '3020'?: {
            
            };
            '3021'?: {
            
            };
            '3022'?: {
            
            };
            '3023'?: {
            
            };
            '3024'?: {
            
            };
            '3025'?: {
            
            };
            '3026'?: {
            
            };
            '3027'?: {
            
            };
            '3028'?: {
            
            };
            '3029'?: {
            
            };
            '3030'?: {
            
            };
            '3031'?: {
            
            };
            '3032'?: {
            
            };
            '3033'?: {
            
            };
            '3034'?: {
            
            };
            '3035'?: {
            
            };
            '3036'?: {
            
            };
            '3037'?: {
            
            };
            '3038'?: {
            
            };
            '3039'?: {
            
            };
            '3040'?: {
            
            };
            '3041'?: {
            
            };
            '3042'?: {
            
            };
            '3043'?: {
            
            };
            '3044'?: {
            
            };
            '3045'?: {
            
            };
            '3046'?: {
            
            };
            '3047'?: {
            
            };
            '3048'?: {
            
            };
            '3049'?: {
            
            };
            '3050'?: {
            
            };
            '3051'?: {
            
            };
            '3052'?: {
            
            };
            '3053'?: {
            
            };
            '3054'?: {
            
            };
            '3055'?: {
            
            };
            '3056'?: {
            
            };
            '3057'?: {
            
            };
            '3058'?: {
            
            };
            '3059'?: {
            
            };
            '3060'?: {
            
            };
            '3061'?: {
            
            };
            '3062'?: {
            
            };
            '3063'?: {
            
            };
            '3064'?: {
            
            };
            '3065'?: {
            
            };
            '3066'?: {
            
            };
            '3067'?: {
            
            };
            '3068'?: {
            
            };
            '3069'?: {
            
            };
            '3070'?: {
            
            };
            '3071'?: {
            
            };
            '3072'?: {
            
            };
            '3073'?: {
            
            };
            '3074'?: {
            
            };
            '3075'?: {
            
            };
            '3076'?: {
            
            };
            '3077'?: {
            
            };
            '3078'?: {
            
            };
            '3079'?: {
            
            };
            '3080'?: {
            
            };
            '3081'?: {
            
            };
            '3082'?: {
            
            };
            '3083'?: {
            
            };
            '3084'?: {
            
            };
            '3085'?: {
            
            };
            '3086'?: {
            
            };
            '3087'?: {
            
            };
            '3088'?: {
            
            };
            '3089'?: {
            
            };
            '3090'?: {
            
            };
            '3091'?: {
            
            };
            '3092'?: {
            
            };
            '3093'?: {
            
            };
            '3094'?: {
            
            };
            '3095'?: {
            
            };
            '3096'?: {
            
            };
            '3097'?: {
            
            };
            '3098'?: {
            
            };
            '3099'?: {
            
            };
            '3100'?: {
            
            };
            '3101'?: {
            
            };
            '3102'?: {
            
            };
            '3103'?: {
            
            };
            '3104'?: {
            
            };
            '3105'?: {
            
            };
            '3106'?: {
            
            };
            '3107'?: {
            
            };
            '3108'?: {
            
            };
            '3109'?: {
            
            };
            '3110'?: {
            
            };
            '3111'?: {
            
            };
            '3112'?: {
            
            };
            '3113'?: {
            
            };
            '3114'?: {
            
            };
            '3115'?: {
            
            };
            '3116'?: {
            
            };
            '3117'?: {
            
            };
            '3118'?: {
            
            };
            '3119'?: {
            
            };
            '3120'?: {
            
            };
            '3121'?: {
            
            };
            '3122'?: {
            
            };
            '3123'?: {
            
            };
            '3124'?: {
            
            };
            '3125'?: {
            
            };
            '3126'?: {
            
            };
            '3127'?: {
            
            };
            '3128'?: {
            
            };
            '3129'?: {
            
            };
            '3130'?: {
            
            };
            '3131'?: {
            
            };
            '3132'?: {
            
            };
            '3133'?: {
            
            };
            '3134'?: {
            
            };
            '3135'?: {
            
            };
            '3136'?: {
            
            };
            '3137'?: {
            
            };
            '3138'?: {
            
            };
            '3139'?: {
            
            };
            '3140'?: {
            
            };
            '3141'?: {
            
            };
            '3142'?: {
            
            };
            '3143'?: {
            
            };
            '3144'?: {
            
            };
            '3145'?: {
            
            };
            '3146'?: {
            
            };
            '3147'?: {
            
            };
            '3148'?: {
            
            };
            '3149'?: {
            
            };
            '3150'?: {
            
            };
            '3151'?: {
            
            };
            '3152'?: {
            
            };
            '3153'?: {
            
            };
            '3154'?: {
            
            };
            '3155'?: {
            
            };
            '3156'?: {
            
            };
            '3157'?: {
            
            };
            '3158'?: {
            
            };
            '3159'?: {
            
            };
            '3160'?: {
            
            };
            '3161'?: {
            
            };
            '3162'?: {
            
            };
            '3163'?: {
            
            };
            '3164'?: {
            
            };
            '3165'?: {
            
            };
            '3166'?: {
            
            };
            '3167'?: {
            
            };
            '3168'?: {
            
            };
            '3169'?: {
            
            };
            '3170'?: {
            
            };
            '3171'?: {
            
            };
            '3172'?: {
            
            };
            '3173'?: {
            
            };
            '3174'?: {
            
            };
            '3175'?: {
            
            };
            '3176'?: {
            
            };
            '3177'?: {
            
            };
            '3178'?: {
            
            };
            '3179'?: {
            
            };
            '3180'?: {
            
            };
            '3181'?: {
            
            };
            '3182'?: {
            
            };
            '3183'?: {
            
            };
            '3184'?: {
            
            };
            '3185'?: {
            
            };
            '3186'?: {
            
            };
            '3187'?: {
            
            };
            '3188'?: {
            
            };
            '3189'?: {
            
            };
            '3190'?: {
            
            };
            '3191'?: {
            
            };
            '3192'?: {
            
            };
            '3193'?: {
            
            };
            '3194'?: {
            
            };
            '3195'?: {
            
            };
            '3196'?: {
            
            };
            '3197'?: {
            
            };
            '3198'?: {
            
            };
            '3199'?: {
            
            };
            '3200'?: {
            
            };
            '3201'?: {
            
            };
            '3202'?: {
            
            };
            '3203'?: {
            
            };
            '3204'?: {
            
            };
            '3205'?: {
            
            };
            '3206'?: {
            
            };
            '3207'?: {
            
            };
            '3208'?: {
            
            };
            '3209'?: {
            
            };
            '3210'?: {
            
            };
            '3211'?: {
            
            };
            '3212'?: {
            
            };
            '3213'?: {
            
            };
            '3214'?: {
            
            };
            '3215'?: {
            
            };
            '3216'?: {
            
            };
            '3217'?: {
            
            };
            '3218'?: {
            
            };
            '3219'?: {
            
            };
            '3220'?: {
            
            };
            '3221'?: {
            
            };
            '3222'?: {
            
            };
            '3223'?: {
            
            };
            '3224'?: {
            
            };
            '3225'?: {
            
            };
            '3226'?: {
            
            };
            '3227'?: {
            
            };
            '3228'?: {
            
            };
            '3229'?: {
            
            };
            '3230'?: {
            
            };
            '3231'?: {
            
            };
            '3232'?: {
            
            };
            '3233'?: {
            
            };
            '3234'?: {
            
            };
            '3235'?: {
            
            };
            '3236'?: {
            
            };
            '3237'?: {
            
            };
            '3238'?: {
            
            };
            '3239'?: {
            
            };
            '3240'?: {
            
            };
            '3241'?: {
            
            };
            '3242'?: {
            
            };
            '3243'?: {
            
            };
            '3244'?: {
            
            };
            '3245'?: {
            
            };
            '3246'?: {
            
            };
            '3247'?: {
            
            };
            '3248'?: {
            
            };
            '3249'?: {
            
            };
            '3250'?: {
            
            };
            '3251'?: {
            
            };
            '3252'?: {
            
            };
            '3253'?: {
            
            };
            '3254'?: {
            
            };
            '3255'?: {
            
            };
            '3256'?: {
            
            };
            '3257'?: {
            
            };
            '3258'?: {
            
            };
            '3259'?: {
            
            };
            '3260'?: {
            
            };
            '3261'?: {
            
            };
            '3262'?: {
            
            };
            '3263'?: {
            
            };
            '3264'?: {
            
            };
            '3265'?: {
            
            };
            '3266'?: {
            
            };
            '3267'?: {
            
            };
            '3268'?: {
            
            };
            '3269'?: {
            
            };
            '3270'?: {
            
            };
            '3271'?: {
            
            };
            '3272'?: {
            
            };
            '3273'?: {
            
            };
            '3274'?: {
            
            };
            '3275'?: {
            
            };
            '3276'?: {
            
            };
            '3277'?: {
            
            };
            '3278'?: {
            
            };
            '3279'?: {
            
            };
            '3280'?: {
            
            };
            '3281'?: {
            
            };
            '3282'?: {
            
            };
            '3283'?: {
            
            };
            '3284'?: {
            
            };
            '3285'?: {
            
            };
            '3286'?: {
            
            };
            '3287'?: {
            
            };
            '3288'?: {
            
            };
            '3289'?: {
            
            };
            '3290'?: {
            
            };
            '3291'?: {
            
            };
            '3292'?: {
            
            };
            '3293'?: {
            
            };
            '3294'?: {
            
            };
            '3295'?: {
            
            };
            '3296'?: {
            
            };
            '3297'?: {
            
            };
            '3298'?: {
            
            };
            '3299'?: {
            
            };
            '3300'?: {
            
            };
            '3301'?: {
            
            };
            '3302'?: {
            
            };
            '3303'?: {
            
            };
            '3304'?: {
            
            };
            '3305'?: {
            
            };
            '3306'?: {
            
            };
            '3307'?: {
            
            };
            '3308'?: {
            
            };
            '3309'?: {
            
            };
            '3310'?: {
            
            };
            '3311'?: {
            
            };
            '3312'?: {
            
            };
            '3313'?: {
            
            };
            '3314'?: {
            
            };
            '3315'?: {
            
            };
            '3316'?: {
            
            };
            '3317'?: {
            
            };
            '3318'?: {
            
            };
            '3319'?: {
            
            };
            '3320'?: {
            
            };
            '3321'?: {
            
            };
            '3322'?: {
            
            };
            '3323'?: {
            
            };
            '3324'?: {
            
            };
            '3325'?: {
            
            };
            '3326'?: {
            
            };
            '3327'?: {
            
            };
            '3328'?: {
            
            };
            '3329'?: {
            
            };
            '3330'?: {
            
            };
            '3331'?: {
            
            };
            '3332'?: {
            
            };
            '3333'?: {
            
            };
            '3334'?: {
            
            };
            '3335'?: {
            
            };
            '3336'?: {
            
            };
            '3337'?: {
            
            };
            '3338'?: {
            
            };
            '3339'?: {
            
            };
            '3340'?: {
            
            };
            '3341'?: {
            
            };
            '3342'?: {
            
            };
            '3343'?: {
            
            };
            '3344'?: {
            
            };
            '3345'?: {
            
            };
            '3346'?: {
            
            };
            '3347'?: {
            
            };
            '3348'?: {
            
            };
            '3349'?: {
            
            };
            '3350'?: {
            
            };
            '3351'?: {
            
            };
            '3352'?: {
            
            };
            '3353'?: {
            
            };
            '3354'?: {
            
            };
            '3355'?: {
            
            };
            '3356'?: {
            
            };
            '3357'?: {
            
            };
            '3358'?: {
            
            };
            '3359'?: {
            
            };
            '3360'?: {
            
            };
            '3361'?: {
            
            };
            '3362'?: {
            
            };
            '3363'?: {
            
            };
            '3364'?: {
            
            };
            '3365'?: {
            
            };
            '3366'?: {
            
            };
            '3367'?: {
            
            };
            '3368'?: {
            
            };
            '3369'?: {
            
            };
            '3370'?: {
            
            };
            '3371'?: {
            
            };
            '3372'?: {
            
            };
            '3373'?: {
            
            };
            '3374'?: {
            
            };
            '3375'?: {
            
            };
            '3376'?: {
            
            };
            '3377'?: {
            
            };
            '3378'?: {
            
            };
            '3379'?: {
            
            };
            '3380'?: {
            
            };
            '3381'?: {
            
            };
            '3382'?: {
            
            };
            '3383'?: {
            
            };
            '3384'?: {
            
            };
            '3385'?: {
            
            };
            '3386'?: {
            
            };
            '3387'?: {
            
            };
            '3388'?: {
            
            };
            '3389'?: {
            
            };
            '3390'?: {
            
            };
            '3391'?: {
            
            };
            '3392'?: {
            
            };
            '3393'?: {
            
            };
            '3394'?: {
            
            };
            '3395'?: {
            
            };
            '3396'?: {
            
            };
            '3397'?: {
            
            };
            '3398'?: {
            
            };
            '3399'?: {
            
            };
            '3400'?: {
            
            };
            '3401'?: {
            
            };
            '3402'?: {
            
            };
            '3403'?: {
            
            };
            '3404'?: {
            
            };
            '3405'?: {
            
            };
            '3406'?: {
            
            };
            '3407'?: {
            
            };
            '3408'?: {
            
            };
            '3409'?: {
            
            };
            '3410'?: {
            
            };
            '3411'?: {
            
            };
            '3412'?: {
            
            };
            '3413'?: {
            
            };
            '3414'?: {
            
            };
            '3415'?: {
            
            };
            '3416'?: {
            
            };
            '3417'?: {
            
            };
            '3418'?: {
            
            };
            '3419'?: {
            
            };
            '3420'?: {
            
            };
            '3421'?: {
            
            };
            '3422'?: {
            
            };
            '3423'?: {
            
            };
            '3424'?: {
            
            };
            '3425'?: {
            
            };
            '3426'?: {
            
            };
            '3427'?: {
            
            };
            '3428'?: {
            
            };
            '3429'?: {
            
            };
            '3430'?: {
            
            };
            '3431'?: {
            
            };
            '3432'?: {
            
            };
            '3433'?: {
            
            };
            '3434'?: {
            
            };
            '3435'?: {
            
            };
            '3436'?: {
            
            };
            '3437'?: {
            
            };
            '3438'?: {
            
            };
            '3439'?: {
            
            };
            '3440'?: {
            
            };
            '3441'?: {
            
            };
            '3442'?: {
            
            };
            '3443'?: {
            
            };
            '3444'?: {
            
            };
            '3445'?: {
            
            };
            '3446'?: {
            
            };
            '3447'?: {
            
            };
            '3448'?: {
            
            };
            '3449'?: {
            
            };
            '3450'?: {
            
            };
            '3451'?: {
            
            };
            '3452'?: {
            
            };
            '3453'?: {
            
            };
            '3454'?: {
            
            };
            '3455'?: {
            
            };
            '3456'?: {
            
            };
            '3457'?: {
            
            };
            '3458'?: {
            
            };
            '3459'?: {
            
            };
            '3460'?: {
            
            };
            '3461'?: {
            
            };
            '3462'?: {
            
            };
            '3463'?: {
            
            };
            '3464'?: {
            
            };
            '3465'?: {
            
            };
            '3466'?: {
            
            };
            '3467'?: {
            
            };
            '3468'?: {
            
            };
            '3469'?: {
            
            };
            '3470'?: {
            
            };
            '3471'?: {
            
            };
            '3472'?: {
            
            };
            '3473'?: {
            
            };
            '3474'?: {
            
            };
            '3475'?: {
            
            };
            '3476'?: {
            
            };
            '3477'?: {
            
            };
            '3478'?: {
            
            };
            '3479'?: {
            
            };
            '3480'?: {
            
            };
            '3481'?: {
            
            };
            '3482'?: {
            
            };
            '3483'?: {
            
            };
            '3484'?: {
            
            };
            '3485'?: {
            
            };
            '3486'?: {
            
            };
            '3487'?: {
            
            };
            '3488'?: {
            
            };
            '3489'?: {
            
            };
            '3490'?: {
            
            };
            '3491'?: {
            
            };
            '3492'?: {
            
            };
            '3493'?: {
            
            };
            '3494'?: {
            
            };
            '3495'?: {
            
            };
            '3496'?: {
            
            };
            '3497'?: {
            
            };
            '3498'?: {
            
            };
            '3499'?: {
            
            };
            '3500'?: {
            
            };
            '3501'?: {
            
            };
            '3502'?: {
            
            };
            '3503'?: {
            
            };
            '3504'?: {
            
            };
            '3505'?: {
            
            };
            '3506'?: {
            
            };
            '3507'?: {
            
            };
            '3508'?: {
            
            };
            '3509'?: {
            
            };
            '3510'?: {
            
            };
            '3511'?: {
            
            };
            '3512'?: {
            
            };
            '3513'?: {
            
            };
            '3514'?: {
            
            };
            '3515'?: {
            
            };
            '3516'?: {
            
            };
            '3517'?: {
            
            };
            '3518'?: {
            
            };
            '3519'?: {
            
            };
            '3520'?: {
            
            };
            '3521'?: {
            
            };
            '3522'?: {
            
            };
            '3523'?: {
            
            };
            '3524'?: {
            
            };
            '3525'?: {
            
            };
            '3526'?: {
            
            };
            '3527'?: {
            
            };
            '3528'?: {
            
            };
            '3529'?: {
            
            };
            '3530'?: {
            
            };
            '3531'?: {
            
            };
            '3532'?: {
            
            };
            '3533'?: {
            
            };
            '3534'?: {
            
            };
            '3535'?: {
            
            };
            '3536'?: {
            
            };
            '3537'?: {
            
            };
            '3538'?: {
            
            };
            '3539'?: {
            
            };
            '3540'?: {
            
            };
            '3541'?: {
            
            };
            '3542'?: {
            
            };
            '3543'?: {
            
            };
            '3544'?: {
            
            };
            '3545'?: {
            
            };
            '3546'?: {
            
            };
            '3547'?: {
            
            };
            '3548'?: {
            
            };
            '3549'?: {
            
            };
            '3550'?: {
            
            };
            '3551'?: {
            
            };
            '3552'?: {
            
            };
            '3553'?: {
            
            };
            '3554'?: {
            
            };
            '3555'?: {
            
            };
            '3556'?: {
            
            };
            '3557'?: {
            
            };
            '3558'?: {
            
            };
            '3559'?: {
            
            };
            '3560'?: {
            
            };
            '3561'?: {
            
            };
            '3562'?: {
            
            };
            '3563'?: {
            
            };
            '3564'?: {
            
            };
            '3565'?: {
            
            };
            '3566'?: {
            
            };
            '3567'?: {
            
            };
            '3568'?: {
            
            };
            '3569'?: {
            
            };
            '3570'?: {
            
            };
            '3571'?: {
            
            };
            '3572'?: {
            
            };
            '3573'?: {
            
            };
            '3574'?: {
            
            };
            '3575'?: {
            
            };
            '3576'?: {
            
            };
            '3577'?: {
            
            };
            '3578'?: {
            
            };
            '3579'?: {
            
            };
            '3580'?: {
            
            };
            '3581'?: {
            
            };
            '3582'?: {
            
            };
            '3583'?: {
            
            };
            '3584'?: {
            
            };
            '3585'?: {
            
            };
            '3586'?: {
            
            };
            '3587'?: {
            
            };
            '3588'?: {
            
            };
            '3589'?: {
            
            };
            '3590'?: {
            
            };
            '3591'?: {
            
            };
            '3592'?: {
            
            };
            '3593'?: {
            
            };
            '3594'?: {
            
            };
            '3595'?: {
            
            };
            '3596'?: {
            
            };
            '3597'?: {
            
            };
            '3598'?: {
            
            };
            '3599'?: {
            
            };
            '3600'?: {
            
            };
            '3601'?: {
            
            };
            '3602'?: {
            
            };
            '3603'?: {
            
            };
            '3604'?: {
            
            };
            '3605'?: {
            
            };
            '3606'?: {
            
            };
            '3607'?: {
            
            };
            '3608'?: {
            
            };
            '3609'?: {
            
            };
            '3610'?: {
            
            };
            '3611'?: {
            
            };
            '3612'?: {
            
            };
            '3613'?: {
            
            };
            '3614'?: {
            
            };
            '3615'?: {
            
            };
            '3616'?: {
            
            };
            '3617'?: {
            
            };
            '3618'?: {
            
            };
            '3619'?: {
            
            };
            '3620'?: {
            
            };
            '3621'?: {
            
            };
            '3622'?: {
            
            };
            '3623'?: {
            
            };
            '3624'?: {
            
            };
            '3625'?: {
            
            };
            '3626'?: {
            
            };
            '3627'?: {
            
            };
            '3628'?: {
            
            };
            '3629'?: {
            
            };
            '3630'?: {
            
            };
            '3631'?: {
            
            };
            '3632'?: {
            
            };
            '3633'?: {
            
            };
            '3634'?: {
            
            };
            '3635'?: {
            
            };
            '3636'?: {
            
            };
            '3637'?: {
            
            };
            '3638'?: {
            
            };
            '3639'?: {
            
            };
            '3640'?: {
            
            };
            '3641'?: {
            
            };
            '3642'?: {
            
            };
            '3643'?: {
            
            };
            '3644'?: {
            
            };
            '3645'?: {
            
            };
            '3646'?: {
            
            };
            '3647'?: {
            
            };
            '3648'?: {
            
            };
            '3649'?: {
            
            };
            '3650'?: {
            
            };
            '3651'?: {
            
            };
            '3652'?: {
            
            };
            '3653'?: {
            
            };
            '3654'?: {
            
            };
            '3655'?: {
            
            };
            '3656'?: {
            
            };
            '3657'?: {
            
            };
            '3658'?: {
            
            };
            '3659'?: {
            
            };
            '3660'?: {
            
            };
            '3661'?: {
            
            };
            '3662'?: {
            
            };
            '3663'?: {
            
            };
            '3664'?: {
            
            };
            '3665'?: {
            
            };
            '3666'?: {
            
            };
            '3667'?: {
            
            };
            '3668'?: {
            
            };
            '3669'?: {
            
            };
            '3670'?: {
            
            };
            '3671'?: {
            
            };
            '3672'?: {
            
            };
            '3673'?: {
            
            };
            '3674'?: {
            
            };
            '3675'?: {
            
            };
            '3676'?: {
            
            };
            '3677'?: {
            
            };
            '3678'?: {
            
            };
            '3679'?: {
            
            };
            '3680'?: {
            
            };
            '3681'?: {
            
            };
            '3682'?: {
            
            };
            '3683'?: {
            
            };
            '3684'?: {
            
            };
            '3685'?: {
            
            };
            '3686'?: {
            
            };
            '3687'?: {
            
            };
            '3688'?: {
            
            };
            '3689'?: {
            
            };
            '3690'?: {
            
            };
            '3691'?: {
            
            };
            '3692'?: {
            
            };
            '3693'?: {
            
            };
            '3694'?: {
            
            };
            '3695'?: {
            
            };
            '3696'?: {
            
            };
            '3697'?: {
            
            };
            '3698'?: {
            
            };
            '3699'?: {
            
            };
            '3700'?: {
            
            };
            '3701'?: {
            
            };
            '3702'?: {
            
            };
            '3703'?: {
            
            };
            '3704'?: {
            
            };
            '3705'?: {
            
            };
            '3706'?: {
            
            };
            '3707'?: {
            
            };
            '3708'?: {
            
            };
            '3709'?: {
            
            };
            '3710'?: {
            
            };
            '3711'?: {
            
            };
            '3712'?: {
            
            };
            '3713'?: {
            
            };
            '3714'?: {
            
            };
            '3715'?: {
            
            };
            '3716'?: {
            
            };
            '3717'?: {
            
            };
            '3718'?: {
            
            };
            '3719'?: {
            
            };
            '3720'?: {
            
            };
            '3721'?: {
            
            };
            '3722'?: {
            
            };
            '3723'?: {
            
            };
            '3724'?: {
            
            };
            '3725'?: {
            
            };
            '3726'?: {
            
            };
            '3727'?: {
            
            };
            '3728'?: {
            
            };
            '3729'?: {
            
            };
            '3730'?: {
            
            };
            '3731'?: {
            
            };
            '3732'?: {
            
            };
            '3733'?: {
            
            };
            '3734'?: {
            
            };
            '3735'?: {
            
            };
            '3736'?: {
            
            };
            '3737'?: {
            
            };
            '3738'?: {
            
            };
            '3739'?: {
            
            };
            '3740'?: {
            
            };
            '3741'?: {
            
            };
            '3742'?: {
            
            };
            '3743'?: {
            
            };
            '3744'?: {
            
            };
            '3745'?: {
            
            };
            '3746'?: {
            
            };
            '3747'?: {
            
            };
            '3748'?: {
            
            };
            '3749'?: {
            
            };
            '3750'?: {
            
            };
            '3751'?: {
            
            };
            '3752'?: {
            
            };
            '3753'?: {
            
            };
            '3754'?: {
            
            };
            '3755'?: {
            
            };
            '3756'?: {
            
            };
            '3757'?: {
            
            };
            '3758'?: {
            
            };
            '3759'?: {
            
            };
            '3760'?: {
            
            };
            '3761'?: {
            
            };
            '3762'?: {
            
            };
            '3763'?: {
            
            };
            '3764'?: {
            
            };
            '3765'?: {
            
            };
            '3766'?: {
            
            };
            '3767'?: {
            
            };
            '3768'?: {
            
            };
            '3769'?: {
            
            };
            '3770'?: {
            
            };
            '3771'?: {
            
            };
            '3772'?: {
            
            };
            '3773'?: {
            
            };
            '3774'?: {
            
            };
            '3775'?: {
            
            };
            '3776'?: {
            
            };
            '3777'?: {
            
            };
            '3778'?: {
            
            };
            '3779'?: {
            
            };
            '3780'?: {
            
            };
            '3781'?: {
            
            };
            '3782'?: {
            
            };
            '3783'?: {
            
            };
            '3784'?: {
            
            };
            '3785'?: {
            
            };
            '3786'?: {
            
            };
            '3787'?: {
            
            };
            '3788'?: {
            
            };
            '3789'?: {
            
            };
            '3790'?: {
            
            };
            '3791'?: {
            
            };
            '3792'?: {
            
            };
            '3793'?: {
            
            };
            '3794'?: {
            
            };
            '3795'?: {
            
            };
            '3796'?: {
            
            };
            '3797'?: {
            
            };
            '3798'?: {
            
            };
            '3799'?: {
            
            };
            '3800'?: {
            
            };
            '3801'?: {
            
            };
            '3802'?: {
            
            };
            '3803'?: {
            
            };
            '3804'?: {
            
            };
            '3805'?: {
            
            };
            '3806'?: {
            
            };
            '3807'?: {
            
            };
            '3808'?: {
            
            };
            '3809'?: {
            
            };
            '3810'?: {
            
            };
            '3811'?: {
            
            };
            '3812'?: {
            
            };
            '3813'?: {
            
            };
            '3814'?: {
            
            };
            '3815'?: {
            
            };
            '3816'?: {
            
            };
            '3817'?: {
            
            };
            '3818'?: {
            
            };
            '3819'?: {
            
            };
            '3820'?: {
            
            };
            '3821'?: {
            
            };
            '3822'?: {
            
            };
            '3823'?: {
            
            };
            '3824'?: {
            
            };
            '3825'?: {
            
            };
            '3826'?: {
            
            };
            '3827'?: {
            
            };
            '3828'?: {
            
            };
            '3829'?: {
            
            };
            '3830'?: {
            
            };
            '3831'?: {
            
            };
            '3832'?: {
            
            };
            '3833'?: {
            
            };
            '3834'?: {
            
            };
            '3835'?: {
            
            };
            '3836'?: {
            
            };
            '3837'?: {
            
            };
            '3838'?: {
            
            };
            '3839'?: {
            
            };
            '3840'?: {
            
            };
            '3841'?: {
            
            };
            '3842'?: {
            
            };
            '3843'?: {
            
            };
            '3844'?: {
            
            };
            '3845'?: {
            
            };
            '3846'?: {
            
            };
            '3847'?: {
            
            };
            '3848'?: {
            
            };
            '3849'?: {
            
            };
            '3850'?: {
            
            };
            '3851'?: {
            
            };
            '3852'?: {
            
            };
            '3853'?: {
            
            };
            '3854'?: {
            
            };
            '3855'?: {
            
            };
            '3856'?: {
            
            };
            '3857'?: {
            
            };
            '3858'?: {
            
            };
            '3859'?: {
            
            };
            '3860'?: {
            
            };
            '3861'?: {
            
            };
            '3862'?: {
            
            };
            '3863'?: {
            
            };
            '3864'?: {
            
            };
            '3865'?: {
            
            };
            '3866'?: {
            
            };
            '3867'?: {
            
            };
            '3868'?: {
            
            };
            '3869'?: {
            
            };
            '3870'?: {
            
            };
            '3871'?: {
            
            };
            '3872'?: {
            
            };
            '3873'?: {
            
            };
            '3874'?: {
            
            };
            '3875'?: {
            
            };
            '3876'?: {
            
            };
            '3877'?: {
            
            };
            '3878'?: {
            
            };
            '3879'?: {
            
            };
            '3880'?: {
            
            };
            '3881'?: {
            
            };
            '3882'?: {
            
            };
            '3883'?: {
            
            };
            '3884'?: {
            
            };
            '3885'?: {
            
            };
            '3886'?: {
            
            };
            '3887'?: {
            
            };
            '3888'?: {
            
            };
            '3889'?: {
            
            };
            '3890'?: {
            
            };
            '3891'?: {
            
            };
            '3892'?: {
            
            };
            '3893'?: {
            
            };
            '3894'?: {
            
            };
            '3895'?: {
            
            };
            '3896'?: {
            
            };
            '3897'?: {
            
            };
            '3898'?: {
            
            };
            '3899'?: {
            
            };
            '3900'?: {
            
            };
            '3901'?: {
            
            };
            '3902'?: {
            
            };
            '3903'?: {
            
            };
            '3904'?: {
            
            };
            '3905'?: {
            
            };
            '3906'?: {
            
            };
            '3907'?: {
            
            };
            '3908'?: {
            
            };
            '3909'?: {
            
            };
            '3910'?: {
            
            };
            '3911'?: {
            
            };
            '3912'?: {
            
            };
            '3913'?: {
            
            };
            '3914'?: {
            
            };
            '3915'?: {
            
            };
            '3916'?: {
            
            };
            '3917'?: {
            
            };
            '3918'?: {
            
            };
            '3919'?: {
            
            };
            '3920'?: {
            
            };
            '3921'?: {
            
            };
            '3922'?: {
            
            };
            '3923'?: {
            
            };
            '3924'?: {
            
            };
            '3925'?: {
            
            };
            '3926'?: {
            
            };
            '3927'?: {
            
            };
            '3928'?: {
            
            };
            '3929'?: {
            
            };
            '3930'?: {
            
            };
            '3931'?: {
            
            };
            '3932'?: {
            
            };
            '3933'?: {
            
            };
            '3934'?: {
            
            };
            '3935'?: {
            
            };
            '3936'?: {
            
            };
            '3937'?: {
            
            };
            '3938'?: {
            
            };
            '3939'?: {
            
            };
            '3940'?: {
            
            };
            '3941'?: {
            
            };
            '3942'?: {
            
            };
            '3943'?: {
            
            };
            '3944'?: {
            
            };
            '3945'?: {
            
            };
            '3946'?: {
            
            };
            '3947'?: {
            
            };
            '3948'?: {
            
            };
            '3949'?: {
            
            };
            '3950'?: {
            
            };
            '3951'?: {
            
            };
            '3952'?: {
            
            };
            '3953'?: {
            
            };
            '3954'?: {
            
            };
            '3955'?: {
            
            };
            '3956'?: {
            
            };
            '3957'?: {
            
            };
            '3958'?: {
            
            };
            '3959'?: {
            
            };
            '3960'?: {
            
            };
            '3961'?: {
            
            };
            '3962'?: {
            
            };
            '3963'?: {
            
            };
            '3964'?: {
            
            };
            '3965'?: {
            
            };
            '3966'?: {
            
            };
            '3967'?: {
            
            };
            '3968'?: {
            
            };
            '3969'?: {
            
            };
            '3970'?: {
            
            };
            '3971'?: {
            
            };
            '3972'?: {
            
            };
            '3973'?: {
            
            };
            '3974'?: {
            
            };
            '3975'?: {
            
            };
            '3976'?: {
            
            };
            '3977'?: {
            
            };
            '3978'?: {
            
            };
            '3979'?: {
            
            };
            '3980'?: {
            
            };
            '3981'?: {
            
            };
            '3982'?: {
            
            };
            '3983'?: {
            
            };
            '3984'?: {
            
            };
            '3985'?: {
            
            };
            '3986'?: {
            
            };
            '3987'?: {
            
            };
            '3988'?: {
            
            };
            '3989'?: {
            
            };
            '3990'?: {
            
            };
            '3991'?: {
            
            };
            '3992'?: {
            
            };
            '3993'?: {
            
            };
            '3994'?: {
            
            };
            '3995'?: {
            
            };
            '3996'?: {
            
            };
            '3997'?: {
            
            };
            '3998'?: {
            
            };
            '3999'?: {
            
            };
            '4000'?: {
            
            };
            '4001'?: {
            
            };
            '4002'?: {
            
            };
            '4003'?: {
            
            };
            '4004'?: {
            
            };
            '4005'?: {
            
            };
            '4006'?: {
            
            };
            '4007'?: {
            
            };
            '4008'?: {
            
            };
            '4009'?: {
            
            };
            '4010'?: {
            
            };
            '4011'?: {
            
            };
            '4012'?: {
            
            };
            '4013'?: {
            
            };
            '4014'?: {
            
            };
            '4015'?: {
            
            };
            '4016'?: {
            
            };
            '4017'?: {
            
            };
            '4018'?: {
            
            };
            '4019'?: {
            
            };
            '4020'?: {
            
            };
            '4021'?: {
            
            };
            '4022'?: {
            
            };
            '4023'?: {
            
            };
            '4024'?: {
            
            };
            '4025'?: {
            
            };
            '4026'?: {
            
            };
            '4027'?: {
            
            };
            '4028'?: {
            
            };
            '4029'?: {
            
            };
            '4030'?: {
            
            };
            '4031'?: {
            
            };
            '4032'?: {
            
            };
            '4033'?: {
            
            };
            '4034'?: {
            
            };
            '4035'?: {
            
            };
            '4036'?: {
            
            };
            '4037'?: {
            
            };
            '4038'?: {
            
            };
            '4039'?: {
            
            };
            '4040'?: {
            
            };
            '4041'?: {
            
            };
            '4042'?: {
            
            };
            '4043'?: {
            
            };
            '4044'?: {
            
            };
            '4045'?: {
            
            };
            '4046'?: {
            
            };
            '4047'?: {
            
            };
            '4048'?: {
            
            };
            '4049'?: {
            
            };
            '4050'?: {
            
            };
            '4051'?: {
            
            };
            '4052'?: {
            
            };
            '4053'?: {
            
            };
            '4054'?: {
            
            };
            '4055'?: {
            
            };
            '4056'?: {
            
            };
            '4057'?: {
            
            };
            '4058'?: {
            
            };
            '4059'?: {
            
            };
            '4060'?: {
            
            };
            '4061'?: {
            
            };
            '4062'?: {
            
            };
            '4063'?: {
            
            };
            '4064'?: {
            
            };
            '4065'?: {
            
            };
            '4066'?: {
            
            };
            '4067'?: {
            
            };
            '4068'?: {
            
            };
            '4069'?: {
            
            };
            '4070'?: {
            
            };
            '4071'?: {
            
            };
            '4072'?: {
            
            };
            '4073'?: {
            
            };
            '4074'?: {
            
            };
            '4075'?: {
            
            };
            '4076'?: {
            
            };
            '4077'?: {
            
            };
            '4078'?: {
            
            };
            '4079'?: {
            
            };
            '4080'?: {
            
            };
            '4081'?: {
            
            };
            '4082'?: {
            
            };
            '4083'?: {
            
            };
            '4084'?: {
            
            };
            '4085'?: {
            
            };
            '4086'?: {
            
            };
            '4087'?: {
            
            };
            '4088'?: {
            
            };
            '4089'?: {
            
            };
            '4090'?: {
            
            };
            '4091'?: {
            
            };
            '4092'?: {
            
            };
            '4093'?: {
            
            };
            '4094'?: {
            
            };
            '4095'?: {
            
            };
            '4096'?: {
            
            };
            '4097'?: {
            
            };
            '4098'?: {
            
            };
            '4099'?: {
            
            };
            '4100'?: {
            
            };
            '4101'?: {
            
            };
            '4102'?: {
            
            };
            '4103'?: {
            
            };
            '4104'?: {
            
            };
            '4105'?: {
            
            };
            '4106'?: {
            
            };
            '4107'?: {
            
            };
            '4108'?: {
            
            };
            '4109'?: {
            
            };
            '4110'?: {
            
            };
            '4111'?: {
            
            };
            '4112'?: {
            
            };
            '4113'?: {
            
            };
            '4114'?: {
            
            };
            '4115'?: {
            
            };
            '4116'?: {
            
            };
            '4117'?: {
            
            };
            '4118'?: {
            
            };
            '4119'?: {
            
            };
            '4120'?: {
            
            };
            '4121'?: {
            
            };
            '4122'?: {
            
            };
            '4123'?: {
            
            };
            '4124'?: {
            
            };
            '4125'?: {
            
            };
            '4126'?: {
            
            };
            '4127'?: {
            
            };
            '4128'?: {
            
            };
            '4129'?: {
            
            };
            '4130'?: {
            
            };
            '4131'?: {
            
            };
            '4132'?: {
            
            };
            '4133'?: {
            
            };
            '4134'?: {
            
            };
            '4135'?: {
            
            };
            '4136'?: {
            
            };
            '4137'?: {
            
            };
            '4138'?: {
            
            };
            '4139'?: {
            
            };
            '4140'?: {
            
            };
            '4141'?: {
            
            };
            '4142'?: {
            
            };
            '4143'?: {
            
            };
            '4144'?: {
            
            };
            '4145'?: {
            
            };
            '4146'?: {
            
            };
            '4147'?: {
            
            };
            '4148'?: {
            
            };
            '4149'?: {
            
            };
            '4150'?: {
            
            };
            '4151'?: {
            
            };
            '4152'?: {
            
            };
            '4153'?: {
            
            };
            '4154'?: {
            
            };
            '4155'?: {
            
            };
            '4156'?: {
            
            };
            '4157'?: {
            
            };
            '4158'?: {
            
            };
            '4159'?: {
            
            };
            '4160'?: {
            
            };
            '4161'?: {
            
            };
            '4162'?: {
            
            };
            '4163'?: {
            
            };
            '4164'?: {
            
            };
            '4165'?: {
            
            };
            '4166'?: {
            
            };
            '4167'?: {
            
            };
            '4168'?: {
            
            };
            '4169'?: {
            
            };
            '4170'?: {
            
            };
            '4171'?: {
            
            };
            '4172'?: {
            
            };
            '4173'?: {
            
            };
            '4174'?: {
            
            };
            '4175'?: {
            
            };
            '4176'?: {
            
            };
            '4177'?: {
            
            };
            '4178'?: {
            
            };
            '4179'?: {
            
            };
            '4180'?: {
            
            };
            '4181'?: {
            
            };
            '4182'?: {
            
            };
            '4183'?: {
            
            };
            '4184'?: {
            
            };
            '4185'?: {
            
            };
            '4186'?: {
            
            };
            '4187'?: {
            
            };
            '4188'?: {
            
            };
            '4189'?: {
            
            };
            '4190'?: {
            
            };
            '4191'?: {
            
            };
            '4192'?: {
            
            };
            '4193'?: {
            
            };
            '4194'?: {
            
            };
            '4195'?: {
            
            };
            '4196'?: {
            
            };
            '4197'?: {
            
            };
            '4198'?: {
            
            };
            '4199'?: {
            
            };
            '4200'?: {
            
            };
            '4201'?: {
            
            };
            '4202'?: {
            
            };
            '4203'?: {
            
            };
            '4204'?: {
            
            };
            '4205'?: {
            
            };
            '4206'?: {
            
            };
            '4207'?: {
            
            };
            '4208'?: {
            
            };
            '4209'?: {
            
            };
            '4210'?: {
            
            };
            '4211'?: {
            
            };
            '4212'?: {
            
            };
            '4213'?: {
            
            };
            '4214'?: {
            
            };
            '4215'?: {
            
            };
            '4216'?: {
            
            };
            '4217'?: {
            
            };
            '4218'?: {
            
            };
            '4219'?: {
            
            };
            '4220'?: {
            
            };
            '4221'?: {
            
            };
            '4222'?: {
            
            };
            '4223'?: {
            
            };
            '4224'?: {
            
            };
            '4225'?: {
            
            };
            '4226'?: {
            
            };
            '4227'?: {
            
            };
            '4228'?: {
            
            };
            '4229'?: {
            
            };
            '4230'?: {
            
            };
            '4231'?: {
            
            };
            '4232'?: {
            
            };
            '4233'?: {
            
            };
            '4234'?: {
            
            };
            '4235'?: {
            
            };
            '4236'?: {
            
            };
            '4237'?: {
            
            };
            '4238'?: {
            
            };
            '4239'?: {
            
            };
            '4240'?: {
            
            };
            '4241'?: {
            
            };
            '4242'?: {
            
            };
            '4243'?: {
            
            };
            '4244'?: {
            
            };
            '4245'?: {
            
            };
            '4246'?: {
            
            };
            '4247'?: {
            
            };
            '4248'?: {
            
            };
            '4249'?: {
            
            };
            '4250'?: {
            
            };
            '4251'?: {
            
            };
            '4252'?: {
            
            };
            '4253'?: {
            
            };
            '4254'?: {
            
            };
            '4255'?: {
            
            };
            '4256'?: {
            
            };
            '4257'?: {
            
            };
            '4258'?: {
            
            };
            '4259'?: {
            
            };
            '4260'?: {
            
            };
            '4261'?: {
            
            };
            '4262'?: {
            
            };
            '4263'?: {
            
            };
            '4264'?: {
            
            };
            '4265'?: {
            
            };
            '4266'?: {
            
            };
            '4267'?: {
            
            };
            '4268'?: {
            
            };
            '4269'?: {
            
            };
            '4270'?: {
            
            };
            '4271'?: {
            
            };
            '4272'?: {
            
            };
            '4273'?: {
            
            };
            '4274'?: {
            
            };
            '4275'?: {
            
            };
            '4276'?: {
            
            };
            '4277'?: {
            
            };
            '4278'?: {
            
            };
            '4279'?: {
            
            };
            '4280'?: {
            
            };
            '4281'?: {
            
            };
            '4282'?: {
            
            };
            '4283'?: {
            
            };
            '4284'?: {
            
            };
            '4285'?: {
            
            };
            '4286'?: {
            
            };
            '4287'?: {
            
            };
            '4288'?: {
            
            };
            '4289'?: {
            
            };
            '4290'?: {
            
            };
            '4291'?: {
            
            };
            '4292'?: {
            
            };
            '4293'?: {
            
            };
            '4294'?: {
            
            };
            '4295'?: {
            
            };
            '4296'?: {
            
            };
            '4297'?: {
            
            };
            '4298'?: {
            
            };
            '4299'?: {
            
            };
            '4300'?: {
            
            };
            '4301'?: {
            
            };
            '4302'?: {
            
            };
            '4303'?: {
            
            };
            '4304'?: {
            
            };
            '4305'?: {
            
            };
            '4306'?: {
            
            };
            '4307'?: {
            
            };
            '4308'?: {
            
            };
            '4309'?: {
            
            };
            '4310'?: {
            
            };
            '4311'?: {
            
            };
            '4312'?: {
            
            };
            '4313'?: {
            
            };
            '4314'?: {
            
            };
            '4315'?: {
            
            };
            '4316'?: {
            
            };
            '4317'?: {
            
            };
            '4318'?: {
            
            };
            '4319'?: {
            
            };
            '4320'?: {
            
            };
            '4321'?: {
            
            };
            '4322'?: {
            
            };
            '4323'?: {
            
            };
            '4324'?: {
            
            };
            '4325'?: {
            
            };
            '4326'?: {
            
            };
            '4327'?: {
            
            };
            '4328'?: {
            
            };
            '4329'?: {
            
            };
            '4330'?: {
            
            };
            '4331'?: {
            
            };
            '4332'?: {
            
            };
            '4333'?: {
            
            };
            '4334'?: {
            
            };
            '4335'?: {
            
            };
            '4336'?: {
            
            };
            '4337'?: {
            
            };
            '4338'?: {
            
            };
            '4339'?: {
            
            };
            '4340'?: {
            
            };
            '4341'?: {
            
            };
            '4342'?: {
            
            };
            '4343'?: {
            
            };
            '4344'?: {
            
            };
            '4345'?: {
            
            };
            '4346'?: {
            
            };
            '4347'?: {
            
            };
            '4348'?: {
            
            };
            '4349'?: {
            
            };
            '4350'?: {
            
            };
            '4351'?: {
            
            };
            '4352'?: {
            
            };
            '4353'?: {
            
            };
            '4354'?: {
            
            };
            '4355'?: {
            
            };
            '4356'?: {
            
            };
            '4357'?: {
            
            };
            '4358'?: {
            
            };
            '4359'?: {
            
            };
            '4360'?: {
            
            };
            '4361'?: {
            
            };
            '4362'?: {
            
            };
            '4363'?: {
            
            };
            '4364'?: {
            
            };
            '4365'?: {
            
            };
            '4366'?: {
            
            };
            '4367'?: {
            
            };
            '4368'?: {
            
            };
            '4369'?: {
            
            };
            '4370'?: {
            
            };
            '4371'?: {
            
            };
            '4372'?: {
            
            };
            '4373'?: {
            
            };
            '4374'?: {
            
            };
            '4375'?: {
            
            };
            '4376'?: {
            
            };
            '4377'?: {
            
            };
            '4378'?: {
            
            };
            '4379'?: {
            
            };
            '4380'?: {
            
            };
            '4381'?: {
            
            };
            '4382'?: {
            
            };
            '4383'?: {
            
            };
            '4384'?: {
            
            };
            '4385'?: {
            
            };
            '4386'?: {
            
            };
            '4387'?: {
            
            };
            '4388'?: {
            
            };
            '4389'?: {
            
            };
            '4390'?: {
            
            };
            '4391'?: {
            
            };
            '4392'?: {
            
            };
            '4393'?: {
            
            };
            '4394'?: {
            
            };
            '4395'?: {
            
            };
            '4396'?: {
            
            };
            '4397'?: {
            
            };
            '4398'?: {
            
            };
            '4399'?: {
            
            };
            '4400'?: {
            
            };
            '4401'?: {
            
            };
            '4402'?: {
            
            };
            '4403'?: {
            
            };
            '4404'?: {
            
            };
            '4405'?: {
            
            };
            '4406'?: {
            
            };
            '4407'?: {
            
            };
            '4408'?: {
            
            };
            '4409'?: {
            
            };
            '4410'?: {
            
            };
            '4411'?: {
            
            };
            '4412'?: {
            
            };
            '4413'?: {
            
            };
            '4414'?: {
            
            };
            '4415'?: {
            
            };
            '4416'?: {
            
            };
            '4417'?: {
            
            };
            '4418'?: {
            
            };
            '4419'?: {
            
            };
            '4420'?: {
            
            };
            '4421'?: {
            
            };
            '4422'?: {
            
            };
            '4423'?: {
            
            };
            '4424'?: {
            
            };
            '4425'?: {
            
            };
            '4426'?: {
            
            };
            '4427'?: {
            
            };
            '4428'?: {
            
            };
            '4429'?: {
            
            };
            '4430'?: {
            
            };
            '4431'?: {
            
            };
            '4432'?: {
            
            };
            '4433'?: {
            
            };
            '4434'?: {
            
            };
            '4435'?: {
            
            };
            '4436'?: {
            
            };
            '4437'?: {
            
            };
            '4438'?: {
            
            };
            '4439'?: {
            
            };
            '4440'?: {
            
            };
            '4441'?: {
            
            };
            '4442'?: {
            
            };
            '4443'?: {
            
            };
            '4444'?: {
            
            };
            '4445'?: {
            
            };
            '4446'?: {
            
            };
            '4447'?: {
            
            };
            '4448'?: {
            
            };
            '4449'?: {
            
            };
            '4450'?: {
            
            };
            '4451'?: {
            
            };
            '4452'?: {
            
            };
            '4453'?: {
            
            };
            '4454'?: {
            
            };
            '4455'?: {
            
            };
            '4456'?: {
            
            };
            '4457'?: {
            
            };
            '4458'?: {
            
            };
            '4459'?: {
            
            };
            '4460'?: {
            
            };
            '4461'?: {
            
            };
            '4462'?: {
            
            };
            '4463'?: {
            
            };
            '4464'?: {
            
            };
            '4465'?: {
            
            };
            '4466'?: {
            
            };
            '4467'?: {
            
            };
            '4468'?: {
            
            };
            '4469'?: {
            
            };
            '4470'?: {
            
            };
            '4471'?: {
            
            };
            '4472'?: {
            
            };
            '4473'?: {
            
            };
            '4474'?: {
            
            };
            '4475'?: {
            
            };
            '4476'?: {
            
            };
            '4477'?: {
            
            };
            '4478'?: {
            
            };
            '4479'?: {
            
            };
            '4480'?: {
            
            };
            '4481'?: {
            
            };
            '4482'?: {
            
            };
            '4483'?: {
            
            };
            '4484'?: {
            
            };
            '4485'?: {
            
            };
            '4486'?: {
            
            };
            '4487'?: {
            
            };
            '4488'?: {
            
            };
            '4489'?: {
            
            };
            '4490'?: {
            
            };
            '4491'?: {
            
            };
            '4492'?: {
            
            };
            '4493'?: {
            
            };
            '4494'?: {
            
            };
            '4495'?: {
            
            };
            '4496'?: {
            
            };
            '4497'?: {
            
            };
            '4498'?: {
            
            };
            '4499'?: {
            
            };
            '4500'?: {
            
            };
            '4501'?: {
            
            };
            '4502'?: {
            
            };
            '4503'?: {
            
            };
            '4504'?: {
            
            };
            '4505'?: {
            
            };
            '4506'?: {
            
            };
            '4507'?: {
            
            };
            '4508'?: {
            
            };
            '4509'?: {
            
            };
            '4510'?: {
            
            };
            '4511'?: {
            
            };
            '4512'?: {
            
            };
            '4513'?: {
            
            };
            '4514'?: {
            
            };
            '4515'?: {
            
            };
            '4516'?: {
            
            };
            '4517'?: {
            
            };
            '4518'?: {
            
            };
            '4519'?: {
            
            };
            '4520'?: {
            
            };
            '4521'?: {
            
            };
            '4522'?: {
            
            };
            '4523'?: {
            
            };
            '4524'?: {
            
            };
            '4525'?: {
            
            };
            '4526'?: {
            
            };
            '4527'?: {
            
            };
            '4528'?: {
            
            };
            '4529'?: {
            
            };
            '4530'?: {
            
            };
            '4531'?: {
            
            };
            '4532'?: {
            
            };
            '4533'?: {
            
            };
            '4534'?: {
            
            };
            '4535'?: {
            
            };
            '4536'?: {
            
            };
            '4537'?: {
            
            };
            '4538'?: {
            
            };
            '4539'?: {
            
            };
            '4540'?: {
            
            };
            '4541'?: {
            
            };
            '4542'?: {
            
            };
            '4543'?: {
            
            };
            '4544'?: {
            
            };
            '4545'?: {
            
            };
            '4546'?: {
            
            };
            '4547'?: {
            
            };
            '4548'?: {
            
            };
            '4549'?: {
            
            };
            '4550'?: {
            
            };
            '4551'?: {
            
            };
            '4552'?: {
            
            };
            '4553'?: {
            
            };
            '4554'?: {
            
            };
            '4555'?: {
            
            };
            '4556'?: {
            
            };
            '4557'?: {
            
            };
            '4558'?: {
            
            };
            '4559'?: {
            
            };
            '4560'?: {
            
            };
            '4561'?: {
            
            };
            '4562'?: {
            
            };
            '4563'?: {
            
            };
            '4564'?: {
            
            };
            '4565'?: {
            
            };
            '4566'?: {
            
            };
            '4567'?: {
            
            };
            '4568'?: {
            
            };
            '4569'?: {
            
            };
            '4570'?: {
            
            };
            '4571'?: {
            
            };
            '4572'?: {
            
            };
            '4573'?: {
            
            };
            '4574'?: {
            
            };
            '4575'?: {
            
            };
            '4576'?: {
            
            };
            '4577'?: {
            
            };
            '4578'?: {
            
            };
            '4579'?: {
            
            };
            '4580'?: {
            
            };
            '4581'?: {
            
            };
            '4582'?: {
            
            };
            '4583'?: {
            
            };
            '4584'?: {
            
            };
            '4585'?: {
            
            };
            '4586'?: {
            
            };
            '4587'?: {
            
            };
            '4588'?: {
            
            };
            '4589'?: {
            
            };
            '4590'?: {
            
            };
            '4591'?: {
            
            };
            '4592'?: {
            
            };
            '4593'?: {
            
            };
            '4594'?: {
            
            };
            '4595'?: {
            
            };
            '4596'?: {
            
            };
            '4597'?: {
            
            };
            '4598'?: {
            
            };
            '4599'?: {
            
            };
            '4600'?: {
            
            };
            '4601'?: {
            
            };
            '4602'?: {
            
            };
            '4603'?: {
            
            };
            '4604'?: {
            
            };
            '4605'?: {
            
            };
            '4606'?: {
            
            };
            '4607'?: {
            
            };
            '4608'?: {
            
            };
            '4609'?: {
            
            };
            '4610'?: {
            
            };
            '4611'?: {
            
            };
            '4612'?: {
            
            };
            '4613'?: {
            
            };
            '4614'?: {
            
            };
            '4615'?: {
            
            };
            '4616'?: {
            
            };
            '4617'?: {
            
            };
            '4618'?: {
            
            };
            '4619'?: {
            
            };
            '4620'?: {
            
            };
            '4621'?: {
            
            };
            '4622'?: {
            
            };
            '4623'?: {
            
            };
            '4624'?: {
            
            };
            '4625'?: {
            
            };
            '4626'?: {
            
            };
            '4627'?: {
            
            };
            '4628'?: {
            
            };
            '4629'?: {
            
            };
            '4630'?: {
            
            };
            '4631'?: {
            
            };
            '4632'?: {
            
            };
            '4633'?: {
            
            };
            '4634'?: {
            
            };
            '4635'?: {
            
            };
            '4636'?: {
            
            };
            '4637'?: {
            
            };
            '4638'?: {
            
            };
            '4639'?: {
            
            };
            '4640'?: {
            
            };
            '4641'?: {
            
            };
            '4642'?: {
            
            };
            '4643'?: {
            
            };
            '4644'?: {
            
            };
            '4645'?: {
            
            };
            '4646'?: {
            
            };
            '4647'?: {
            
            };
            '4648'?: {
            
            };
            '4649'?: {
            
            };
            '4650'?: {
            
            };
            '4651'?: {
            
            };
            '4652'?: {
            
            };
            '4653'?: {
            
            };
            '4654'?: {
            
            };
            '4655'?: {
            
            };
            '4656'?: {
            
            };
            '4657'?: {
            
            };
            '4658'?: {
            
            };
            '4659'?: {
            
            };
            '4660'?: {
            
            };
            '4661'?: {
            
            };
            '4662'?: {
            
            };
            '4663'?: {
            
            };
            '4664'?: {
            
            };
            '4665'?: {
            
            };
            '4666'?: {
            
            };
            '4667'?: {
            
            };
            '4668'?: {
            
            };
            '4669'?: {
            
            };
            '4670'?: {
            
            };
            '4671'?: {
            
            };
            '4672'?: {
            
            };
            '4673'?: {
            
            };
            '4674'?: {
            
            };
            '4675'?: {
            
            };
            '4676'?: {
            
            };
            '4677'?: {
            
            };
            '4678'?: {
            
            };
            '4679'?: {
            
            };
            '4680'?: {
            
            };
            '4681'?: {
            
            };
            '4682'?: {
            
            };
            '4683'?: {
            
            };
            '4684'?: {
            
            };
            '4685'?: {
            
            };
            '4686'?: {
            
            };
            '4687'?: {
            
            };
            '4688'?: {
            
            };
            '4689'?: {
            
            };
            '4690'?: {
            
            };
            '4691'?: {
            
            };
            '4692'?: {
            
            };
            '4693'?: {
            
            };
            '4694'?: {
            
            };
            '4695'?: {
            
            };
            '4696'?: {
            
            };
            '4697'?: {
            
            };
            '4698'?: {
            
            };
            '4699'?: {
            
            };
            '4700'?: {
            
            };
            '4701'?: {
            
            };
            '4702'?: {
            
            };
            '4703'?: {
            
            };
            '4704'?: {
            
            };
            '4705'?: {
            
            };
            '4706'?: {
            
            };
            '4707'?: {
            
            };
            '4708'?: {
            
            };
            '4709'?: {
            
            };
            '4710'?: {
            
            };
            '4711'?: {
            
            };
            '4712'?: {
            
            };
            '4713'?: {
            
            };
            '4714'?: {
            
            };
            '4715'?: {
            
            };
            '4716'?: {
            
            };
            '4717'?: {
            
            };
            '4718'?: {
            
            };
            '4719'?: {
            
            };
            '4720'?: {
            
            };
            '4721'?: {
            
            };
            '4722'?: {
            
            };
            '4723'?: {
            
            };
            '4724'?: {
            
            };
            '4725'?: {
            
            };
            '4726'?: {
            
            };
            '4727'?: {
            
            };
            '4728'?: {
            
            };
            '4729'?: {
            
            };
            '4730'?: {
            
            };
            '4731'?: {
            
            };
            '4732'?: {
            
            };
            '4733'?: {
            
            };
            '4734'?: {
            
            };
            '4735'?: {
            
            };
            '4736'?: {
            
            };
            '4737'?: {
            
            };
            '4738'?: {
            
            };
            '4739'?: {
            
            };
            '4740'?: {
            
            };
            '4741'?: {
            
            };
            '4742'?: {
            
            };
            '4743'?: {
            
            };
            '4744'?: {
            
            };
            '4745'?: {
            
            };
            '4746'?: {
            
            };
            '4747'?: {
            
            };
            '4748'?: {
            
            };
            '4749'?: {
            
            };
            '4750'?: {
            
            };
            '4751'?: {
            
            };
            '4752'?: {
            
            };
            '4753'?: {
            
            };
            '4754'?: {
            
            };
            '4755'?: {
            
            };
            '4756'?: {
            
            };
            '4757'?: {
            
            };
            '4758'?: {
            
            };
            '4759'?: {
            
            };
            '4760'?: {
            
            };
            '4761'?: {
            
            };
            '4762'?: {
            
            };
            '4763'?: {
            
            };
            '4764'?: {
            
            };
            '4765'?: {
            
            };
            '4766'?: {
            
            };
            '4767'?: {
            
            };
            '4768'?: {
            
            };
            '4769'?: {
            
            };
            '4770'?: {
            
            };
            '4771'?: {
            
            };
            '4772'?: {
            
            };
            '4773'?: {
            
            };
            '4774'?: {
            
            };
            '4775'?: {
            
            };
            '4776'?: {
            
            };
            '4777'?: {
            
            };
            '4778'?: {
            
            };
            '4779'?: {
            
            };
            '4780'?: {
            
            };
            '4781'?: {
            
            };
            '4782'?: {
            
            };
            '4783'?: {
            
            };
            '4784'?: {
            
            };
            '4785'?: {
            
            };
            '4786'?: {
            
            };
            '4787'?: {
            
            };
            '4788'?: {
            
            };
            '4789'?: {
            
            };
            '4790'?: {
            
            };
            '4791'?: {
            
            };
            '4792'?: {
            
            };
            '4793'?: {
            
            };
            '4794'?: {
            
            };
            '4795'?: {
            
            };
            '4796'?: {
            
            };
            '4797'?: {
            
            };
            '4798'?: {
            
            };
            '4799'?: {
            
            };
            '4800'?: {
            
            };
            '4801'?: {
            
            };
            '4802'?: {
            
            };
            '4803'?: {
            
            };
            '4804'?: {
            
            };
            '4805'?: {
            
            };
            '4806'?: {
            
            };
            '4807'?: {
            
            };
            '4808'?: {
            
            };
            '4809'?: {
            
            };
            '4810'?: {
            
            };
            '4811'?: {
            
            };
            '4812'?: {
            
            };
            '4813'?: {
            
            };
            '4814'?: {
            
            };
            '4815'?: {
            
            };
            '4816'?: {
            
            };
            '4817'?: {
            
            };
            '4818'?: {
            
            };
            '4819'?: {
            
            };
            '4820'?: {
            
            };
            '4821'?: {
            
            };
            '4822'?: {
            
            };
            '4823'?: {
            
            };
            '4824'?: {
            
            };
            '4825'?: {
            
            };
            '4826'?: {
            
            };
            '4827'?: {
            
            };
            '4828'?: {
            
            };
            '4829'?: {
            
            };
            '4830'?: {
            
            };
            '4831'?: {
            
            };
            '4832'?: {
            
            };
            '4833'?: {
            
            };
            '4834'?: {
            
            };
            '4835'?: {
            
            };
            '4836'?: {
            
            };
            '4837'?: {
            
            };
            '4838'?: {
            
            };
            '4839'?: {
            
            };
            '4840'?: {
            
            };
            '4841'?: {
            
            };
            '4842'?: {
            
            };
            '4843'?: {
            
            };
            '4844'?: {
            
            };
            '4845'?: {
            
            };
            '4846'?: {
            
            };
            '4847'?: {
            
            };
            '4848'?: {
            
            };
            '4849'?: {
            
            };
            '4850'?: {
            
            };
            '4851'?: {
            
            };
            '4852'?: {
            
            };
            '4853'?: {
            
            };
            '4854'?: {
            
            };
            '4855'?: {
            
            };
            '4856'?: {
            
            };
            '4857'?: {
            
            };
            '4858'?: {
            
            };
            '4859'?: {
            
            };
            '4860'?: {
            
            };
            '4861'?: {
            
            };
            '4862'?: {
            
            };
            '4863'?: {
            
            };
            '4864'?: {
            
            };
            '4865'?: {
            
            };
            '4866'?: {
            
            };
            '4867'?: {
            
            };
            '4868'?: {
            
            };
            '4869'?: {
            
            };
            '4870'?: {
            
            };
            '4871'?: {
            
            };
            '4872'?: {
            
            };
            '4873'?: {
            
            };
            '4874'?: {
            
            };
            '4875'?: {
            
            };
            '4876'?: {
            
            };
            '4877'?: {
            
            };
            '4878'?: {
            
            };
            '4879'?: {
            
            };
            '4880'?: {
            
            };
            '4881'?: {
            
            };
            '4882'?: {
            
            };
            '4883'?: {
            
            };
            '4884'?: {
            
            };
            '4885'?: {
            
            };
            '4886'?: {
            
            };
            '4887'?: {
            
            };
            '4888'?: {
            
            };
            '4889'?: {
            
            };
            '4890'?: {
            
            };
            '4891'?: {
            
            };
            '4892'?: {
            
            };
            '4893'?: {
            
            };
            '4894'?: {
            
            };
            '4895'?: {
            
            };
            '4896'?: {
            
            };
            '4897'?: {
            
            };
            '4898'?: {
            
            };
            '4899'?: {
            
            };
            '4900'?: {
            
            };
            '4901'?: {
            
            };
            '4902'?: {
            
            };
            '4903'?: {
            
            };
            '4904'?: {
            
            };
            '4905'?: {
            
            };
            '4906'?: {
            
            };
            '4907'?: {
            
            };
            '4908'?: {
            
            };
            '4909'?: {
            
            };
            '4910'?: {
            
            };
            '4911'?: {
            
            };
            '4912'?: {
            
            };
            '4913'?: {
            
            };
            '4914'?: {
            
            };
            '4915'?: {
            
            };
            '4916'?: {
            
            };
            '4917'?: {
            
            };
            '4918'?: {
            
            };
            '4919'?: {
            
            };
            '4920'?: {
            
            };
            '4921'?: {
            
            };
            '4922'?: {
            
            };
            '4923'?: {
            
            };
            '4924'?: {
            
            };
            '4925'?: {
            
            };
            '4926'?: {
            
            };
            '4927'?: {
            
            };
            '4928'?: {
            
            };
            '4929'?: {
            
            };
            '4930'?: {
            
            };
            '4931'?: {
            
            };
            '4932'?: {
            
            };
            '4933'?: {
            
            };
            '4934'?: {
            
            };
            '4935'?: {
            
            };
            '4936'?: {
            
            };
            '4937'?: {
            
            };
            '4938'?: {
            
            };
            '4939'?: {
            
            };
            '4940'?: {
            
            };
            '4941'?: {
            
            };
            '4942'?: {
            
            };
            '4943'?: {
            
            };
            '4944'?: {
            
            };
            '4945'?: {
            
            };
            '4946'?: {
            
            };
            '4947'?: {
            
            };
            '4948'?: {
            
            };
            '4949'?: {
            
            };
            '4950'?: {
            
            };
            '4951'?: {
            
            };
            '4952'?: {
            
            };
            '4953'?: {
            
            };
            '4954'?: {
            
            };
            '4955'?: {
            
            };
            '4956'?: {
            
            };
            '4957'?: {
            
            };
            '4958'?: {
            
            };
            '4959'?: {
            
            };
            '4960'?: {
            
            };
            '4961'?: {
            
            };
            '4962'?: {
            
            };
            '4963'?: {
            
            };
            '4964'?: {
            
            };
            '4965'?: {
            
            };
            '4966'?: {
            
            };
            '4967'?: {
            
            };
            '4968'?: {
            
            };
            '4969'?: {
            
            };
            '4970'?: {
            
            };
            '4971'?: {
            
            };
            '4972'?: {
            
            };
            '4973'?: {
            
            };
            '4974'?: {
            
            };
            '4975'?: {
            
            };
            '4976'?: {
            
            };
            '4977'?: {
            
            };
            '4978'?: {
            
            };
            '4979'?: {
            
            };
            '4980'?: {
            
            };
            '4981'?: {
            
            };
            '4982'?: {
            
            };
            '4983'?: {
            
            };
            '4984'?: {
            
            };
            '4985'?: {
            
            };
          }[];
          is_valid: boolean;
          last_cert_trust: number;
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFY_PROC_PATH_BUILT';
      // Denotes the ending of the nestable async flow event CERT_VERIFY_PROC_PATH_BUILT.
      ph: 'n';
      scope: string;
    }
  }

  namespace CERT_VERIFY_PROC_TARGET_CERT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          certificate: string;
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFY_PROC_TARGET_CERT';
      // Denotes the ending of the nestable async flow event CERT_VERIFY_PROC_TARGET_CERT.
      ph: 'n';
      scope: string;
    }
  }

  namespace CERT_VERIFY_PROC {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          cert_status: number;
          certificates: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
            '30': string;
            '31': string;
            '32': string;
            '33': string;
            '34': string;
            '35': string;
            '36': string;
            '37': string;
            '38': string;
            '39': string;
            '40': string;
            '41': string;
            '42': string;
            '43': string;
            '44': string;
            '45': string;
            '46': string;
            '47': string;
            '48': string;
            '49': string;
            '50': string;
            '51': string;
            '52': string;
            '53': string;
            '54': string;
            '55': string;
            '56': string;
            '57': string;
            '58': string;
            '59': string;
            '60': string;
            '61': string;
            '62': string;
            '63': string;
            '64': string;
            '65': string;
            '66': string;
            '67': string;
            '68': string;
            '69': string;
            '70': string;
            '71': string;
            '72': string;
            '73': string;
            '74': string;
            '75': string;
            '76': string;
            '77': string;
            '78': string;
            '79': string;
            '80': string;
            '81': string;
            '82': string;
            '83': string;
            '84': string;
            '85': string;
            '86': string;
            '87': string;
            '88': string;
            '89': string;
            '90': string;
            '91': string;
            '92': string;
            '93': string;
            '94': string;
            '95': string;
            '96': string;
            '97': string;
            '98': string;
            '99': string;
            '100': string;
            '101': string;
            '102': string;
            '103': string;
            '104': string;
            '105': string;
            '106': string;
            '107': string;
            '108': string;
            '109': string;
            '110': string;
            '111': string;
            '112': string;
            '113': string;
            '114': string;
            '115': string;
            '116': string;
            '117': string;
            '118': string;
            '119': string;
            '120': string;
            '121': string;
            '122': string;
            '123': string;
            '124': string;
            '125': string;
            '126': string;
            '127': string;
            '128': string;
            '129': string;
            '130': string;
            '131': string;
            '132': string;
            '133': string;
            '134': string;
            '135': string;
            '136': string;
            '137': string;
            '138': string;
            '139': string;
            '140': string;
            '141': string;
            '142': string;
            '143': string;
            '144': string;
            '145': string;
            '146': string;
            '147': string;
            '148': string;
            '149': string;
            '150': string;
            '151': string;
            '152': string;
            '153': string;
            '154': string;
            '155': string;
            '156': string;
            '157': string;
            '158': string;
            '159': string;
            '160': string;
            '161': string;
            '162': string;
            '163': string;
            '164': string;
            '165': string;
            '166': string;
            '167': string;
            '168': string;
            '169': string;
            '170': string;
            '171': string;
            '172': string;
            '173': string;
            '174': string;
            '175': string;
            '176': string;
            '177': string;
            '178': string;
            '179': string;
            '180': string;
            '181': string;
            '182': string;
            '183': string;
            '184': string;
            '185': string;
            '186': string;
            '187': string;
            '188': string;
            '189': string;
            '190': string;
            '191': string;
            '192': string;
            '193': string;
            '194': string;
            '195': string;
            '196': string;
            '197': string;
            '198': string;
            '199': string;
            '200': string;
            '201': string;
            '202': string;
            '203': string;
            '204': string;
            '205': string;
            '206': string;
            '207': string;
            '208': string;
            '209': string;
            '210': string;
            '211': string;
            '212': string;
            '213': string;
            '214': string;
            '215': string;
            '216': string;
            '217': string;
            '218': string;
            '219': string;
            '220': string;
            '221': string;
            '222': string;
            '223': string;
            '224': string;
            '225': string;
            '226': string;
            '227': string;
            '228': string;
            '229': string;
            '230': string;
            '231': string;
            '232': string;
            '233': string;
            '234': string;
            '235': string;
            '236': string;
            '237': string;
            '238': string;
            '239': string;
            '240': string;
            '241': string;
            '242': string;
            '243': string;
            '244': string;
            '245': string;
            '246': string;
            '247': string;
            '248': string;
            '249': string;
            '250': string;
            '251': string;
            '252': string;
            '253': string;
            '254': string;
            '255': string;
            '256': string;
            '257': string;
            '258': string;
            '259': string;
            '260': string;
            '261': string;
            '262': string;
            '263': string;
            '264': string;
            '265': string;
            '266': string;
            '267': string;
            '268': string;
            '269': string;
            '270': string;
            '271': string;
            '272': string;
            '273': string;
            '274': string;
            '275': string;
            '276': string;
            '277': string;
            '278': string;
            '279': string;
            '280': string;
            '281': string;
            '282': string;
            '283': string;
            '284': string;
            '285': string;
            '286': string;
            '287': string;
            '288': string;
            '289': string;
            '290': string;
            '291': string;
            '292': string;
            '293': string;
            '294': string;
            '295': string;
            '296': string;
            '297': string;
            '298': string;
            '299': string;
            '300': string;
            '301': string;
            '302': string;
            '303': string;
            '304': string;
            '305': string;
            '306': string;
            '307': string;
            '308': string;
            '309': string;
            '310': string;
            '311': string;
            '312': string;
            '313': string;
            '314': string;
            '315': string;
            '316': string;
            '317': string;
            '318': string;
            '319': string;
            '320': string;
            '321': string;
            '322': string;
            '323': string;
            '324': string;
            '325': string;
            '326': string;
            '327': string;
            '328': string;
            '329': string;
            '330': string;
            '331': string;
            '332': string;
            '333': string;
            '334': string;
            '335': string;
            '336': string;
            '337': string;
            '338': string;
            '339': string;
            '340': string;
            '341': string;
            '342': string;
            '343': string;
            '344': string;
            '345': string;
            '346': string;
            '347': string;
            '348': string;
            '349': string;
            '350': string;
            '351': string;
            '352': string;
            '353': string;
            '354': string;
            '355': string;
            '356': string;
            '357': string;
            '358': string;
            '359': string;
            '360': string;
            '361': string;
            '362': string;
            '363': string;
            '364': string;
            '365': string;
            '366': string;
            '367': string;
            '368': string;
            '369': string;
            '370': string;
            '371': string;
            '372': string;
            '373': string;
            '374': string;
            '375': string;
            '376': string;
            '377': string;
            '378': string;
            '379': string;
            '380': string;
            '381': string;
            '382': string;
            '383': string;
            '384': string;
            '385': string;
            '386': string;
            '387': string;
            '388': string;
            '389': string;
            '390': string;
            '391': string;
            '392': string;
            '393': string;
            '394': string;
            '395': string;
            '396': string;
            '397': string;
            '398': string;
            '399': string;
            '400': string;
            '401': string;
            '402': string;
            '403': string;
            '404': string;
            '405': string;
            '406': string;
            '407': string;
            '408': string;
            '409': string;
            '410': string;
            '411': string;
            '412': string;
            '413': string;
            '414': string;
            '415': string;
            '416': string;
            '417': string;
            '418': string;
            '419': string;
            '420': string;
            '421': string;
            '422': string;
            '423': string;
            '424': string;
            '425': string;
            '426': string;
            '427': string;
            '428': string;
            '429': string;
            '430': string;
            '431': string;
            '432': string;
            '433': string;
            '434': string;
            '435': string;
            '436': string;
            '437': string;
            '438': string;
            '439': string;
            '440': string;
            '441': string;
            '442': string;
            '443': string;
            '444': string;
            '445': string;
            '446': string;
            '447': string;
            '448': string;
            '449': string;
            '450': string;
            '451': string;
            '452': string;
            '453': string;
            '454': string;
            '455': string;
            '456': string;
            '457': string;
            '458': string;
            '459': string;
            '460': string;
            '461': string;
            '462': string;
            '463': string;
            '464': string;
            '465': string;
            '466': string;
            '467': string;
            '468': string;
            '469': string;
            '470': string;
            '471': string;
            '472': string;
            '473': string;
            '474': string;
            '475': string;
            '476': string;
            '477': string;
            '478': string;
            '479': string;
            '480': string;
            '481': string;
            '482': string;
            '483': string;
            '484': string;
            '485': string;
            '486': string;
            '487': string;
            '488': string;
            '489': string;
            '490': string;
            '491': string;
            '492': string;
            '493': string;
            '494': string;
            '495': string;
            '496': string;
            '497': string;
            '498': string;
            '499': string;
            '500': string;
            '501': string;
            '502': string;
            '503': string;
            '504': string;
            '505': string;
            '506': string;
            '507': string;
            '508': string;
            '509': string;
            '510': string;
            '511': string;
            '512': string;
            '513': string;
            '514': string;
            '515': string;
            '516': string;
            '517': string;
            '518': string;
            '519': string;
            '520': string;
            '521': string;
            '522': string;
            '523': string;
            '524': string;
            '525': string;
            '526': string;
            '527': string;
            '528': string;
            '529': string;
            '530': string;
            '531': string;
            '532': string;
            '533': string;
            '534': string;
            '535': string;
            '536': string;
            '537': string;
            '538': string;
            '539': string;
            '540': string;
            '541': string;
            '542': string;
            '543': string;
            '544': string;
            '545': string;
            '546': string;
            '547': string;
            '548': string;
            '549': string;
            '550': string;
            '551': string;
            '552': string;
            '553': string;
            '554': string;
            '555': string;
            '556': string;
            '557': string;
            '558': string;
            '559': string;
            '560': string;
            '561': string;
            '562': string;
            '563': string;
            '564': string;
            '565': string;
            '566': string;
            '567': string;
            '568': string;
            '569': string;
            '570': string;
            '571': string;
            '572': string;
            '573': string;
            '574': string;
            '575': string;
            '576': string;
            '577': string;
            '578': string;
            '579': string;
            '580': string;
            '581': string;
            '582': string;
            '583': string;
            '584': string;
            '585': string;
            '586': string;
            '587': string;
            '588': string;
            '589': string;
            '590': string;
            '591': string;
            '592': string;
            '593': string;
            '594': string;
            '595': string;
            '596': string;
            '597': string;
            '598': string;
            '599': string;
            '600': string;
            '601': string;
            '602': string;
            '603': string;
            '604': string;
            '605': string;
            '606': string;
            '607': string;
            '608': string;
            '609': string;
            '610': string;
            '611': string;
            '612': string;
            '613': string;
            '614': string;
            '615': string;
            '616': string;
            '617': string;
            '618': string;
            '619': string;
            '620': string;
            '621': string;
            '622': string;
            '623': string;
            '624': string;
            '625': string;
            '626': string;
            '627': string;
            '628': string;
            '629': string;
            '630': string;
            '631': string;
            '632': string;
            '633': string;
            '634': string;
            '635': string;
            '636': string;
            '637': string;
            '638': string;
            '639': string;
            '640': string;
            '641': string;
            '642': string;
            '643': string;
            '644': string;
            '645': string;
            '646': string;
            '647': string;
            '648': string;
            '649': string;
            '650': string;
            '651': string;
            '652': string;
            '653': string;
            '654': string;
            '655': string;
            '656': string;
            '657': string;
            '658': string;
            '659': string;
            '660': string;
            '661': string;
            '662': string;
            '663': string;
            '664': string;
            '665': string;
            '666': string;
            '667': string;
            '668': string;
            '669': string;
            '670': string;
            '671': string;
            '672': string;
            '673': string;
            '674': string;
            '675': string;
            '676': string;
            '677': string;
            '678': string;
            '679': string;
            '680': string;
            '681': string;
            '682': string;
            '683': string;
            '684': string;
            '685': string;
            '686': string;
            '687': string;
            '688': string;
            '689': string;
            '690': string;
            '691': string;
            '692': string;
            '693': string;
            '694': string;
            '695': string;
            '696': string;
            '697': string;
            '698': string;
            '699': string;
            '700': string;
            '701': string;
            '702': string;
            '703': string;
            '704': string;
            '705': string;
            '706': string;
            '707': string;
            '708': string;
            '709': string;
            '710': string;
            '711': string;
            '712': string;
            '713': string;
            '714': string;
            '715': string;
            '716': string;
            '717': string;
            '718': string;
            '719': string;
            '720': string;
            '721': string;
            '722': string;
            '723': string;
            '724': string;
            '725': string;
            '726': string;
            '727': string;
            '728': string;
            '729': string;
            '730': string;
            '731': string;
            '732': string;
            '733': string;
            '734': string;
            '735': string;
            '736': string;
            '737': string;
            '738': string;
            '739': string;
            '740': string;
            '741': string;
            '742': string;
            '743': string;
            '744': string;
            '745': string;
            '746': string;
            '747': string;
            '748': string;
            '749': string;
            '750': string;
            '751': string;
            '752': string;
            '753': string;
            '754': string;
            '755': string;
            '756': string;
            '757': string;
            '758': string;
            '759': string;
            '760': string;
            '761': string;
            '762': string;
            '763': string;
            '764': string;
            '765': string;
            '766': string;
            '767': string;
            '768': string;
            '769': string;
            '770': string;
            '771': string;
            '772': string;
            '773': string;
            '774': string;
            '775': string;
            '776': string;
            '777': string;
            '778': string;
            '779': string;
            '780': string;
            '781': string;
            '782': string;
            '783': string;
            '784': string;
            '785': string;
            '786': string;
            '787': string;
            '788': string;
            '789': string;
            '790': string;
            '791': string;
            '792': string;
            '793': string;
            '794': string;
            '795': string;
            '796': string;
            '797': string;
            '798': string;
            '799': string;
            '800': string;
            '801': string;
            '802': string;
            '803': string;
            '804': string;
            '805': string;
            '806': string;
            '807': string;
            '808': string;
            '809': string;
            '810': string;
            '811': string;
            '812': string;
            '813': string;
            '814': string;
            '815': string;
            '816': string;
            '817': string;
            '818': string;
            '819': string;
            '820': string;
            '821': string;
            '822': string;
            '823': string;
            '824': string;
            '825': string;
            '826': string;
            '827': string;
            '828': string;
            '829': string;
            '830': string;
            '831': string;
            '832': string;
            '833': string;
            '834': string;
            '835': string;
            '836': string;
            '837': string;
            '838': string;
            '839': string;
            '840': string;
            '841': string;
            '842': string;
            '843': string;
            '844': string;
            '845': string;
            '846': string;
            '847': string;
            '848': string;
            '849': string;
            '850': string;
            '851': string;
            '852': string;
            '853': string;
            '854': string;
            '855': string;
            '856': string;
            '857': string;
            '858': string;
            '859': string;
            '860': string;
            '861': string;
            '862': string;
            '863': string;
            '864': string;
            '865': string;
            '866': string;
            '867': string;
            '868': string;
            '869': string;
            '870': string;
            '871': string;
            '872': string;
            '873': string;
            '874': string;
            '875': string;
            '876': string;
            '877': string;
            '878': string;
            '879': string;
            '880': string;
            '881': string;
            '882': string;
            '883': string;
            '884': string;
            '885': string;
            '886': string;
            '887': string;
            '888': string;
            '889': string;
            '890': string;
            '891': string;
            '892': string;
            '893': string;
            '894': string;
            '895': string;
            '896': string;
            '897': string;
            '898': string;
            '899': string;
            '900': string;
            '901': string;
            '902': string;
            '903': string;
            '904': string;
            '905': string;
            '906': string;
            '907': string;
            '908': string;
            '909': string;
            '910': string;
            '911': string;
            '912': string;
            '913': string;
            '914': string;
            '915': string;
            '916': string;
            '917': string;
            '918': string;
            '919': string;
            '920': string;
            '921': string;
            '922': string;
            '923': string;
            '924': string;
            '925': string;
            '926': string;
            '927': string;
            '928': string;
            '929': string;
            '930': string;
            '931': string;
            '932': string;
            '933': string;
            '934': string;
            '935': string;
            '936': string;
            '937': string;
            '938': string;
            '939': string;
            '940': string;
            '941': string;
            '942': string;
            '943': string;
            '944': string;
            '945': string;
            '946': string;
            '947': string;
            '948': string;
            '949': string;
            '950': string;
            '951': string;
            '952': string;
            '953': string;
            '954': string;
            '955': string;
            '956': string;
            '957': string;
            '958': string;
            '959': string;
            '960': string;
            '961': string;
            '962': string;
            '963': string;
            '964': string;
            '965': string;
            '966': string;
            '967': string;
            '968': string;
            '969': string;
            '970': string;
            '971': string;
            '972': string;
            '973': string;
            '974': string;
            '975': string;
            '976': string;
            '977': string;
            '978': string;
            '979': string;
            '980': string;
            '981': string;
            '982': string;
            '983': string;
            '984': string;
            '985': string;
            '986': string;
            '987': string;
            '988': string;
            '989': string;
            '990': string;
            '991': string;
            '992': string;
            '993': string;
            '994': string;
            '995': string;
            '996': string;
            '997': string;
            '998': string;
            '999': string;
            '1000': string;
            '1001': string;
            '1002': string;
            '1003': string;
            '1004': string;
            '1005': string;
            '1006': string;
            '1007': string;
            '1008': string;
            '1009': string;
            '1010': string;
            '1011': string;
            '1012': string;
            '1013': string;
            '1014': string;
            '1015': string;
            '1016': string;
            '1017': string;
            '1018': string;
            '1019': string;
            '1020': string;
            '1021': string;
            '1022': string;
            '1023': string;
            '1024': string;
            '1025': string;
            '1026': string;
            '1027': string;
            '1028': string;
            '1029': string;
            '1030': string;
            '1031': string;
            '1032': string;
            '1033': string;
            '1034': string;
            '1035': string;
            '1036': string;
            '1037': string;
            '1038': string;
            '1039': string;
            '1040': string;
            '1041': string;
            '1042': string;
            '1043': string;
            '1044': string;
            '1045': string;
            '1046': string;
            '1047': string;
            '1048': string;
            '1049': string;
            '1050': string;
            '1051': string;
            '1052': string;
            '1053': string;
            '1054': string;
            '1055': string;
            '1056': string;
            '1057': string;
            '1058': string;
            '1059': string;
            '1060': string;
            '1061': string;
            '1062': string;
            '1063': string;
            '1064': string;
            '1065': string;
            '1066': string;
            '1067': string;
            '1068': string;
            '1069': string;
            '1070': string;
            '1071': string;
            '1072': string;
            '1073': string;
            '1074': string;
            '1075': string;
            '1076': string;
            '1077': string;
            '1078': string;
            '1079': string;
            '1080': string;
            '1081': string;
            '1082': string;
            '1083': string;
            '1084': string;
            '1085': string;
            '1086': string;
            '1087': string;
            '1088': string;
            '1089': string;
            '1090': string;
            '1091': string;
            '1092': string;
            '1093': string;
            '1094': string;
            '1095': string;
            '1096': string;
            '1097': string;
            '1098': string;
            '1099': string;
            '1100': string;
            '1101': string;
            '1102': string;
            '1103': string;
            '1104': string;
            '1105': string;
            '1106': string;
            '1107': string;
            '1108': string;
            '1109': string;
            '1110': string;
            '1111': string;
            '1112': string;
            '1113': string;
            '1114': string;
            '1115': string;
            '1116': string;
            '1117': string;
            '1118': string;
            '1119': string;
            '1120': string;
            '1121': string;
            '1122': string;
            '1123': string;
            '1124': string;
            '1125': string;
            '1126': string;
            '1127': string;
            '1128': string;
            '1129': string;
            '1130': string;
            '1131': string;
            '1132': string;
            '1133': string;
            '1134': string;
            '1135': string;
            '1136': string;
            '1137': string;
            '1138': string;
            '1139': string;
            '1140': string;
            '1141': string;
            '1142': string;
            '1143': string;
            '1144': string;
            '1145': string;
            '1146': string;
            '1147': string;
            '1148': string;
            '1149': string;
            '1150': string;
            '1151': string;
            '1152': string;
            '1153': string;
            '1154': string;
            '1155': string;
            '1156': string;
            '1157': string;
            '1158': string;
            '1159': string;
            '1160': string;
            '1161': string;
            '1162': string;
            '1163': string;
            '1164': string;
            '1165': string;
            '1166': string;
            '1167': string;
            '1168': string;
            '1169': string;
            '1170': string;
            '1171': string;
            '1172': string;
            '1173': string;
            '1174': string;
            '1175': string;
            '1176': string;
            '1177': string;
            '1178': string;
            '1179': string;
            '1180': string;
            '1181': string;
            '1182': string;
            '1183': string;
            '1184': string;
            '1185': string;
            '1186': string;
            '1187': string;
            '1188': string;
            '1189': string;
            '1190': string;
            '1191': string;
            '1192': string;
            '1193': string;
            '1194': string;
            '1195': string;
            '1196': string;
            '1197': string;
            '1198': string;
            '1199': string;
            '1200': string;
            '1201': string;
            '1202': string;
            '1203': string;
            '1204': string;
            '1205': string;
            '1206': string;
            '1207': string;
            '1208': string;
            '1209': string;
            '1210': string;
            '1211': string;
            '1212': string;
            '1213': string;
            '1214': string;
            '1215': string;
            '1216': string;
            '1217': string;
            '1218': string;
            '1219': string;
            '1220': string;
            '1221': string;
            '1222': string;
            '1223': string;
            '1224': string;
            '1225': string;
            '1226': string;
            '1227': string;
            '1228': string;
            '1229': string;
            '1230': string;
            '1231': string;
            '1232': string;
            '1233': string;
            '1234': string;
            '1235': string;
            '1236': string;
            '1237': string;
            '1238': string;
            '1239': string;
            '1240': string;
            '1241': string;
            '1242': string;
            '1243': string;
            '1244': string;
            '1245': string;
            '1246': string;
            '1247': string;
            '1248': string;
            '1249': string;
            '1250': string;
            '1251': string;
            '1252': string;
            '1253': string;
            '1254': string;
            '1255': string;
            '1256': string;
            '1257': string;
            '1258': string;
            '1259': string;
            '1260': string;
            '1261': string;
            '1262': string;
            '1263': string;
            '1264': string;
            '1265': string;
            '1266': string;
            '1267': string;
            '1268': string;
            '1269': string;
            '1270': string;
            '1271': string;
            '1272': string;
            '1273': string;
            '1274': string;
            '1275': string;
            '1276': string;
            '1277': string;
            '1278': string;
            '1279': string;
            '1280': string;
            '1281': string;
            '1282': string;
            '1283': string;
            '1284': string;
            '1285': string;
            '1286': string;
            '1287': string;
            '1288': string;
            '1289': string;
            '1290': string;
            '1291': string;
            '1292': string;
            '1293': string;
            '1294': string;
            '1295': string;
            '1296': string;
            '1297': string;
            '1298': string;
            '1299': string;
            '1300': string;
            '1301': string;
            '1302': string;
            '1303': string;
            '1304': string;
            '1305': string;
            '1306': string;
            '1307': string;
            '1308': string;
            '1309': string;
            '1310': string;
            '1311': string;
            '1312': string;
            '1313': string;
            '1314': string;
            '1315': string;
            '1316': string;
            '1317': string;
            '1318': string;
            '1319': string;
            '1320': string;
            '1321': string;
            '1322': string;
            '1323': string;
            '1324': string;
            '1325': string;
            '1326': string;
            '1327': string;
            '1328': string;
            '1329': string;
            '1330': string;
            '1331': string;
            '1332': string;
            '1333': string;
            '1334': string;
            '1335': string;
            '1336': string;
            '1337': string;
            '1338': string;
            '1339': string;
            '1340': string;
            '1341': string;
            '1342': string;
            '1343': string;
            '1344': string;
            '1345': string;
            '1346': string;
            '1347': string;
            '1348': string;
            '1349': string;
            '1350': string;
            '1351': string;
            '1352': string;
            '1353': string;
            '1354': string;
            '1355': string;
            '1356': string;
            '1357': string;
            '1358': string;
            '1359': string;
            '1360': string;
            '1361': string;
            '1362': string;
            '1363': string;
            '1364': string;
            '1365': string;
            '1366': string;
            '1367': string;
            '1368': string;
            '1369': string;
            '1370': string;
            '1371': string;
            '1372': string;
            '1373': string;
            '1374': string;
            '1375': string;
            '1376': string;
            '1377': string;
            '1378': string;
            '1379': string;
            '1380': string;
            '1381': string;
            '1382': string;
            '1383': string;
            '1384': string;
            '1385': string;
            '1386': string;
            '1387': string;
            '1388': string;
            '1389': string;
            '1390': string;
            '1391': string;
            '1392': string;
            '1393': string;
            '1394': string;
            '1395': string;
            '1396': string;
            '1397': string;
            '1398': string;
            '1399': string;
            '1400': string;
            '1401': string;
            '1402': string;
            '1403': string;
            '1404': string;
            '1405': string;
            '1406': string;
            '1407': string;
            '1408': string;
            '1409': string;
            '1410': string;
            '1411': string;
            '1412': string;
            '1413': string;
            '1414': string;
            '1415': string;
            '1416': string;
            '1417': string;
            '1418': string;
            '1419': string;
            '1420': string;
            '1421': string;
            '1422': string;
            '1423': string;
            '1424': string;
            '1425': string;
            '1426': string;
            '1427': string;
            '1428': string;
            '1429': string;
            '1430': string;
            '1431': string;
            '1432': string;
            '1433': string;
            '1434': string;
            '1435': string;
            '1436': string;
            '1437': string;
            '1438': string;
            '1439': string;
            '1440': string;
            '1441': string;
            '1442': string;
            '1443': string;
            '1444': string;
            '1445': string;
            '1446': string;
            '1447': string;
            '1448': string;
            '1449': string;
            '1450': string;
            '1451': string;
            '1452': string;
            '1453': string;
            '1454': string;
            '1455': string;
            '1456': string;
            '1457': string;
            '1458': string;
            '1459': string;
            '1460': string;
            '1461': string;
            '1462': string;
            '1463': string;
            '1464': string;
            '1465': string;
            '1466': string;
            '1467': string;
            '1468': string;
            '1469': string;
            '1470': string;
            '1471': string;
            '1472': string;
            '1473': string;
            '1474': string;
            '1475': string;
            '1476': string;
            '1477': string;
            '1478': string;
            '1479': string;
            '1480': string;
            '1481': string;
            '1482': string;
            '1483': string;
            '1484': string;
            '1485': string;
            '1486': string;
            '1487': string;
            '1488': string;
            '1489': string;
            '1490': string;
            '1491': string;
            '1492': string;
            '1493': string;
            '1494': string;
            '1495': string;
            '1496': string;
            '1497': string;
            '1498': string;
            '1499': string;
            '1500': string;
            '1501': string;
            '1502': string;
            '1503': string;
            '1504': string;
            '1505': string;
            '1506': string;
            '1507': string;
            '1508': string;
            '1509': string;
            '1510': string;
            '1511': string;
            '1512': string;
            '1513': string;
            '1514': string;
            '1515': string;
            '1516': string;
            '1517': string;
            '1518': string;
            '1519': string;
            '1520': string;
            '1521': string;
            '1522': string;
            '1523': string;
            '1524': string;
            '1525': string;
            '1526': string;
            '1527': string;
            '1528': string;
            '1529': string;
            '1530': string;
            '1531': string;
            '1532': string;
            '1533': string;
            '1534': string;
            '1535': string;
            '1536': string;
            '1537': string;
            '1538': string;
            '1539': string;
            '1540': string;
            '1541': string;
            '1542': string;
            '1543': string;
            '1544': string;
            '1545': string;
            '1546': string;
            '1547': string;
            '1548': string;
            '1549': string;
            '1550': string;
            '1551': string;
            '1552': string;
            '1553': string;
            '1554': string;
            '1555': string;
            '1556': string;
            '1557': string;
            '1558': string;
            '1559': string;
            '1560': string;
            '1561': string;
            '1562': string;
            '1563': string;
            '1564': string;
            '1565': string;
            '1566': string;
            '1567': string;
            '1568': string;
            '1569': string;
            '1570': string;
            '1571': string;
            '1572': string;
            '1573': string;
            '1574': string;
            '1575': string;
            '1576': string;
            '1577': string;
            '1578': string;
            '1579': string;
            '1580': string;
            '1581': string;
            '1582': string;
            '1583': string;
            '1584': string;
            '1585': string;
            '1586': string;
            '1587': string;
            '1588': string;
            '1589': string;
            '1590': string;
            '1591': string;
            '1592': string;
            '1593': string;
            '1594': string;
            '1595': string;
            '1596': string;
            '1597': string;
            '1598': string;
            '1599': string;
            '1600': string;
            '1601': string;
            '1602': string;
            '1603': string;
            '1604': string;
            '1605': string;
            '1606': string;
            '1607': string;
            '1608': string;
            '1609': string;
            '1610': string;
            '1611': string;
            '1612': string;
            '1613': string;
            '1614': string;
            '1615': string;
            '1616': string;
            '1617': string;
            '1618': string;
            '1619': string;
            '1620': string;
            '1621': string;
            '1622': string;
            '1623': string;
            '1624': string;
            '1625': string;
            '1626': string;
            '1627': string;
            '1628': string;
            '1629': string;
            '1630': string;
            '1631': string;
            '1632': string;
            '1633': string;
            '1634': string;
            '1635': string;
            '1636': string;
            '1637': string;
            '1638': string;
            '1639': string;
            '1640': string;
            '1641': string;
            '1642': string;
            '1643': string;
            '1644': string;
            '1645': string;
            '1646': string;
            '1647': string;
            '1648': string;
            '1649': string;
            '1650': string;
            '1651': string;
            '1652': string;
            '1653': string;
            '1654': string;
            '1655': string;
            '1656': string;
            '1657': string;
            '1658': string;
            '1659': string;
            '1660': string;
            '1661': string;
            '1662': string;
            '1663': string;
            '1664': string;
            '1665': string;
            '1666': string;
            '1667': string;
            '1668': string;
            '1669': string;
            '1670': string;
            '1671': string;
            '1672': string;
            '1673': string;
            '1674': string;
            '1675'?: string;
            '1676'?: string;
            '1677'?: string;
            '1678'?: string;
            '1679'?: string;
            '1680'?: string;
            '1681'?: string;
            '1682'?: string;
            '1683'?: string;
            '1684'?: string;
            '1685'?: string;
            '1686'?: string;
            '1687'?: string;
            '1688'?: string;
            '1689'?: string;
            '1690'?: string;
            '1691'?: string;
            '1692'?: string;
            '1693'?: string;
            '1694'?: string;
            '1695'?: string;
            '1696'?: string;
            '1697'?: string;
            '1698'?: string;
            '1699'?: string;
            '1700'?: string;
            '1701'?: string;
            '1702'?: string;
            '1703'?: string;
            '1704'?: string;
            '1705'?: string;
            '1706'?: string;
            '1707'?: string;
            '1708'?: string;
            '1709'?: string;
            '1710'?: string;
            '1711'?: string;
            '1712'?: string;
            '1713'?: string;
            '1714'?: string;
            '1715'?: string;
            '1716'?: string;
            '1717'?: string;
            '1718'?: string;
            '1719'?: string;
            '1720'?: string;
            '1721'?: string;
            '1722'?: string;
            '1723'?: string;
            '1724'?: string;
            '1725'?: string;
            '1726'?: string;
            '1727'?: string;
            '1728'?: string;
            '1729'?: string;
            '1730'?: string;
            '1731'?: string;
            '1732'?: string;
            '1733'?: string;
            '1734'?: string;
            '1735'?: string;
            '1736'?: string;
            '1737'?: string;
            '1738'?: string;
            '1739'?: string;
            '1740'?: string;
            '1741'?: string;
            '1742'?: string;
            '1743'?: string;
            '1744'?: string;
            '1745'?: string;
            '1746'?: string;
            '1747'?: string;
            '1748'?: string;
            '1749'?: string;
            '1750'?: string;
            '1751'?: string;
            '1752'?: string;
            '1753'?: string;
            '1754'?: string;
            '1755'?: string;
            '1756'?: string;
            '1757'?: string;
            '1758'?: string;
            '1759'?: string;
            '1760'?: string;
            '1761'?: string;
            '1762'?: string;
            '1763'?: string;
            '1764'?: string;
            '1765'?: string;
            '1766'?: string;
            '1767'?: string;
            '1768'?: string;
            '1769'?: string;
            '1770'?: string;
            '1771'?: string;
            '1772'?: string;
            '1773'?: string;
            '1774'?: string;
            '1775'?: string;
            '1776'?: string;
            '1777'?: string;
            '1778'?: string;
            '1779'?: string;
            '1780'?: string;
            '1781'?: string;
            '1782'?: string;
            '1783'?: string;
            '1784'?: string;
            '1785'?: string;
            '1786'?: string;
            '1787'?: string;
            '1788'?: string;
            '1789'?: string;
            '1790'?: string;
            '1791'?: string;
            '1792'?: string;
            '1793'?: string;
            '1794'?: string;
            '1795'?: string;
            '1796'?: string;
            '1797'?: string;
            '1798'?: string;
            '1799'?: string;
            '1800'?: string;
            '1801'?: string;
            '1802'?: string;
            '1803'?: string;
            '1804'?: string;
            '1805'?: string;
            '1806'?: string;
            '1807'?: string;
            '1808'?: string;
            '1809'?: string;
            '1810'?: string;
            '1811'?: string;
            '1812'?: string;
            '1813'?: string;
            '1814'?: string;
            '1815'?: string;
            '1816'?: string;
            '1817'?: string;
            '1818'?: string;
            '1819'?: string;
            '1820'?: string;
            '1821'?: string;
            '1822'?: string;
            '1823'?: string;
            '1824'?: string;
            '1825'?: string;
            '1826'?: string;
            '1827'?: string;
            '1828'?: string;
            '1829'?: string;
            '1830'?: string;
            '1831'?: string;
            '1832'?: string;
            '1833'?: string;
            '1834'?: string;
            '1835'?: string;
            '1836'?: string;
            '1837'?: string;
            '1838'?: string;
            '1839'?: string;
            '1840'?: string;
            '1841'?: string;
            '1842'?: string;
            '1843'?: string;
            '1844'?: string;
            '1845'?: string;
            '1846'?: string;
            '1847'?: string;
            '1848'?: string;
            '1849'?: string;
            '1850'?: string;
            '1851'?: string;
            '1852'?: string;
            '1853'?: string;
            '1854'?: string;
            '1855'?: string;
            '1856'?: string;
            '1857'?: string;
            '1858'?: string;
            '1859'?: string;
            '1860'?: string;
            '1861'?: string;
            '1862'?: string;
            '1863'?: string;
            '1864'?: string;
            '1865'?: string;
            '1866'?: string;
            '1867'?: string;
            '1868'?: string;
            '1869'?: string;
            '1870'?: string;
            '1871'?: string;
            '1872'?: string;
            '1873'?: string;
            '1874'?: string;
            '1875'?: string;
            '1876'?: string;
            '1877'?: string;
            '1878'?: string;
            '1879'?: string;
            '1880'?: string;
            '1881'?: string;
            '1882'?: string;
            '1883'?: string;
            '1884'?: string;
            '1885'?: string;
            '1886'?: string;
            '1887'?: string;
            '1888'?: string;
            '1889'?: string;
            '1890'?: string;
            '1891'?: string;
            '1892'?: string;
            '1893'?: string;
            '1894'?: string;
            '1895'?: string;
            '1896'?: string;
            '1897'?: string;
            '1898'?: string;
            '1899'?: string;
            '1900'?: string;
            '1901'?: string;
            '1902'?: string;
            '1903'?: string;
            '1904'?: string;
            '1905'?: string;
            '1906'?: string;
            '1907'?: string;
            '1908'?: string;
            '1909'?: string;
            '1910'?: string;
            '1911'?: string;
            '1912'?: string;
            '1913'?: string;
            '1914'?: string;
            '1915'?: string;
            '1916'?: string;
            '1917'?: string;
            '1918'?: string;
            '1919'?: string;
            '1920'?: string;
            '1921'?: string;
            '1922'?: string;
            '1923'?: string;
            '1924'?: string;
            '1925'?: string;
            '1926'?: string;
            '1927'?: string;
            '1928'?: string;
            '1929'?: string;
            '1930'?: string;
            '1931'?: string;
            '1932'?: string;
            '1933'?: string;
            '1934'?: string;
            '1935'?: string;
            '1936'?: string;
            '1937'?: string;
            '1938'?: string;
            '1939'?: string;
            '1940'?: string;
            '1941'?: string;
            '1942'?: string;
            '1943'?: string;
            '1944'?: string;
            '1945'?: string;
            '1946'?: string;
            '1947'?: string;
            '1948'?: string;
            '1949'?: string;
            '1950'?: string;
            '1951'?: string;
            '1952'?: string;
            '1953'?: string;
            '1954'?: string;
            '1955'?: string;
            '1956'?: string;
            '1957'?: string;
            '1958'?: string;
            '1959'?: string;
            '1960'?: string;
            '1961'?: string;
            '1962'?: string;
            '1963'?: string;
            '1964'?: string;
            '1965'?: string;
            '1966'?: string;
            '1967'?: string;
            '1968'?: string;
            '1969'?: string;
            '1970'?: string;
            '1971'?: string;
            '1972'?: string;
            '1973'?: string;
            '1974'?: string;
            '1975'?: string;
            '1976'?: string;
            '1977'?: string;
            '1978'?: string;
            '1979'?: string;
            '1980'?: string;
            '1981'?: string;
            '1982'?: string;
            '1983'?: string;
            '1984'?: string;
            '1985'?: string;
            '1986'?: string;
            '1987'?: string;
            '1988'?: string;
            '1989'?: string;
            '1990'?: string;
            '1991'?: string;
            '1992'?: string;
            '1993'?: string;
            '1994'?: string;
            '1995'?: string;
            '1996'?: string;
            '1997'?: string;
            '1998'?: string;
            '1999'?: string;
            '2000'?: string;
            '2001'?: string;
            '2002'?: string;
            '2003'?: string;
            '2004'?: string;
            '2005'?: string;
            '2006'?: string;
            '2007'?: string;
            '2008'?: string;
            '2009'?: string;
            '2010'?: string;
            '2011'?: string;
            '2012'?: string;
            '2013'?: string;
            '2014'?: string;
            '2015'?: string;
            '2016'?: string;
            '2017'?: string;
            '2018'?: string;
            '2019'?: string;
            '2020'?: string;
            '2021'?: string;
            '2022'?: string;
            '2023'?: string;
            '2024'?: string;
            '2025'?: string;
            '2026'?: string;
            '2027'?: string;
            '2028'?: string;
            '2029'?: string;
            '2030'?: string;
            '2031'?: string;
            '2032'?: string;
            '2033'?: string;
            '2034'?: string;
            '2035'?: string;
            '2036'?: string;
            '2037'?: string;
            '2038'?: string;
            '2039'?: string;
            '2040'?: string;
            '2041'?: string;
            '2042'?: string;
            '2043'?: string;
            '2044'?: string;
            '2045'?: string;
            '2046'?: string;
            '2047'?: string;
            '2048'?: string;
            '2049'?: string;
            '2050'?: string;
            '2051'?: string;
            '2052'?: string;
            '2053'?: string;
            '2054'?: string;
            '2055'?: string;
            '2056'?: string;
            '2057'?: string;
            '2058'?: string;
            '2059'?: string;
            '2060'?: string;
            '2061'?: string;
            '2062'?: string;
            '2063'?: string;
            '2064'?: string;
            '2065'?: string;
            '2066'?: string;
            '2067'?: string;
            '2068'?: string;
            '2069'?: string;
            '2070'?: string;
            '2071'?: string;
            '2072'?: string;
            '2073'?: string;
            '2074'?: string;
            '2075'?: string;
            '2076'?: string;
            '2077'?: string;
            '2078'?: string;
            '2079'?: string;
            '2080'?: string;
            '2081'?: string;
            '2082'?: string;
            '2083'?: string;
            '2084'?: string;
            '2085'?: string;
            '2086'?: string;
            '2087'?: string;
            '2088'?: string;
            '2089'?: string;
            '2090'?: string;
            '2091'?: string;
            '2092'?: string;
            '2093'?: string;
            '2094'?: string;
            '2095'?: string;
            '2096'?: string;
            '2097'?: string;
            '2098'?: string;
            '2099'?: string;
            '2100'?: string;
            '2101'?: string;
            '2102'?: string;
            '2103'?: string;
            '2104'?: string;
            '2105'?: string;
            '2106'?: {
            
            };
            '2107'?: {
            
            };
            '2108'?: {
            
            };
            '2109'?: {
            
            };
            '2110'?: {
            
            };
            '2111'?: {
            
            };
            '2112'?: {
            
            };
            '2113'?: {
            
            };
            '2114'?: {
            
            };
            '2115'?: {
            
            };
            '2116'?: {
            
            };
            '2117'?: {
            
            };
            '2118'?: {
            
            };
            '2119'?: {
            
            };
            '2120'?: {
            
            };
            '2121'?: {
            
            };
            '2122'?: {
            
            };
            '2123'?: {
            
            };
            '2124'?: {
            
            };
            '2125'?: {
            
            };
            '2126'?: {
            
            };
            '2127'?: {
            
            };
            '2128'?: {
            
            };
            '2129'?: {
            
            };
            '2130'?: {
            
            };
            '2131'?: {
            
            };
            '2132'?: {
            
            };
            '2133'?: {
            
            };
            '2134'?: {
            
            };
            '2135'?: {
            
            };
            '2136'?: {
            
            };
            '2137'?: {
            
            };
            '2138'?: {
            
            };
            '2139'?: {
            
            };
            '2140'?: {
            
            };
            '2141'?: {
            
            };
            '2142'?: {
            
            };
            '2143'?: {
            
            };
            '2144'?: {
            
            };
            '2145'?: {
            
            };
            '2146'?: {
            
            };
            '2147'?: {
            
            };
            '2148'?: {
            
            };
            '2149'?: {
            
            };
            '2150'?: {
            
            };
            '2151'?: {
            
            };
            '2152'?: {
            
            };
            '2153'?: {
            
            };
            '2154'?: {
            
            };
            '2155'?: {
            
            };
            '2156'?: {
            
            };
            '2157'?: {
            
            };
            '2158'?: {
            
            };
            '2159'?: {
            
            };
            '2160'?: {
            
            };
            '2161'?: {
            
            };
            '2162'?: {
            
            };
            '2163'?: {
            
            };
            '2164'?: {
            
            };
            '2165'?: {
            
            };
            '2166'?: {
            
            };
            '2167'?: {
            
            };
            '2168'?: {
            
            };
            '2169'?: {
            
            };
            '2170'?: {
            
            };
            '2171'?: {
            
            };
            '2172'?: {
            
            };
            '2173'?: {
            
            };
            '2174'?: {
            
            };
            '2175'?: {
            
            };
            '2176'?: {
            
            };
            '2177'?: {
            
            };
            '2178'?: {
            
            };
            '2179'?: {
            
            };
            '2180'?: {
            
            };
            '2181'?: {
            
            };
            '2182'?: {
            
            };
            '2183'?: {
            
            };
            '2184'?: {
            
            };
            '2185'?: {
            
            };
            '2186'?: {
            
            };
            '2187'?: {
            
            };
            '2188'?: {
            
            };
            '2189'?: {
            
            };
            '2190'?: {
            
            };
            '2191'?: {
            
            };
            '2192'?: {
            
            };
            '2193'?: {
            
            };
            '2194'?: {
            
            };
            '2195'?: {
            
            };
            '2196'?: {
            
            };
            '2197'?: {
            
            };
            '2198'?: {
            
            };
            '2199'?: {
            
            };
            '2200'?: {
            
            };
            '2201'?: {
            
            };
            '2202'?: {
            
            };
            '2203'?: {
            
            };
            '2204'?: {
            
            };
            '2205'?: {
            
            };
            '2206'?: {
            
            };
            '2207'?: {
            
            };
            '2208'?: {
            
            };
            '2209'?: {
            
            };
            '2210'?: {
            
            };
            '2211'?: {
            
            };
            '2212'?: {
            
            };
            '2213'?: {
            
            };
            '2214'?: {
            
            };
            '2215'?: {
            
            };
            '2216'?: {
            
            };
            '2217'?: {
            
            };
            '2218'?: {
            
            };
            '2219'?: {
            
            };
            '2220'?: {
            
            };
            '2221'?: {
            
            };
            '2222'?: {
            
            };
            '2223'?: {
            
            };
            '2224'?: {
            
            };
            '2225'?: {
            
            };
            '2226'?: {
            
            };
            '2227'?: {
            
            };
            '2228'?: {
            
            };
            '2229'?: {
            
            };
            '2230'?: {
            
            };
            '2231'?: {
            
            };
            '2232'?: {
            
            };
            '2233'?: {
            
            };
            '2234'?: {
            
            };
            '2235'?: {
            
            };
            '2236'?: {
            
            };
            '2237'?: {
            
            };
            '2238'?: {
            
            };
            '2239'?: {
            
            };
            '2240'?: {
            
            };
            '2241'?: {
            
            };
            '2242'?: {
            
            };
            '2243'?: {
            
            };
            '2244'?: {
            
            };
            '2245'?: {
            
            };
            '2246'?: {
            
            };
            '2247'?: {
            
            };
            '2248'?: {
            
            };
            '2249'?: {
            
            };
            '2250'?: {
            
            };
            '2251'?: {
            
            };
            '2252'?: {
            
            };
            '2253'?: {
            
            };
            '2254'?: {
            
            };
            '2255'?: {
            
            };
            '2256'?: {
            
            };
            '2257'?: {
            
            };
            '2258'?: {
            
            };
            '2259'?: {
            
            };
            '2260'?: {
            
            };
            '2261'?: {
            
            };
            '2262'?: {
            
            };
            '2263'?: {
            
            };
            '2264'?: {
            
            };
            '2265'?: {
            
            };
            '2266'?: {
            
            };
            '2267'?: {
            
            };
            '2268'?: {
            
            };
            '2269'?: {
            
            };
            '2270'?: {
            
            };
            '2271'?: {
            
            };
            '2272'?: {
            
            };
            '2273'?: {
            
            };
            '2274'?: {
            
            };
            '2275'?: {
            
            };
            '2276'?: {
            
            };
            '2277'?: {
            
            };
            '2278'?: {
            
            };
            '2279'?: {
            
            };
            '2280'?: {
            
            };
            '2281'?: {
            
            };
            '2282'?: {
            
            };
            '2283'?: {
            
            };
            '2284'?: {
            
            };
            '2285'?: {
            
            };
            '2286'?: {
            
            };
            '2287'?: {
            
            };
            '2288'?: {
            
            };
            '2289'?: {
            
            };
            '2290'?: {
            
            };
            '2291'?: {
            
            };
            '2292'?: {
            
            };
            '2293'?: {
            
            };
            '2294'?: {
            
            };
            '2295'?: {
            
            };
            '2296'?: {
            
            };
            '2297'?: {
            
            };
            '2298'?: {
            
            };
            '2299'?: {
            
            };
            '2300'?: {
            
            };
            '2301'?: {
            
            };
            '2302'?: {
            
            };
            '2303'?: {
            
            };
            '2304'?: {
            
            };
            '2305'?: {
            
            };
            '2306'?: {
            
            };
            '2307'?: {
            
            };
            '2308'?: {
            
            };
            '2309'?: {
            
            };
            '2310'?: {
            
            };
            '2311'?: {
            
            };
            '2312'?: {
            
            };
            '2313'?: {
            
            };
            '2314'?: {
            
            };
            '2315'?: {
            
            };
            '2316'?: {
            
            };
            '2317'?: {
            
            };
            '2318'?: {
            
            };
            '2319'?: {
            
            };
            '2320'?: {
            
            };
            '2321'?: {
            
            };
            '2322'?: {
            
            };
            '2323'?: {
            
            };
            '2324'?: {
            
            };
            '2325'?: {
            
            };
            '2326'?: {
            
            };
            '2327'?: {
            
            };
            '2328'?: {
            
            };
            '2329'?: {
            
            };
            '2330'?: {
            
            };
            '2331'?: {
            
            };
            '2332'?: {
            
            };
            '2333'?: {
            
            };
            '2334'?: {
            
            };
            '2335'?: {
            
            };
            '2336'?: {
            
            };
            '2337'?: {
            
            };
            '2338'?: {
            
            };
            '2339'?: {
            
            };
            '2340'?: {
            
            };
            '2341'?: {
            
            };
            '2342'?: {
            
            };
            '2343'?: {
            
            };
            '2344'?: {
            
            };
            '2345'?: {
            
            };
            '2346'?: {
            
            };
            '2347'?: {
            
            };
            '2348'?: {
            
            };
            '2349'?: {
            
            };
            '2350'?: {
            
            };
            '2351'?: {
            
            };
            '2352'?: {
            
            };
            '2353'?: {
            
            };
            '2354'?: {
            
            };
            '2355'?: {
            
            };
            '2356'?: {
            
            };
            '2357'?: {
            
            };
            '2358'?: {
            
            };
            '2359'?: {
            
            };
            '2360'?: {
            
            };
            '2361'?: {
            
            };
            '2362'?: {
            
            };
            '2363'?: {
            
            };
            '2364'?: {
            
            };
            '2365'?: {
            
            };
            '2366'?: {
            
            };
            '2367'?: {
            
            };
            '2368'?: {
            
            };
            '2369'?: {
            
            };
            '2370'?: {
            
            };
            '2371'?: {
            
            };
            '2372'?: {
            
            };
            '2373'?: {
            
            };
            '2374'?: {
            
            };
            '2375'?: {
            
            };
            '2376'?: {
            
            };
            '2377'?: {
            
            };
            '2378'?: {
            
            };
            '2379'?: {
            
            };
            '2380'?: {
            
            };
            '2381'?: {
            
            };
            '2382'?: {
            
            };
            '2383'?: {
            
            };
            '2384'?: {
            
            };
            '2385'?: {
            
            };
            '2386'?: {
            
            };
            '2387'?: {
            
            };
            '2388'?: {
            
            };
            '2389'?: {
            
            };
            '2390'?: {
            
            };
            '2391'?: {
            
            };
            '2392'?: {
            
            };
            '2393'?: {
            
            };
            '2394'?: {
            
            };
            '2395'?: {
            
            };
            '2396'?: {
            
            };
            '2397'?: {
            
            };
            '2398'?: {
            
            };
            '2399'?: {
            
            };
            '2400'?: {
            
            };
            '2401'?: {
            
            };
            '2402'?: {
            
            };
            '2403'?: {
            
            };
            '2404'?: {
            
            };
            '2405'?: {
            
            };
            '2406'?: {
            
            };
            '2407'?: {
            
            };
            '2408'?: {
            
            };
            '2409'?: {
            
            };
            '2410'?: {
            
            };
            '2411'?: {
            
            };
            '2412'?: {
            
            };
            '2413'?: {
            
            };
            '2414'?: {
            
            };
            '2415'?: {
            
            };
            '2416'?: {
            
            };
            '2417'?: {
            
            };
            '2418'?: {
            
            };
            '2419'?: {
            
            };
            '2420'?: {
            
            };
            '2421'?: {
            
            };
            '2422'?: {
            
            };
            '2423'?: {
            
            };
            '2424'?: {
            
            };
            '2425'?: {
            
            };
            '2426'?: {
            
            };
            '2427'?: {
            
            };
            '2428'?: {
            
            };
            '2429'?: {
            
            };
            '2430'?: {
            
            };
            '2431'?: {
            
            };
            '2432'?: {
            
            };
            '2433'?: {
            
            };
            '2434'?: {
            
            };
            '2435'?: {
            
            };
            '2436'?: {
            
            };
            '2437'?: {
            
            };
            '2438'?: {
            
            };
            '2439'?: {
            
            };
            '2440'?: {
            
            };
            '2441'?: {
            
            };
            '2442'?: {
            
            };
            '2443'?: {
            
            };
            '2444'?: {
            
            };
            '2445'?: {
            
            };
            '2446'?: {
            
            };
            '2447'?: {
            
            };
            '2448'?: {
            
            };
            '2449'?: {
            
            };
            '2450'?: {
            
            };
            '2451'?: {
            
            };
            '2452'?: {
            
            };
            '2453'?: {
            
            };
            '2454'?: {
            
            };
            '2455'?: {
            
            };
            '2456'?: {
            
            };
            '2457'?: {
            
            };
            '2458'?: {
            
            };
            '2459'?: {
            
            };
            '2460'?: {
            
            };
            '2461'?: {
            
            };
            '2462'?: {
            
            };
            '2463'?: {
            
            };
            '2464'?: {
            
            };
            '2465'?: {
            
            };
            '2466'?: {
            
            };
            '2467'?: {
            
            };
            '2468'?: {
            
            };
            '2469'?: {
            
            };
            '2470'?: {
            
            };
            '2471'?: {
            
            };
            '2472'?: {
            
            };
            '2473'?: {
            
            };
            '2474'?: {
            
            };
            '2475'?: {
            
            };
            '2476'?: {
            
            };
            '2477'?: {
            
            };
            '2478'?: {
            
            };
            '2479'?: {
            
            };
            '2480'?: {
            
            };
            '2481'?: {
            
            };
            '2482'?: {
            
            };
            '2483'?: {
            
            };
            '2484'?: {
            
            };
            '2485'?: {
            
            };
            '2486'?: {
            
            };
            '2487'?: {
            
            };
            '2488'?: {
            
            };
            '2489'?: {
            
            };
            '2490'?: {
            
            };
            '2491'?: {
            
            };
            '2492'?: {
            
            };
            '2493'?: {
            
            };
            '2494'?: {
            
            };
            '2495'?: {
            
            };
            '2496'?: {
            
            };
            '2497'?: {
            
            };
            '2498'?: {
            
            };
            '2499'?: {
            
            };
            '2500'?: {
            
            };
            '2501'?: {
            
            };
            '2502'?: {
            
            };
            '2503'?: {
            
            };
            '2504'?: {
            
            };
            '2505'?: {
            
            };
            '2506'?: {
            
            };
            '2507'?: {
            
            };
            '2508'?: {
            
            };
            '2509'?: {
            
            };
            '2510'?: {
            
            };
            '2511'?: {
            
            };
            '2512'?: {
            
            };
            '2513'?: {
            
            };
            '2514'?: {
            
            };
            '2515'?: {
            
            };
            '2516'?: {
            
            };
            '2517'?: {
            
            };
            '2518'?: {
            
            };
            '2519'?: {
            
            };
            '2520'?: {
            
            };
            '2521'?: {
            
            };
            '2522'?: {
            
            };
            '2523'?: {
            
            };
            '2524'?: {
            
            };
            '2525'?: {
            
            };
            '2526'?: {
            
            };
            '2527'?: {
            
            };
            '2528'?: {
            
            };
            '2529'?: {
            
            };
            '2530'?: {
            
            };
            '2531'?: {
            
            };
            '2532'?: {
            
            };
            '2533'?: {
            
            };
            '2534'?: {
            
            };
            '2535'?: {
            
            };
            '2536'?: {
            
            };
            '2537'?: {
            
            };
            '2538'?: {
            
            };
            '2539'?: {
            
            };
            '2540'?: {
            
            };
            '2541'?: {
            
            };
            '2542'?: {
            
            };
            '2543'?: {
            
            };
            '2544'?: {
            
            };
            '2545'?: {
            
            };
            '2546'?: {
            
            };
            '2547'?: {
            
            };
            '2548'?: {
            
            };
            '2549'?: {
            
            };
            '2550'?: {
            
            };
            '2551'?: {
            
            };
            '2552'?: {
            
            };
            '2553'?: {
            
            };
            '2554'?: {
            
            };
            '2555'?: {
            
            };
            '2556'?: {
            
            };
            '2557'?: {
            
            };
            '2558'?: {
            
            };
            '2559'?: {
            
            };
            '2560'?: {
            
            };
            '2561'?: {
            
            };
            '2562'?: {
            
            };
            '2563'?: {
            
            };
            '2564'?: {
            
            };
            '2565'?: {
            
            };
            '2566'?: {
            
            };
            '2567'?: {
            
            };
            '2568'?: {
            
            };
            '2569'?: {
            
            };
            '2570'?: {
            
            };
            '2571'?: {
            
            };
            '2572'?: {
            
            };
            '2573'?: {
            
            };
            '2574'?: {
            
            };
            '2575'?: {
            
            };
            '2576'?: {
            
            };
            '2577'?: {
            
            };
            '2578'?: {
            
            };
            '2579'?: {
            
            };
            '2580'?: {
            
            };
            '2581'?: {
            
            };
            '2582'?: {
            
            };
            '2583'?: {
            
            };
            '2584'?: {
            
            };
            '2585'?: {
            
            };
            '2586'?: {
            
            };
            '2587'?: {
            
            };
            '2588'?: {
            
            };
            '2589'?: {
            
            };
            '2590'?: {
            
            };
            '2591'?: {
            
            };
            '2592'?: {
            
            };
            '2593'?: {
            
            };
            '2594'?: {
            
            };
            '2595'?: {
            
            };
            '2596'?: {
            
            };
            '2597'?: {
            
            };
            '2598'?: {
            
            };
            '2599'?: {
            
            };
            '2600'?: {
            
            };
            '2601'?: {
            
            };
            '2602'?: {
            
            };
            '2603'?: {
            
            };
            '2604'?: {
            
            };
            '2605'?: {
            
            };
            '2606'?: {
            
            };
            '2607'?: {
            
            };
            '2608'?: {
            
            };
            '2609'?: {
            
            };
            '2610'?: {
            
            };
            '2611'?: {
            
            };
            '2612'?: {
            
            };
            '2613'?: {
            
            };
            '2614'?: {
            
            };
            '2615'?: {
            
            };
            '2616'?: {
            
            };
            '2617'?: {
            
            };
            '2618'?: {
            
            };
            '2619'?: {
            
            };
            '2620'?: {
            
            };
            '2621'?: {
            
            };
            '2622'?: {
            
            };
            '2623'?: {
            
            };
            '2624'?: {
            
            };
            '2625'?: {
            
            };
            '2626'?: {
            
            };
            '2627'?: {
            
            };
            '2628'?: {
            
            };
            '2629'?: {
            
            };
            '2630'?: {
            
            };
            '2631'?: {
            
            };
            '2632'?: {
            
            };
            '2633'?: {
            
            };
            '2634'?: {
            
            };
            '2635'?: {
            
            };
            '2636'?: {
            
            };
            '2637'?: {
            
            };
            '2638'?: {
            
            };
            '2639'?: {
            
            };
            '2640'?: {
            
            };
            '2641'?: {
            
            };
            '2642'?: {
            
            };
            '2643'?: {
            
            };
            '2644'?: {
            
            };
            '2645'?: {
            
            };
            '2646'?: {
            
            };
            '2647'?: {
            
            };
            '2648'?: {
            
            };
            '2649'?: {
            
            };
            '2650'?: {
            
            };
            '2651'?: {
            
            };
            '2652'?: {
            
            };
            '2653'?: {
            
            };
            '2654'?: {
            
            };
            '2655'?: {
            
            };
            '2656'?: {
            
            };
            '2657'?: {
            
            };
            '2658'?: {
            
            };
            '2659'?: {
            
            };
            '2660'?: {
            
            };
            '2661'?: {
            
            };
            '2662'?: {
            
            };
            '2663'?: {
            
            };
            '2664'?: {
            
            };
            '2665'?: {
            
            };
            '2666'?: {
            
            };
            '2667'?: {
            
            };
            '2668'?: {
            
            };
            '2669'?: {
            
            };
            '2670'?: {
            
            };
            '2671'?: {
            
            };
            '2672'?: {
            
            };
            '2673'?: {
            
            };
            '2674'?: {
            
            };
            '2675'?: {
            
            };
            '2676'?: {
            
            };
            '2677'?: {
            
            };
            '2678'?: {
            
            };
            '2679'?: {
            
            };
            '2680'?: {
            
            };
            '2681'?: {
            
            };
            '2682'?: {
            
            };
            '2683'?: {
            
            };
            '2684'?: {
            
            };
            '2685'?: {
            
            };
            '2686'?: {
            
            };
            '2687'?: {
            
            };
            '2688'?: {
            
            };
            '2689'?: {
            
            };
            '2690'?: {
            
            };
            '2691'?: {
            
            };
            '2692'?: {
            
            };
            '2693'?: {
            
            };
            '2694'?: {
            
            };
            '2695'?: {
            
            };
            '2696'?: {
            
            };
            '2697'?: {
            
            };
            '2698'?: {
            
            };
            '2699'?: {
            
            };
            '2700'?: {
            
            };
            '2701'?: {
            
            };
            '2702'?: {
            
            };
            '2703'?: {
            
            };
            '2704'?: {
            
            };
            '2705'?: {
            
            };
            '2706'?: {
            
            };
            '2707'?: {
            
            };
            '2708'?: {
            
            };
            '2709'?: {
            
            };
            '2710'?: {
            
            };
            '2711'?: {
            
            };
            '2712'?: {
            
            };
            '2713'?: {
            
            };
            '2714'?: {
            
            };
            '2715'?: {
            
            };
            '2716'?: {
            
            };
            '2717'?: {
            
            };
            '2718'?: {
            
            };
            '2719'?: {
            
            };
            '2720'?: {
            
            };
            '2721'?: {
            
            };
            '2722'?: {
            
            };
            '2723'?: {
            
            };
            '2724'?: {
            
            };
            '2725'?: {
            
            };
            '2726'?: {
            
            };
            '2727'?: {
            
            };
            '2728'?: {
            
            };
            '2729'?: {
            
            };
            '2730'?: {
            
            };
            '2731'?: {
            
            };
            '2732'?: {
            
            };
            '2733'?: {
            
            };
            '2734'?: {
            
            };
            '2735'?: {
            
            };
            '2736'?: {
            
            };
            '2737'?: {
            
            };
            '2738'?: {
            
            };
            '2739'?: {
            
            };
            '2740'?: {
            
            };
            '2741'?: {
            
            };
            '2742'?: {
            
            };
            '2743'?: {
            
            };
            '2744'?: {
            
            };
            '2745'?: {
            
            };
            '2746'?: {
            
            };
            '2747'?: {
            
            };
            '2748'?: {
            
            };
            '2749'?: {
            
            };
            '2750'?: {
            
            };
            '2751'?: {
            
            };
            '2752'?: {
            
            };
            '2753'?: {
            
            };
            '2754'?: {
            
            };
            '2755'?: {
            
            };
            '2756'?: {
            
            };
            '2757'?: {
            
            };
            '2758'?: {
            
            };
            '2759'?: {
            
            };
            '2760'?: {
            
            };
            '2761'?: {
            
            };
            '2762'?: {
            
            };
            '2763'?: {
            
            };
            '2764'?: {
            
            };
            '2765'?: {
            
            };
            '2766'?: {
            
            };
            '2767'?: {
            
            };
            '2768'?: {
            
            };
            '2769'?: {
            
            };
            '2770'?: {
            
            };
            '2771'?: {
            
            };
            '2772'?: {
            
            };
            '2773'?: {
            
            };
            '2774'?: {
            
            };
            '2775'?: {
            
            };
            '2776'?: {
            
            };
            '2777'?: {
            
            };
            '2778'?: {
            
            };
            '2779'?: {
            
            };
            '2780'?: {
            
            };
            '2781'?: {
            
            };
            '2782'?: {
            
            };
            '2783'?: {
            
            };
            '2784'?: {
            
            };
            '2785'?: {
            
            };
            '2786'?: {
            
            };
            '2787'?: {
            
            };
            '2788'?: {
            
            };
            '2789'?: {
            
            };
            '2790'?: {
            
            };
            '2791'?: {
            
            };
            '2792'?: {
            
            };
            '2793'?: {
            
            };
            '2794'?: {
            
            };
            '2795'?: {
            
            };
            '2796'?: {
            
            };
            '2797'?: {
            
            };
            '2798'?: {
            
            };
            '2799'?: {
            
            };
            '2800'?: {
            
            };
            '2801'?: {
            
            };
            '2802'?: {
            
            };
            '2803'?: {
            
            };
            '2804'?: {
            
            };
            '2805'?: {
            
            };
            '2806'?: {
            
            };
            '2807'?: {
            
            };
            '2808'?: {
            
            };
            '2809'?: {
            
            };
            '2810'?: {
            
            };
            '2811'?: {
            
            };
            '2812'?: {
            
            };
            '2813'?: {
            
            };
            '2814'?: {
            
            };
            '2815'?: {
            
            };
            '2816'?: {
            
            };
            '2817'?: {
            
            };
            '2818'?: {
            
            };
            '2819'?: {
            
            };
            '2820'?: {
            
            };
            '2821'?: {
            
            };
            '2822'?: {
            
            };
            '2823'?: {
            
            };
            '2824'?: {
            
            };
            '2825'?: {
            
            };
            '2826'?: {
            
            };
            '2827'?: {
            
            };
            '2828'?: {
            
            };
            '2829'?: {
            
            };
            '2830'?: {
            
            };
            '2831'?: {
            
            };
            '2832'?: {
            
            };
            '2833'?: {
            
            };
            '2834'?: {
            
            };
            '2835'?: {
            
            };
            '2836'?: {
            
            };
            '2837'?: {
            
            };
            '2838'?: {
            
            };
            '2839'?: {
            
            };
            '2840'?: {
            
            };
            '2841'?: {
            
            };
            '2842'?: {
            
            };
            '2843'?: {
            
            };
            '2844'?: {
            
            };
            '2845'?: {
            
            };
            '2846'?: {
            
            };
            '2847'?: {
            
            };
            '2848'?: {
            
            };
            '2849'?: {
            
            };
            '2850'?: {
            
            };
            '2851'?: {
            
            };
            '2852'?: {
            
            };
            '2853'?: {
            
            };
            '2854'?: {
            
            };
            '2855'?: {
            
            };
            '2856'?: {
            
            };
            '2857'?: {
            
            };
            '2858'?: {
            
            };
            '2859'?: {
            
            };
            '2860'?: {
            
            };
            '2861'?: {
            
            };
            '2862'?: {
            
            };
            '2863'?: {
            
            };
            '2864'?: {
            
            };
            '2865'?: {
            
            };
            '2866'?: {
            
            };
            '2867'?: {
            
            };
            '2868'?: {
            
            };
            '2869'?: {
            
            };
            '2870'?: {
            
            };
            '2871'?: {
            
            };
            '2872'?: {
            
            };
            '2873'?: {
            
            };
            '2874'?: {
            
            };
            '2875'?: {
            
            };
            '2876'?: {
            
            };
            '2877'?: {
            
            };
            '2878'?: {
            
            };
            '2879'?: {
            
            };
            '2880'?: {
            
            };
            '2881'?: {
            
            };
            '2882'?: {
            
            };
            '2883'?: {
            
            };
            '2884'?: {
            
            };
            '2885'?: {
            
            };
            '2886'?: {
            
            };
            '2887'?: {
            
            };
            '2888'?: {
            
            };
            '2889'?: {
            
            };
            '2890'?: {
            
            };
            '2891'?: {
            
            };
            '2892'?: {
            
            };
            '2893'?: {
            
            };
            '2894'?: {
            
            };
            '2895'?: {
            
            };
            '2896'?: {
            
            };
            '2897'?: {
            
            };
            '2898'?: {
            
            };
            '2899'?: {
            
            };
            '2900'?: {
            
            };
            '2901'?: {
            
            };
            '2902'?: {
            
            };
            '2903'?: {
            
            };
            '2904'?: {
            
            };
            '2905'?: {
            
            };
            '2906'?: {
            
            };
            '2907'?: {
            
            };
            '2908'?: {
            
            };
            '2909'?: {
            
            };
            '2910'?: {
            
            };
            '2911'?: {
            
            };
            '2912'?: {
            
            };
            '2913'?: {
            
            };
            '2914'?: {
            
            };
            '2915'?: {
            
            };
            '2916'?: {
            
            };
            '2917'?: {
            
            };
            '2918'?: {
            
            };
            '2919'?: {
            
            };
            '2920'?: {
            
            };
            '2921'?: {
            
            };
            '2922'?: {
            
            };
            '2923'?: {
            
            };
            '2924'?: {
            
            };
            '2925'?: {
            
            };
            '2926'?: {
            
            };
            '2927'?: {
            
            };
            '2928'?: {
            
            };
            '2929'?: {
            
            };
            '2930'?: {
            
            };
            '2931'?: {
            
            };
            '2932'?: {
            
            };
            '2933'?: {
            
            };
            '2934'?: {
            
            };
            '2935'?: {
            
            };
            '2936'?: {
            
            };
            '2937'?: {
            
            };
            '2938'?: {
            
            };
            '2939'?: {
            
            };
            '2940'?: {
            
            };
            '2941'?: {
            
            };
            '2942'?: {
            
            };
            '2943'?: {
            
            };
            '2944'?: {
            
            };
            '2945'?: {
            
            };
            '2946'?: {
            
            };
            '2947'?: {
            
            };
            '2948'?: {
            
            };
            '2949'?: {
            
            };
            '2950'?: {
            
            };
            '2951'?: {
            
            };
            '2952'?: {
            
            };
            '2953'?: {
            
            };
            '2954'?: {
            
            };
            '2955'?: {
            
            };
            '2956'?: {
            
            };
            '2957'?: {
            
            };
            '2958'?: {
            
            };
            '2959'?: {
            
            };
            '2960'?: {
            
            };
            '2961'?: {
            
            };
            '2962'?: {
            
            };
            '2963'?: {
            
            };
            '2964'?: {
            
            };
            '2965'?: {
            
            };
            '2966'?: {
            
            };
            '2967'?: {
            
            };
            '2968'?: {
            
            };
            '2969'?: {
            
            };
            '2970'?: {
            
            };
            '2971'?: {
            
            };
            '2972'?: {
            
            };
            '2973'?: {
            
            };
            '2974'?: {
            
            };
            '2975'?: {
            
            };
            '2976'?: {
            
            };
            '2977'?: {
            
            };
            '2978'?: {
            
            };
            '2979'?: {
            
            };
            '2980'?: {
            
            };
            '2981'?: {
            
            };
            '2982'?: {
            
            };
            '2983'?: {
            
            };
            '2984'?: {
            
            };
            '2985'?: {
            
            };
            '2986'?: {
            
            };
            '2987'?: {
            
            };
            '2988'?: {
            
            };
            '2989'?: {
            
            };
            '2990'?: {
            
            };
            '2991'?: {
            
            };
            '2992'?: {
            
            };
            '2993'?: {
            
            };
            '2994'?: {
            
            };
            '2995'?: {
            
            };
            '2996'?: {
            
            };
            '2997'?: {
            
            };
            '2998'?: {
            
            };
            '2999'?: {
            
            };
            '3000'?: {
            
            };
            '3001'?: {
            
            };
            '3002'?: {
            
            };
            '3003'?: {
            
            };
            '3004'?: {
            
            };
            '3005'?: {
            
            };
            '3006'?: {
            
            };
            '3007'?: {
            
            };
            '3008'?: {
            
            };
            '3009'?: {
            
            };
            '3010'?: {
            
            };
            '3011'?: {
            
            };
            '3012'?: {
            
            };
            '3013'?: {
            
            };
            '3014'?: {
            
            };
            '3015'?: {
            
            };
            '3016'?: {
            
            };
            '3017'?: {
            
            };
            '3018'?: {
            
            };
            '3019'?: {
            
            };
            '3020'?: {
            
            };
            '3021'?: {
            
            };
            '3022'?: {
            
            };
            '3023'?: {
            
            };
            '3024'?: {
            
            };
            '3025'?: {
            
            };
            '3026'?: {
            
            };
            '3027'?: {
            
            };
            '3028'?: {
            
            };
            '3029'?: {
            
            };
            '3030'?: {
            
            };
            '3031'?: {
            
            };
            '3032'?: {
            
            };
            '3033'?: {
            
            };
            '3034'?: {
            
            };
            '3035'?: {
            
            };
            '3036'?: {
            
            };
            '3037'?: {
            
            };
            '3038'?: {
            
            };
            '3039'?: {
            
            };
            '3040'?: {
            
            };
            '3041'?: {
            
            };
            '3042'?: {
            
            };
            '3043'?: {
            
            };
            '3044'?: {
            
            };
            '3045'?: {
            
            };
            '3046'?: {
            
            };
            '3047'?: {
            
            };
            '3048'?: {
            
            };
            '3049'?: {
            
            };
            '3050'?: {
            
            };
            '3051'?: {
            
            };
            '3052'?: {
            
            };
            '3053'?: {
            
            };
            '3054'?: {
            
            };
            '3055'?: {
            
            };
            '3056'?: {
            
            };
            '3057'?: {
            
            };
            '3058'?: {
            
            };
            '3059'?: {
            
            };
            '3060'?: {
            
            };
            '3061'?: {
            
            };
            '3062'?: {
            
            };
            '3063'?: {
            
            };
            '3064'?: {
            
            };
            '3065'?: {
            
            };
            '3066'?: {
            
            };
            '3067'?: {
            
            };
            '3068'?: {
            
            };
            '3069'?: {
            
            };
            '3070'?: {
            
            };
            '3071'?: {
            
            };
            '3072'?: {
            
            };
            '3073'?: {
            
            };
            '3074'?: {
            
            };
            '3075'?: {
            
            };
            '3076'?: {
            
            };
            '3077'?: {
            
            };
            '3078'?: {
            
            };
            '3079'?: {
            
            };
            '3080'?: {
            
            };
            '3081'?: {
            
            };
            '3082'?: {
            
            };
            '3083'?: {
            
            };
            '3084'?: {
            
            };
            '3085'?: {
            
            };
            '3086'?: {
            
            };
            '3087'?: {
            
            };
            '3088'?: {
            
            };
            '3089'?: {
            
            };
            '3090'?: {
            
            };
            '3091'?: {
            
            };
            '3092'?: {
            
            };
            '3093'?: {
            
            };
            '3094'?: {
            
            };
            '3095'?: {
            
            };
            '3096'?: {
            
            };
            '3097'?: {
            
            };
            '3098'?: {
            
            };
            '3099'?: {
            
            };
            '3100'?: {
            
            };
            '3101'?: {
            
            };
            '3102'?: {
            
            };
            '3103'?: {
            
            };
            '3104'?: {
            
            };
            '3105'?: {
            
            };
            '3106'?: {
            
            };
            '3107'?: {
            
            };
            '3108'?: {
            
            };
            '3109'?: {
            
            };
            '3110'?: {
            
            };
            '3111'?: {
            
            };
            '3112'?: {
            
            };
            '3113'?: {
            
            };
            '3114'?: {
            
            };
            '3115'?: {
            
            };
            '3116'?: {
            
            };
            '3117'?: {
            
            };
            '3118'?: {
            
            };
            '3119'?: {
            
            };
            '3120'?: {
            
            };
            '3121'?: {
            
            };
            '3122'?: {
            
            };
            '3123'?: {
            
            };
            '3124'?: {
            
            };
            '3125'?: {
            
            };
            '3126'?: {
            
            };
            '3127'?: {
            
            };
            '3128'?: {
            
            };
            '3129'?: {
            
            };
            '3130'?: {
            
            };
            '3131'?: {
            
            };
            '3132'?: {
            
            };
            '3133'?: {
            
            };
            '3134'?: {
            
            };
            '3135'?: {
            
            };
            '3136'?: {
            
            };
            '3137'?: {
            
            };
            '3138'?: {
            
            };
            '3139'?: {
            
            };
            '3140'?: {
            
            };
            '3141'?: {
            
            };
            '3142'?: {
            
            };
            '3143'?: {
            
            };
            '3144'?: {
            
            };
            '3145'?: {
            
            };
            '3146'?: {
            
            };
            '3147'?: {
            
            };
            '3148'?: {
            
            };
            '3149'?: {
            
            };
            '3150'?: {
            
            };
            '3151'?: {
            
            };
            '3152'?: {
            
            };
            '3153'?: {
            
            };
            '3154'?: {
            
            };
            '3155'?: {
            
            };
            '3156'?: {
            
            };
            '3157'?: {
            
            };
            '3158'?: {
            
            };
            '3159'?: {
            
            };
            '3160'?: {
            
            };
            '3161'?: {
            
            };
            '3162'?: {
            
            };
            '3163'?: {
            
            };
            '3164'?: {
            
            };
            '3165'?: {
            
            };
            '3166'?: {
            
            };
            '3167'?: {
            
            };
            '3168'?: {
            
            };
            '3169'?: {
            
            };
            '3170'?: {
            
            };
            '3171'?: {
            
            };
            '3172'?: {
            
            };
            '3173'?: {
            
            };
            '3174'?: {
            
            };
            '3175'?: {
            
            };
            '3176'?: {
            
            };
            '3177'?: {
            
            };
            '3178'?: {
            
            };
            '3179'?: {
            
            };
            '3180'?: {
            
            };
            '3181'?: {
            
            };
            '3182'?: {
            
            };
            '3183'?: {
            
            };
            '3184'?: {
            
            };
            '3185'?: {
            
            };
            '3186'?: {
            
            };
            '3187'?: {
            
            };
            '3188'?: {
            
            };
            '3189'?: {
            
            };
            '3190'?: {
            
            };
            '3191'?: {
            
            };
            '3192'?: {
            
            };
            '3193'?: {
            
            };
            '3194'?: {
            
            };
            '3195'?: {
            
            };
            '3196'?: {
            
            };
            '3197'?: {
            
            };
            '3198'?: {
            
            };
            '3199'?: {
            
            };
            '3200'?: {
            
            };
            '3201'?: {
            
            };
            '3202'?: {
            
            };
            '3203'?: {
            
            };
            '3204'?: {
            
            };
            '3205'?: {
            
            };
            '3206'?: {
            
            };
            '3207'?: {
            
            };
            '3208'?: {
            
            };
            '3209'?: {
            
            };
            '3210'?: {
            
            };
            '3211'?: {
            
            };
            '3212'?: {
            
            };
            '3213'?: {
            
            };
            '3214'?: {
            
            };
            '3215'?: {
            
            };
            '3216'?: {
            
            };
            '3217'?: {
            
            };
            '3218'?: {
            
            };
            '3219'?: {
            
            };
            '3220'?: {
            
            };
            '3221'?: {
            
            };
            '3222'?: {
            
            };
            '3223'?: {
            
            };
            '3224'?: {
            
            };
            '3225'?: {
            
            };
            '3226'?: {
            
            };
            '3227'?: {
            
            };
            '3228'?: {
            
            };
            '3229'?: {
            
            };
            '3230'?: {
            
            };
            '3231'?: {
            
            };
            '3232'?: {
            
            };
            '3233'?: {
            
            };
            '3234'?: {
            
            };
            '3235'?: {
            
            };
            '3236'?: {
            
            };
            '3237'?: {
            
            };
            '3238'?: {
            
            };
            '3239'?: {
            
            };
            '3240'?: {
            
            };
            '3241'?: {
            
            };
            '3242'?: {
            
            };
            '3243'?: {
            
            };
            '3244'?: {
            
            };
            '3245'?: {
            
            };
            '3246'?: {
            
            };
            '3247'?: {
            
            };
            '3248'?: {
            
            };
            '3249'?: {
            
            };
            '3250'?: {
            
            };
            '3251'?: {
            
            };
            '3252'?: {
            
            };
            '3253'?: {
            
            };
            '3254'?: {
            
            };
            '3255'?: {
            
            };
            '3256'?: {
            
            };
            '3257'?: {
            
            };
            '3258'?: {
            
            };
            '3259'?: {
            
            };
            '3260'?: {
            
            };
            '3261'?: {
            
            };
            '3262'?: {
            
            };
            '3263'?: {
            
            };
            '3264'?: {
            
            };
            '3265'?: {
            
            };
            '3266'?: {
            
            };
            '3267'?: {
            
            };
            '3268'?: {
            
            };
            '3269'?: {
            
            };
            '3270'?: {
            
            };
            '3271'?: {
            
            };
            '3272'?: {
            
            };
            '3273'?: {
            
            };
            '3274'?: {
            
            };
            '3275'?: {
            
            };
            '3276'?: {
            
            };
            '3277'?: {
            
            };
            '3278'?: {
            
            };
            '3279'?: {
            
            };
            '3280'?: {
            
            };
            '3281'?: {
            
            };
            '3282'?: {
            
            };
            '3283'?: {
            
            };
            '3284'?: {
            
            };
            '3285'?: {
            
            };
            '3286'?: {
            
            };
            '3287'?: {
            
            };
            '3288'?: {
            
            };
            '3289'?: {
            
            };
            '3290'?: {
            
            };
            '3291'?: {
            
            };
            '3292'?: {
            
            };
            '3293'?: {
            
            };
            '3294'?: {
            
            };
            '3295'?: {
            
            };
            '3296'?: {
            
            };
            '3297'?: {
            
            };
            '3298'?: {
            
            };
            '3299'?: {
            
            };
            '3300'?: {
            
            };
            '3301'?: {
            
            };
            '3302'?: {
            
            };
            '3303'?: {
            
            };
            '3304'?: {
            
            };
            '3305'?: {
            
            };
            '3306'?: {
            
            };
            '3307'?: {
            
            };
            '3308'?: {
            
            };
            '3309'?: {
            
            };
            '3310'?: {
            
            };
            '3311'?: {
            
            };
            '3312'?: {
            
            };
            '3313'?: {
            
            };
            '3314'?: {
            
            };
            '3315'?: {
            
            };
            '3316'?: {
            
            };
            '3317'?: {
            
            };
            '3318'?: {
            
            };
            '3319'?: {
            
            };
            '3320'?: {
            
            };
            '3321'?: {
            
            };
            '3322'?: {
            
            };
            '3323'?: {
            
            };
            '3324'?: {
            
            };
            '3325'?: {
            
            };
            '3326'?: {
            
            };
            '3327'?: {
            
            };
            '3328'?: {
            
            };
            '3329'?: {
            
            };
            '3330'?: {
            
            };
            '3331'?: {
            
            };
            '3332'?: {
            
            };
            '3333'?: {
            
            };
            '3334'?: {
            
            };
            '3335'?: {
            
            };
            '3336'?: {
            
            };
            '3337'?: {
            
            };
            '3338'?: {
            
            };
            '3339'?: {
            
            };
            '3340'?: {
            
            };
            '3341'?: {
            
            };
            '3342'?: {
            
            };
            '3343'?: {
            
            };
            '3344'?: {
            
            };
            '3345'?: {
            
            };
            '3346'?: {
            
            };
            '3347'?: {
            
            };
            '3348'?: {
            
            };
            '3349'?: {
            
            };
            '3350'?: {
            
            };
            '3351'?: {
            
            };
            '3352'?: {
            
            };
            '3353'?: {
            
            };
            '3354'?: {
            
            };
            '3355'?: {
            
            };
            '3356'?: {
            
            };
            '3357'?: {
            
            };
            '3358'?: {
            
            };
            '3359'?: {
            
            };
            '3360'?: {
            
            };
            '3361'?: {
            
            };
            '3362'?: {
            
            };
            '3363'?: {
            
            };
            '3364'?: {
            
            };
            '3365'?: {
            
            };
            '3366'?: {
            
            };
            '3367'?: {
            
            };
            '3368'?: {
            
            };
            '3369'?: {
            
            };
            '3370'?: {
            
            };
            '3371'?: {
            
            };
            '3372'?: {
            
            };
            '3373'?: {
            
            };
            '3374'?: {
            
            };
            '3375'?: {
            
            };
            '3376'?: {
            
            };
            '3377'?: {
            
            };
            '3378'?: {
            
            };
            '3379'?: {
            
            };
            '3380'?: {
            
            };
            '3381'?: {
            
            };
            '3382'?: {
            
            };
            '3383'?: {
            
            };
            '3384'?: {
            
            };
            '3385'?: {
            
            };
            '3386'?: {
            
            };
            '3387'?: {
            
            };
            '3388'?: {
            
            };
            '3389'?: {
            
            };
            '3390'?: {
            
            };
            '3391'?: {
            
            };
            '3392'?: {
            
            };
            '3393'?: {
            
            };
            '3394'?: {
            
            };
            '3395'?: {
            
            };
            '3396'?: {
            
            };
            '3397'?: {
            
            };
            '3398'?: {
            
            };
            '3399'?: {
            
            };
            '3400'?: {
            
            };
            '3401'?: {
            
            };
            '3402'?: {
            
            };
            '3403'?: {
            
            };
            '3404'?: {
            
            };
            '3405'?: {
            
            };
            '3406'?: {
            
            };
            '3407'?: {
            
            };
            '3408'?: {
            
            };
            '3409'?: {
            
            };
            '3410'?: {
            
            };
            '3411'?: {
            
            };
            '3412'?: {
            
            };
            '3413'?: {
            
            };
            '3414'?: {
            
            };
            '3415'?: {
            
            };
            '3416'?: {
            
            };
            '3417'?: {
            
            };
            '3418'?: {
            
            };
            '3419'?: {
            
            };
            '3420'?: {
            
            };
            '3421'?: {
            
            };
            '3422'?: {
            
            };
            '3423'?: {
            
            };
            '3424'?: {
            
            };
            '3425'?: {
            
            };
            '3426'?: {
            
            };
            '3427'?: {
            
            };
            '3428'?: {
            
            };
            '3429'?: {
            
            };
            '3430'?: {
            
            };
            '3431'?: {
            
            };
            '3432'?: {
            
            };
            '3433'?: {
            
            };
            '3434'?: {
            
            };
            '3435'?: {
            
            };
            '3436'?: {
            
            };
            '3437'?: {
            
            };
            '3438'?: {
            
            };
            '3439'?: {
            
            };
            '3440'?: {
            
            };
            '3441'?: {
            
            };
            '3442'?: {
            
            };
            '3443'?: {
            
            };
            '3444'?: {
            
            };
            '3445'?: {
            
            };
            '3446'?: {
            
            };
            '3447'?: {
            
            };
            '3448'?: {
            
            };
            '3449'?: {
            
            };
            '3450'?: {
            
            };
            '3451'?: {
            
            };
            '3452'?: {
            
            };
            '3453'?: {
            
            };
            '3454'?: {
            
            };
            '3455'?: {
            
            };
            '3456'?: {
            
            };
            '3457'?: {
            
            };
            '3458'?: {
            
            };
            '3459'?: {
            
            };
            '3460'?: {
            
            };
            '3461'?: {
            
            };
            '3462'?: {
            
            };
            '3463'?: {
            
            };
            '3464'?: {
            
            };
            '3465'?: {
            
            };
            '3466'?: {
            
            };
            '3467'?: {
            
            };
            '3468'?: {
            
            };
            '3469'?: {
            
            };
            '3470'?: {
            
            };
            '3471'?: {
            
            };
            '3472'?: {
            
            };
            '3473'?: {
            
            };
            '3474'?: {
            
            };
            '3475'?: {
            
            };
            '3476'?: {
            
            };
            '3477'?: {
            
            };
            '3478'?: {
            
            };
            '3479'?: {
            
            };
            '3480'?: {
            
            };
            '3481'?: {
            
            };
            '3482'?: {
            
            };
            '3483'?: {
            
            };
            '3484'?: {
            
            };
            '3485'?: {
            
            };
            '3486'?: {
            
            };
            '3487'?: {
            
            };
            '3488'?: {
            
            };
            '3489'?: {
            
            };
            '3490'?: {
            
            };
            '3491'?: {
            
            };
            '3492'?: {
            
            };
            '3493'?: {
            
            };
            '3494'?: {
            
            };
            '3495'?: {
            
            };
            '3496'?: {
            
            };
            '3497'?: {
            
            };
            '3498'?: {
            
            };
            '3499'?: {
            
            };
            '3500'?: {
            
            };
            '3501'?: {
            
            };
            '3502'?: {
            
            };
            '3503'?: {
            
            };
            '3504'?: {
            
            };
            '3505'?: {
            
            };
            '3506'?: {
            
            };
            '3507'?: {
            
            };
            '3508'?: {
            
            };
            '3509'?: {
            
            };
            '3510'?: {
            
            };
            '3511'?: {
            
            };
            '3512'?: {
            
            };
            '3513'?: {
            
            };
            '3514'?: {
            
            };
            '3515'?: {
            
            };
            '3516'?: {
            
            };
            '3517'?: {
            
            };
            '3518'?: {
            
            };
            '3519'?: {
            
            };
            '3520'?: {
            
            };
            '3521'?: {
            
            };
            '3522'?: {
            
            };
            '3523'?: {
            
            };
            '3524'?: {
            
            };
            '3525'?: {
            
            };
            '3526'?: {
            
            };
            '3527'?: {
            
            };
            '3528'?: {
            
            };
            '3529'?: {
            
            };
            '3530'?: {
            
            };
            '3531'?: {
            
            };
            '3532'?: {
            
            };
            '3533'?: {
            
            };
            '3534'?: {
            
            };
            '3535'?: {
            
            };
            '3536'?: {
            
            };
            '3537'?: {
            
            };
            '3538'?: {
            
            };
            '3539'?: {
            
            };
            '3540'?: {
            
            };
            '3541'?: {
            
            };
            '3542'?: {
            
            };
            '3543'?: {
            
            };
            '3544'?: {
            
            };
            '3545'?: {
            
            };
            '3546'?: {
            
            };
            '3547'?: {
            
            };
            '3548'?: {
            
            };
            '3549'?: {
            
            };
            '3550'?: {
            
            };
            '3551'?: {
            
            };
            '3552'?: {
            
            };
            '3553'?: {
            
            };
            '3554'?: {
            
            };
            '3555'?: {
            
            };
            '3556'?: {
            
            };
            '3557'?: {
            
            };
            '3558'?: {
            
            };
            '3559'?: {
            
            };
            '3560'?: {
            
            };
            '3561'?: {
            
            };
            '3562'?: {
            
            };
            '3563'?: {
            
            };
            '3564'?: {
            
            };
            '3565'?: {
            
            };
            '3566'?: {
            
            };
            '3567'?: {
            
            };
            '3568'?: {
            
            };
            '3569'?: {
            
            };
            '3570'?: {
            
            };
            '3571'?: {
            
            };
            '3572'?: {
            
            };
            '3573'?: {
            
            };
            '3574'?: {
            
            };
            '3575'?: {
            
            };
            '3576'?: {
            
            };
            '3577'?: {
            
            };
            '3578'?: {
            
            };
            '3579'?: {
            
            };
            '3580'?: {
            
            };
            '3581'?: {
            
            };
            '3582'?: {
            
            };
            '3583'?: {
            
            };
            '3584'?: {
            
            };
            '3585'?: {
            
            };
            '3586'?: {
            
            };
            '3587'?: {
            
            };
            '3588'?: {
            
            };
            '3589'?: {
            
            };
            '3590'?: {
            
            };
            '3591'?: {
            
            };
            '3592'?: {
            
            };
            '3593'?: {
            
            };
            '3594'?: {
            
            };
            '3595'?: {
            
            };
            '3596'?: {
            
            };
            '3597'?: {
            
            };
            '3598'?: {
            
            };
            '3599'?: {
            
            };
            '3600'?: {
            
            };
            '3601'?: {
            
            };
            '3602'?: {
            
            };
            '3603'?: {
            
            };
            '3604'?: {
            
            };
            '3605'?: {
            
            };
            '3606'?: {
            
            };
            '3607'?: {
            
            };
            '3608'?: {
            
            };
            '3609'?: {
            
            };
            '3610'?: {
            
            };
            '3611'?: {
            
            };
            '3612'?: {
            
            };
            '3613'?: {
            
            };
            '3614'?: {
            
            };
            '3615'?: {
            
            };
            '3616'?: {
            
            };
            '3617'?: {
            
            };
            '3618'?: {
            
            };
            '3619'?: {
            
            };
            '3620'?: {
            
            };
            '3621'?: {
            
            };
            '3622'?: {
            
            };
            '3623'?: {
            
            };
            '3624'?: {
            
            };
            '3625'?: {
            
            };
            '3626'?: {
            
            };
            '3627'?: {
            
            };
            '3628'?: {
            
            };
            '3629'?: {
            
            };
            '3630'?: {
            
            };
            '3631'?: {
            
            };
            '3632'?: {
            
            };
            '3633'?: {
            
            };
            '3634'?: {
            
            };
            '3635'?: {
            
            };
            '3636'?: {
            
            };
            '3637'?: {
            
            };
            '3638'?: {
            
            };
            '3639'?: {
            
            };
            '3640'?: {
            
            };
            '3641'?: {
            
            };
            '3642'?: {
            
            };
            '3643'?: {
            
            };
            '3644'?: {
            
            };
            '3645'?: {
            
            };
            '3646'?: {
            
            };
            '3647'?: {
            
            };
            '3648'?: {
            
            };
            '3649'?: {
            
            };
            '3650'?: {
            
            };
            '3651'?: {
            
            };
            '3652'?: {
            
            };
            '3653'?: {
            
            };
            '3654'?: {
            
            };
            '3655'?: {
            
            };
            '3656'?: {
            
            };
            '3657'?: {
            
            };
            '3658'?: {
            
            };
            '3659'?: {
            
            };
            '3660'?: {
            
            };
            '3661'?: {
            
            };
            '3662'?: {
            
            };
            '3663'?: {
            
            };
            '3664'?: {
            
            };
            '3665'?: {
            
            };
            '3666'?: {
            
            };
            '3667'?: {
            
            };
            '3668'?: {
            
            };
            '3669'?: {
            
            };
            '3670'?: {
            
            };
            '3671'?: {
            
            };
            '3672'?: {
            
            };
            '3673'?: {
            
            };
            '3674'?: {
            
            };
            '3675'?: {
            
            };
            '3676'?: {
            
            };
            '3677'?: {
            
            };
            '3678'?: {
            
            };
            '3679'?: {
            
            };
            '3680'?: {
            
            };
            '3681'?: {
            
            };
            '3682'?: {
            
            };
            '3683'?: {
            
            };
            '3684'?: {
            
            };
            '3685'?: {
            
            };
            '3686'?: {
            
            };
            '3687'?: {
            
            };
            '3688'?: {
            
            };
            '3689'?: {
            
            };
            '3690'?: {
            
            };
            '3691'?: {
            
            };
            '3692'?: {
            
            };
            '3693'?: {
            
            };
            '3694'?: {
            
            };
            '3695'?: {
            
            };
            '3696'?: {
            
            };
            '3697'?: {
            
            };
            '3698'?: {
            
            };
            '3699'?: {
            
            };
            '3700'?: {
            
            };
            '3701'?: {
            
            };
            '3702'?: {
            
            };
            '3703'?: {
            
            };
            '3704'?: {
            
            };
            '3705'?: {
            
            };
            '3706'?: {
            
            };
            '3707'?: {
            
            };
            '3708'?: {
            
            };
            '3709'?: {
            
            };
            '3710'?: {
            
            };
            '3711'?: {
            
            };
            '3712'?: {
            
            };
            '3713'?: {
            
            };
            '3714'?: {
            
            };
            '3715'?: {
            
            };
            '3716'?: {
            
            };
            '3717'?: {
            
            };
            '3718'?: {
            
            };
            '3719'?: {
            
            };
            '3720'?: {
            
            };
            '3721'?: {
            
            };
            '3722'?: {
            
            };
            '3723'?: {
            
            };
            '3724'?: {
            
            };
            '3725'?: {
            
            };
            '3726'?: {
            
            };
            '3727'?: {
            
            };
            '3728'?: {
            
            };
            '3729'?: {
            
            };
            '3730'?: {
            
            };
            '3731'?: {
            
            };
            '3732'?: {
            
            };
            '3733'?: {
            
            };
            '3734'?: {
            
            };
            '3735'?: {
            
            };
            '3736'?: {
            
            };
            '3737'?: {
            
            };
            '3738'?: {
            
            };
            '3739'?: {
            
            };
            '3740'?: {
            
            };
            '3741'?: {
            
            };
            '3742'?: {
            
            };
            '3743'?: {
            
            };
            '3744'?: {
            
            };
            '3745'?: {
            
            };
            '3746'?: {
            
            };
            '3747'?: {
            
            };
            '3748'?: {
            
            };
            '3749'?: {
            
            };
            '3750'?: {
            
            };
            '3751'?: {
            
            };
            '3752'?: {
            
            };
            '3753'?: {
            
            };
            '3754'?: {
            
            };
            '3755'?: {
            
            };
            '3756'?: {
            
            };
            '3757'?: {
            
            };
            '3758'?: {
            
            };
            '3759'?: {
            
            };
            '3760'?: {
            
            };
            '3761'?: {
            
            };
            '3762'?: {
            
            };
            '3763'?: {
            
            };
            '3764'?: {
            
            };
            '3765'?: {
            
            };
            '3766'?: {
            
            };
            '3767'?: {
            
            };
            '3768'?: {
            
            };
            '3769'?: {
            
            };
            '3770'?: {
            
            };
            '3771'?: {
            
            };
            '3772'?: {
            
            };
            '3773'?: {
            
            };
            '3774'?: {
            
            };
            '3775'?: {
            
            };
            '3776'?: {
            
            };
            '3777'?: {
            
            };
            '3778'?: {
            
            };
            '3779'?: {
            
            };
            '3780'?: {
            
            };
            '3781'?: {
            
            };
            '3782'?: {
            
            };
            '3783'?: {
            
            };
            '3784'?: {
            
            };
            '3785'?: {
            
            };
            '3786'?: {
            
            };
            '3787'?: {
            
            };
            '3788'?: {
            
            };
            '3789'?: {
            
            };
            '3790'?: {
            
            };
            '3791'?: {
            
            };
            '3792'?: {
            
            };
            '3793'?: {
            
            };
            '3794'?: {
            
            };
            '3795'?: {
            
            };
            '3796'?: {
            
            };
            '3797'?: {
            
            };
            '3798'?: {
            
            };
            '3799'?: {
            
            };
            '3800'?: {
            
            };
            '3801'?: {
            
            };
            '3802'?: {
            
            };
            '3803'?: {
            
            };
            '3804'?: {
            
            };
            '3805'?: {
            
            };
            '3806'?: {
            
            };
            '3807'?: {
            
            };
            '3808'?: {
            
            };
            '3809'?: {
            
            };
            '3810'?: {
            
            };
            '3811'?: {
            
            };
            '3812'?: {
            
            };
            '3813'?: {
            
            };
            '3814'?: {
            
            };
            '3815'?: {
            
            };
            '3816'?: {
            
            };
            '3817'?: {
            
            };
            '3818'?: {
            
            };
            '3819'?: {
            
            };
            '3820'?: {
            
            };
            '3821'?: {
            
            };
            '3822'?: {
            
            };
            '3823'?: {
            
            };
            '3824'?: {
            
            };
            '3825'?: {
            
            };
            '3826'?: {
            
            };
            '3827'?: {
            
            };
            '3828'?: {
            
            };
            '3829'?: {
            
            };
            '3830'?: {
            
            };
            '3831'?: {
            
            };
            '3832'?: {
            
            };
            '3833'?: {
            
            };
            '3834'?: {
            
            };
            '3835'?: {
            
            };
            '3836'?: {
            
            };
            '3837'?: {
            
            };
            '3838'?: {
            
            };
            '3839'?: {
            
            };
            '3840'?: {
            
            };
            '3841'?: {
            
            };
            '3842'?: {
            
            };
            '3843'?: {
            
            };
            '3844'?: {
            
            };
            '3845'?: {
            
            };
            '3846'?: {
            
            };
            '3847'?: {
            
            };
            '3848'?: {
            
            };
            '3849'?: {
            
            };
            '3850'?: {
            
            };
            '3851'?: {
            
            };
            '3852'?: {
            
            };
            '3853'?: {
            
            };
            '3854'?: {
            
            };
            '3855'?: {
            
            };
            '3856'?: {
            
            };
            '3857'?: {
            
            };
            '3858'?: {
            
            };
            '3859'?: {
            
            };
            '3860'?: {
            
            };
            '3861'?: {
            
            };
            '3862'?: {
            
            };
            '3863'?: {
            
            };
            '3864'?: {
            
            };
            '3865'?: {
            
            };
            '3866'?: {
            
            };
            '3867'?: {
            
            };
            '3868'?: {
            
            };
            '3869'?: {
            
            };
            '3870'?: {
            
            };
            '3871'?: {
            
            };
            '3872'?: {
            
            };
            '3873'?: {
            
            };
            '3874'?: {
            
            };
            '3875'?: {
            
            };
            '3876'?: {
            
            };
            '3877'?: {
            
            };
            '3878'?: {
            
            };
            '3879'?: {
            
            };
            '3880'?: {
            
            };
            '3881'?: {
            
            };
            '3882'?: {
            
            };
            '3883'?: {
            
            };
            '3884'?: {
            
            };
            '3885'?: {
            
            };
            '3886'?: {
            
            };
            '3887'?: {
            
            };
            '3888'?: {
            
            };
            '3889'?: {
            
            };
            '3890'?: {
            
            };
            '3891'?: {
            
            };
            '3892'?: {
            
            };
            '3893'?: {
            
            };
            '3894'?: {
            
            };
            '3895'?: {
            
            };
            '3896'?: {
            
            };
            '3897'?: {
            
            };
            '3898'?: {
            
            };
            '3899'?: {
            
            };
            '3900'?: {
            
            };
            '3901'?: {
            
            };
            '3902'?: {
            
            };
            '3903'?: {
            
            };
            '3904'?: {
            
            };
            '3905'?: {
            
            };
            '3906'?: {
            
            };
            '3907'?: {
            
            };
            '3908'?: {
            
            };
            '3909'?: {
            
            };
            '3910'?: {
            
            };
            '3911'?: {
            
            };
            '3912'?: {
            
            };
            '3913'?: {
            
            };
            '3914'?: {
            
            };
            '3915'?: {
            
            };
            '3916'?: {
            
            };
            '3917'?: {
            
            };
            '3918'?: {
            
            };
            '3919'?: {
            
            };
            '3920'?: {
            
            };
            '3921'?: {
            
            };
            '3922'?: {
            
            };
            '3923'?: {
            
            };
            '3924'?: {
            
            };
            '3925'?: {
            
            };
            '3926'?: {
            
            };
            '3927'?: {
            
            };
            '3928'?: {
            
            };
            '3929'?: {
            
            };
            '3930'?: {
            
            };
            '3931'?: {
            
            };
            '3932'?: {
            
            };
            '3933'?: {
            
            };
            '3934'?: {
            
            };
            '3935'?: {
            
            };
            '3936'?: {
            
            };
            '3937'?: {
            
            };
            '3938'?: {
            
            };
            '3939'?: {
            
            };
            '3940'?: {
            
            };
            '3941'?: {
            
            };
            '3942'?: {
            
            };
            '3943'?: {
            
            };
            '3944'?: {
            
            };
            '3945'?: {
            
            };
            '3946'?: {
            
            };
            '3947'?: {
            
            };
            '3948'?: {
            
            };
            '3949'?: {
            
            };
            '3950'?: {
            
            };
            '3951'?: {
            
            };
            '3952'?: {
            
            };
            '3953'?: {
            
            };
            '3954'?: {
            
            };
            '3955'?: {
            
            };
            '3956'?: {
            
            };
            '3957'?: {
            
            };
            '3958'?: {
            
            };
            '3959'?: {
            
            };
            '3960'?: {
            
            };
            '3961'?: {
            
            };
            '3962'?: {
            
            };
            '3963'?: {
            
            };
            '3964'?: {
            
            };
            '3965'?: {
            
            };
            '3966'?: {
            
            };
            '3967'?: {
            
            };
            '3968'?: {
            
            };
            '3969'?: {
            
            };
            '3970'?: {
            
            };
            '3971'?: {
            
            };
            '3972'?: {
            
            };
            '3973'?: {
            
            };
            '3974'?: {
            
            };
            '3975'?: {
            
            };
            '3976'?: {
            
            };
            '3977'?: {
            
            };
            '3978'?: {
            
            };
            '3979'?: {
            
            };
            '3980'?: {
            
            };
            '3981'?: {
            
            };
            '3982'?: {
            
            };
            '3983'?: {
            
            };
            '3984'?: {
            
            };
            '3985'?: {
            
            };
            '3986'?: {
            
            };
            '3987'?: {
            
            };
            '3988'?: {
            
            };
            '3989'?: {
            
            };
            '3990'?: {
            
            };
            '3991'?: {
            
            };
            '3992'?: {
            
            };
            '3993'?: {
            
            };
            '3994'?: {
            
            };
            '3995'?: {
            
            };
            '3996'?: {
            
            };
            '3997'?: {
            
            };
            '3998'?: {
            
            };
            '3999'?: {
            
            };
            '4000'?: {
            
            };
            '4001'?: {
            
            };
            '4002'?: {
            
            };
            '4003'?: {
            
            };
            '4004'?: {
            
            };
            '4005'?: {
            
            };
            '4006'?: {
            
            };
            '4007'?: {
            
            };
            '4008'?: {
            
            };
            '4009'?: {
            
            };
            '4010'?: {
            
            };
            '4011'?: {
            
            };
            '4012'?: {
            
            };
            '4013'?: {
            
            };
            '4014'?: {
            
            };
            '4015'?: {
            
            };
            '4016'?: {
            
            };
            '4017'?: {
            
            };
            '4018'?: {
            
            };
            '4019'?: {
            
            };
            '4020'?: {
            
            };
            '4021'?: {
            
            };
            '4022'?: {
            
            };
            '4023'?: {
            
            };
            '4024'?: {
            
            };
            '4025'?: {
            
            };
            '4026'?: {
            
            };
            '4027'?: {
            
            };
            '4028'?: {
            
            };
            '4029'?: {
            
            };
            '4030'?: {
            
            };
            '4031'?: {
            
            };
            '4032'?: {
            
            };
            '4033'?: {
            
            };
            '4034'?: {
            
            };
            '4035'?: {
            
            };
            '4036'?: {
            
            };
            '4037'?: {
            
            };
            '4038'?: {
            
            };
            '4039'?: {
            
            };
            '4040'?: {
            
            };
            '4041'?: {
            
            };
            '4042'?: {
            
            };
            '4043'?: {
            
            };
            '4044'?: {
            
            };
            '4045'?: {
            
            };
            '4046'?: {
            
            };
            '4047'?: {
            
            };
            '4048'?: {
            
            };
            '4049'?: {
            
            };
            '4050'?: {
            
            };
            '4051'?: {
            
            };
            '4052'?: {
            
            };
            '4053'?: {
            
            };
            '4054'?: {
            
            };
            '4055'?: {
            
            };
            '4056'?: {
            
            };
            '4057'?: {
            
            };
            '4058'?: {
            
            };
            '4059'?: {
            
            };
            '4060'?: {
            
            };
            '4061'?: {
            
            };
            '4062'?: {
            
            };
            '4063'?: {
            
            };
            '4064'?: {
            
            };
            '4065'?: {
            
            };
            '4066'?: {
            
            };
            '4067'?: {
            
            };
            '4068'?: {
            
            };
            '4069'?: {
            
            };
            '4070'?: {
            
            };
            '4071'?: {
            
            };
            '4072'?: {
            
            };
            '4073'?: {
            
            };
            '4074'?: {
            
            };
            '4075'?: {
            
            };
            '4076'?: {
            
            };
            '4077'?: {
            
            };
            '4078'?: {
            
            };
            '4079'?: {
            
            };
            '4080'?: {
            
            };
            '4081'?: {
            
            };
            '4082'?: {
            
            };
            '4083'?: {
            
            };
            '4084'?: {
            
            };
            '4085'?: {
            
            };
            '4086'?: {
            
            };
            '4087'?: {
            
            };
            '4088'?: {
            
            };
            '4089'?: {
            
            };
            '4090'?: {
            
            };
            '4091'?: {
            
            };
            '4092'?: {
            
            };
            '4093'?: {
            
            };
            '4094'?: {
            
            };
            '4095'?: {
            
            };
            '4096'?: {
            
            };
            '4097'?: {
            
            };
            '4098'?: {
            
            };
            '4099'?: {
            
            };
            '4100'?: {
            
            };
            '4101'?: {
            
            };
            '4102'?: {
            
            };
            '4103'?: {
            
            };
            '4104'?: {
            
            };
            '4105'?: {
            
            };
            '4106'?: {
            
            };
            '4107'?: {
            
            };
            '4108'?: {
            
            };
            '4109'?: {
            
            };
            '4110'?: {
            
            };
            '4111'?: {
            
            };
            '4112'?: {
            
            };
            '4113'?: {
            
            };
            '4114'?: {
            
            };
            '4115'?: {
            
            };
            '4116'?: {
            
            };
            '4117'?: {
            
            };
            '4118'?: {
            
            };
            '4119'?: {
            
            };
            '4120'?: {
            
            };
            '4121'?: {
            
            };
            '4122'?: {
            
            };
            '4123'?: {
            
            };
            '4124'?: {
            
            };
            '4125'?: {
            
            };
            '4126'?: {
            
            };
            '4127'?: {
            
            };
            '4128'?: {
            
            };
            '4129'?: {
            
            };
            '4130'?: {
            
            };
            '4131'?: {
            
            };
            '4132'?: {
            
            };
            '4133'?: {
            
            };
            '4134'?: {
            
            };
            '4135'?: {
            
            };
            '4136'?: {
            
            };
            '4137'?: {
            
            };
            '4138'?: {
            
            };
            '4139'?: {
            
            };
            '4140'?: {
            
            };
            '4141'?: {
            
            };
            '4142'?: {
            
            };
            '4143'?: {
            
            };
            '4144'?: {
            
            };
            '4145'?: {
            
            };
            '4146'?: {
            
            };
            '4147'?: {
            
            };
            '4148'?: {
            
            };
            '4149'?: {
            
            };
            '4150'?: {
            
            };
            '4151'?: {
            
            };
            '4152'?: {
            
            };
            '4153'?: {
            
            };
            '4154'?: {
            
            };
            '4155'?: {
            
            };
            '4156'?: {
            
            };
            '4157'?: {
            
            };
            '4158'?: {
            
            };
            '4159'?: {
            
            };
            '4160'?: {
            
            };
            '4161'?: {
            
            };
            '4162'?: {
            
            };
            '4163'?: {
            
            };
            '4164'?: {
            
            };
            '4165'?: {
            
            };
            '4166'?: {
            
            };
            '4167'?: {
            
            };
            '4168'?: {
            
            };
            '4169'?: {
            
            };
            '4170'?: {
            
            };
            '4171'?: {
            
            };
            '4172'?: {
            
            };
            '4173'?: {
            
            };
            '4174'?: {
            
            };
            '4175'?: {
            
            };
            '4176'?: {
            
            };
            '4177'?: {
            
            };
            '4178'?: {
            
            };
            '4179'?: {
            
            };
            '4180'?: {
            
            };
            '4181'?: {
            
            };
            '4182'?: {
            
            };
            '4183'?: {
            
            };
            '4184'?: {
            
            };
            '4185'?: {
            
            };
            '4186'?: {
            
            };
            '4187'?: {
            
            };
            '4188'?: {
            
            };
            '4189'?: {
            
            };
            '4190'?: {
            
            };
            '4191'?: {
            
            };
            '4192'?: {
            
            };
            '4193'?: {
            
            };
            '4194'?: {
            
            };
            '4195'?: {
            
            };
            '4196'?: {
            
            };
            '4197'?: {
            
            };
            '4198'?: {
            
            };
            '4199'?: {
            
            };
            '4200'?: {
            
            };
            '4201'?: {
            
            };
            '4202'?: {
            
            };
            '4203'?: {
            
            };
            '4204'?: {
            
            };
            '4205'?: {
            
            };
            '4206'?: {
            
            };
            '4207'?: {
            
            };
            '4208'?: {
            
            };
            '4209'?: {
            
            };
            '4210'?: {
            
            };
            '4211'?: {
            
            };
            '4212'?: {
            
            };
            '4213'?: {
            
            };
            '4214'?: {
            
            };
            '4215'?: {
            
            };
            '4216'?: {
            
            };
            '4217'?: {
            
            };
            '4218'?: {
            
            };
            '4219'?: {
            
            };
            '4220'?: {
            
            };
            '4221'?: {
            
            };
            '4222'?: {
            
            };
            '4223'?: {
            
            };
            '4224'?: {
            
            };
            '4225'?: {
            
            };
            '4226'?: {
            
            };
            '4227'?: {
            
            };
            '4228'?: {
            
            };
            '4229'?: {
            
            };
            '4230'?: {
            
            };
            '4231'?: {
            
            };
            '4232'?: {
            
            };
            '4233'?: {
            
            };
            '4234'?: {
            
            };
            '4235'?: {
            
            };
            '4236'?: {
            
            };
            '4237'?: {
            
            };
            '4238'?: {
            
            };
            '4239'?: {
            
            };
            '4240'?: {
            
            };
            '4241'?: {
            
            };
            '4242'?: {
            
            };
            '4243'?: {
            
            };
            '4244'?: {
            
            };
            '4245'?: {
            
            };
            '4246'?: {
            
            };
            '4247'?: {
            
            };
            '4248'?: {
            
            };
            '4249'?: {
            
            };
            '4250'?: {
            
            };
            '4251'?: {
            
            };
            '4252'?: {
            
            };
            '4253'?: {
            
            };
            '4254'?: {
            
            };
            '4255'?: {
            
            };
            '4256'?: {
            
            };
            '4257'?: {
            
            };
            '4258'?: {
            
            };
            '4259'?: {
            
            };
            '4260'?: {
            
            };
            '4261'?: {
            
            };
            '4262'?: {
            
            };
            '4263'?: {
            
            };
            '4264'?: {
            
            };
            '4265'?: {
            
            };
            '4266'?: {
            
            };
            '4267'?: {
            
            };
            '4268'?: {
            
            };
            '4269'?: {
            
            };
            '4270'?: {
            
            };
            '4271'?: {
            
            };
            '4272'?: {
            
            };
            '4273'?: {
            
            };
            '4274'?: {
            
            };
            '4275'?: {
            
            };
            '4276'?: {
            
            };
            '4277'?: {
            
            };
            '4278'?: {
            
            };
            '4279'?: {
            
            };
            '4280'?: {
            
            };
            '4281'?: {
            
            };
            '4282'?: {
            
            };
            '4283'?: {
            
            };
            '4284'?: {
            
            };
            '4285'?: {
            
            };
            '4286'?: {
            
            };
            '4287'?: {
            
            };
            '4288'?: {
            
            };
            '4289'?: {
            
            };
            '4290'?: {
            
            };
            '4291'?: {
            
            };
            '4292'?: {
            
            };
            '4293'?: {
            
            };
            '4294'?: {
            
            };
            '4295'?: {
            
            };
            '4296'?: {
            
            };
            '4297'?: {
            
            };
            '4298'?: {
            
            };
            '4299'?: {
            
            };
            '4300'?: {
            
            };
            '4301'?: {
            
            };
            '4302'?: {
            
            };
            '4303'?: {
            
            };
            '4304'?: {
            
            };
            '4305'?: {
            
            };
            '4306'?: {
            
            };
            '4307'?: {
            
            };
            '4308'?: {
            
            };
            '4309'?: {
            
            };
            '4310'?: {
            
            };
            '4311'?: {
            
            };
            '4312'?: {
            
            };
            '4313'?: {
            
            };
            '4314'?: {
            
            };
            '4315'?: {
            
            };
            '4316'?: {
            
            };
            '4317'?: {
            
            };
            '4318'?: {
            
            };
            '4319'?: {
            
            };
            '4320'?: {
            
            };
            '4321'?: {
            
            };
            '4322'?: {
            
            };
            '4323'?: {
            
            };
            '4324'?: {
            
            };
            '4325'?: {
            
            };
            '4326'?: {
            
            };
            '4327'?: {
            
            };
            '4328'?: {
            
            };
            '4329'?: {
            
            };
            '4330'?: {
            
            };
            '4331'?: {
            
            };
            '4332'?: {
            
            };
            '4333'?: {
            
            };
            '4334'?: {
            
            };
            '4335'?: {
            
            };
            '4336'?: {
            
            };
            '4337'?: {
            
            };
            '4338'?: {
            
            };
            '4339'?: {
            
            };
            '4340'?: {
            
            };
            '4341'?: {
            
            };
            '4342'?: {
            
            };
            '4343'?: {
            
            };
            '4344'?: {
            
            };
            '4345'?: {
            
            };
            '4346'?: {
            
            };
            '4347'?: {
            
            };
            '4348'?: {
            
            };
            '4349'?: {
            
            };
            '4350'?: {
            
            };
            '4351'?: {
            
            };
            '4352'?: {
            
            };
            '4353'?: {
            
            };
            '4354'?: {
            
            };
            '4355'?: {
            
            };
            '4356'?: {
            
            };
            '4357'?: {
            
            };
            '4358'?: {
            
            };
            '4359'?: {
            
            };
            '4360'?: {
            
            };
            '4361'?: {
            
            };
            '4362'?: {
            
            };
            '4363'?: {
            
            };
            '4364'?: {
            
            };
            '4365'?: {
            
            };
            '4366'?: {
            
            };
            '4367'?: {
            
            };
            '4368'?: {
            
            };
            '4369'?: {
            
            };
            '4370'?: {
            
            };
            '4371'?: {
            
            };
            '4372'?: {
            
            };
            '4373'?: {
            
            };
            '4374'?: {
            
            };
            '4375'?: {
            
            };
            '4376'?: {
            
            };
            '4377'?: {
            
            };
            '4378'?: {
            
            };
            '4379'?: {
            
            };
            '4380'?: {
            
            };
            '4381'?: {
            
            };
            '4382'?: {
            
            };
            '4383'?: {
            
            };
            '4384'?: {
            
            };
            '4385'?: {
            
            };
            '4386'?: {
            
            };
            '4387'?: {
            
            };
            '4388'?: {
            
            };
            '4389'?: {
            
            };
            '4390'?: {
            
            };
            '4391'?: {
            
            };
            '4392'?: {
            
            };
            '4393'?: {
            
            };
            '4394'?: {
            
            };
            '4395'?: {
            
            };
            '4396'?: {
            
            };
            '4397'?: {
            
            };
            '4398'?: {
            
            };
            '4399'?: {
            
            };
            '4400'?: {
            
            };
            '4401'?: {
            
            };
            '4402'?: {
            
            };
            '4403'?: {
            
            };
            '4404'?: {
            
            };
            '4405'?: {
            
            };
            '4406'?: {
            
            };
            '4407'?: {
            
            };
            '4408'?: {
            
            };
            '4409'?: {
            
            };
            '4410'?: {
            
            };
            '4411'?: {
            
            };
            '4412'?: {
            
            };
            '4413'?: {
            
            };
            '4414'?: {
            
            };
            '4415'?: {
            
            };
            '4416'?: {
            
            };
            '4417'?: {
            
            };
            '4418'?: {
            
            };
            '4419'?: {
            
            };
            '4420'?: {
            
            };
            '4421'?: {
            
            };
            '4422'?: {
            
            };
            '4423'?: {
            
            };
            '4424'?: {
            
            };
            '4425'?: {
            
            };
            '4426'?: {
            
            };
            '4427'?: {
            
            };
            '4428'?: {
            
            };
            '4429'?: {
            
            };
            '4430'?: {
            
            };
            '4431'?: {
            
            };
            '4432'?: {
            
            };
            '4433'?: {
            
            };
            '4434'?: {
            
            };
            '4435'?: {
            
            };
            '4436'?: {
            
            };
            '4437'?: {
            
            };
            '4438'?: {
            
            };
            '4439'?: {
            
            };
            '4440'?: {
            
            };
            '4441'?: {
            
            };
            '4442'?: {
            
            };
            '4443'?: {
            
            };
            '4444'?: {
            
            };
            '4445'?: {
            
            };
            '4446'?: {
            
            };
            '4447'?: {
            
            };
            '4448'?: {
            
            };
            '4449'?: {
            
            };
            '4450'?: {
            
            };
            '4451'?: {
            
            };
            '4452'?: {
            
            };
            '4453'?: {
            
            };
            '4454'?: {
            
            };
            '4455'?: {
            
            };
            '4456'?: {
            
            };
            '4457'?: {
            
            };
            '4458'?: {
            
            };
            '4459'?: {
            
            };
            '4460'?: {
            
            };
            '4461'?: {
            
            };
            '4462'?: {
            
            };
            '4463'?: {
            
            };
            '4464'?: {
            
            };
            '4465'?: {
            
            };
            '4466'?: {
            
            };
            '4467'?: {
            
            };
            '4468'?: {
            
            };
            '4469'?: {
            
            };
            '4470'?: {
            
            };
            '4471'?: {
            
            };
            '4472'?: {
            
            };
            '4473'?: {
            
            };
            '4474'?: {
            
            };
            '4475'?: {
            
            };
            '4476'?: {
            
            };
            '4477'?: {
            
            };
            '4478'?: {
            
            };
            '4479'?: {
            
            };
            '4480'?: {
            
            };
            '4481'?: {
            
            };
            '4482'?: {
            
            };
            '4483'?: {
            
            };
            '4484'?: {
            
            };
            '4485'?: {
            
            };
            '4486'?: {
            
            };
            '4487'?: {
            
            };
            '4488'?: {
            
            };
            '4489'?: {
            
            };
            '4490'?: {
            
            };
            '4491'?: {
            
            };
            '4492'?: {
            
            };
            '4493'?: {
            
            };
            '4494'?: {
            
            };
            '4495'?: {
            
            };
            '4496'?: {
            
            };
            '4497'?: {
            
            };
            '4498'?: {
            
            };
            '4499'?: {
            
            };
            '4500'?: {
            
            };
            '4501'?: {
            
            };
            '4502'?: {
            
            };
            '4503'?: {
            
            };
            '4504'?: {
            
            };
            '4505'?: {
            
            };
            '4506'?: {
            
            };
            '4507'?: {
            
            };
            '4508'?: {
            
            };
            '4509'?: {
            
            };
            '4510'?: {
            
            };
            '4511'?: {
            
            };
            '4512'?: {
            
            };
            '4513'?: {
            
            };
            '4514'?: {
            
            };
            '4515'?: {
            
            };
            '4516'?: {
            
            };
            '4517'?: {
            
            };
            '4518'?: {
            
            };
            '4519'?: {
            
            };
            '4520'?: {
            
            };
            '4521'?: {
            
            };
            '4522'?: {
            
            };
            '4523'?: {
            
            };
            '4524'?: {
            
            };
            '4525'?: {
            
            };
            '4526'?: {
            
            };
            '4527'?: {
            
            };
            '4528'?: {
            
            };
            '4529'?: {
            
            };
            '4530'?: {
            
            };
            '4531'?: {
            
            };
            '4532'?: {
            
            };
            '4533'?: {
            
            };
            '4534'?: {
            
            };
            '4535'?: {
            
            };
            '4536'?: {
            
            };
            '4537'?: {
            
            };
            '4538'?: {
            
            };
            '4539'?: {
            
            };
            '4540'?: {
            
            };
            '4541'?: {
            
            };
            '4542'?: {
            
            };
            '4543'?: {
            
            };
            '4544'?: {
            
            };
            '4545'?: {
            
            };
            '4546'?: {
            
            };
            '4547'?: {
            
            };
            '4548'?: {
            
            };
            '4549'?: {
            
            };
            '4550'?: {
            
            };
            '4551'?: {
            
            };
            '4552'?: {
            
            };
            '4553'?: {
            
            };
            '4554'?: {
            
            };
            '4555'?: {
            
            };
            '4556'?: {
            
            };
            '4557'?: {
            
            };
            '4558'?: {
            
            };
            '4559'?: {
            
            };
            '4560'?: {
            
            };
            '4561'?: {
            
            };
            '4562'?: {
            
            };
            '4563'?: {
            
            };
            '4564'?: {
            
            };
            '4565'?: {
            
            };
            '4566'?: {
            
            };
            '4567'?: {
            
            };
            '4568'?: {
            
            };
            '4569'?: {
            
            };
            '4570'?: {
            
            };
            '4571'?: {
            
            };
            '4572'?: {
            
            };
            '4573'?: {
            
            };
            '4574'?: {
            
            };
            '4575'?: {
            
            };
            '4576'?: {
            
            };
            '4577'?: {
            
            };
            '4578'?: {
            
            };
            '4579'?: {
            
            };
            '4580'?: {
            
            };
            '4581'?: {
            
            };
            '4582'?: {
            
            };
            '4583'?: {
            
            };
            '4584'?: {
            
            };
            '4585'?: {
            
            };
            '4586'?: {
            
            };
            '4587'?: {
            
            };
            '4588'?: {
            
            };
            '4589'?: {
            
            };
            '4590'?: {
            
            };
            '4591'?: {
            
            };
            '4592'?: {
            
            };
            '4593'?: {
            
            };
            '4594'?: {
            
            };
            '4595'?: {
            
            };
            '4596'?: {
            
            };
            '4597'?: {
            
            };
            '4598'?: {
            
            };
            '4599'?: {
            
            };
            '4600'?: {
            
            };
            '4601'?: {
            
            };
            '4602'?: {
            
            };
            '4603'?: {
            
            };
            '4604'?: {
            
            };
            '4605'?: {
            
            };
            '4606'?: {
            
            };
            '4607'?: {
            
            };
            '4608'?: {
            
            };
            '4609'?: {
            
            };
            '4610'?: {
            
            };
            '4611'?: {
            
            };
            '4612'?: {
            
            };
            '4613'?: {
            
            };
            '4614'?: {
            
            };
            '4615'?: {
            
            };
            '4616'?: {
            
            };
            '4617'?: {
            
            };
            '4618'?: {
            
            };
            '4619'?: {
            
            };
            '4620'?: {
            
            };
            '4621'?: {
            
            };
            '4622'?: {
            
            };
            '4623'?: {
            
            };
            '4624'?: {
            
            };
            '4625'?: {
            
            };
            '4626'?: {
            
            };
            '4627'?: {
            
            };
            '4628'?: {
            
            };
            '4629'?: {
            
            };
            '4630'?: {
            
            };
            '4631'?: {
            
            };
            '4632'?: {
            
            };
            '4633'?: {
            
            };
            '4634'?: {
            
            };
            '4635'?: {
            
            };
            '4636'?: {
            
            };
            '4637'?: {
            
            };
            '4638'?: {
            
            };
            '4639'?: {
            
            };
            '4640'?: {
            
            };
            '4641'?: {
            
            };
            '4642'?: {
            
            };
            '4643'?: {
            
            };
            '4644'?: {
            
            };
            '4645'?: {
            
            };
            '4646'?: {
            
            };
            '4647'?: {
            
            };
            '4648'?: {
            
            };
            '4649'?: {
            
            };
            '4650'?: {
            
            };
            '4651'?: {
            
            };
            '4652'?: {
            
            };
            '4653'?: {
            
            };
            '4654'?: {
            
            };
            '4655'?: {
            
            };
            '4656'?: {
            
            };
            '4657'?: {
            
            };
            '4658'?: {
            
            };
            '4659'?: {
            
            };
            '4660'?: {
            
            };
            '4661'?: {
            
            };
            '4662'?: {
            
            };
            '4663'?: {
            
            };
            '4664'?: {
            
            };
            '4665'?: {
            
            };
            '4666'?: {
            
            };
            '4667'?: {
            
            };
            '4668'?: {
            
            };
            '4669'?: {
            
            };
            '4670'?: {
            
            };
            '4671'?: {
            
            };
            '4672'?: {
            
            };
            '4673'?: {
            
            };
            '4674'?: {
            
            };
            '4675'?: {
            
            };
            '4676'?: {
            
            };
            '4677'?: {
            
            };
            '4678'?: {
            
            };
            '4679'?: {
            
            };
            '4680'?: {
            
            };
            '4681'?: {
            
            };
            '4682'?: {
            
            };
            '4683'?: {
            
            };
            '4684'?: {
            
            };
            '4685'?: {
            
            };
            '4686'?: {
            
            };
            '4687'?: {
            
            };
            '4688'?: {
            
            };
            '4689'?: {
            
            };
            '4690'?: {
            
            };
            '4691'?: {
            
            };
            '4692'?: {
            
            };
            '4693'?: {
            
            };
            '4694'?: {
            
            };
            '4695'?: {
            
            };
            '4696'?: {
            
            };
            '4697'?: {
            
            };
            '4698'?: {
            
            };
            '4699'?: {
            
            };
            '4700'?: {
            
            };
            '4701'?: {
            
            };
            '4702'?: {
            
            };
            '4703'?: {
            
            };
            '4704'?: {
            
            };
            '4705'?: {
            
            };
            '4706'?: {
            
            };
            '4707'?: {
            
            };
            '4708'?: {
            
            };
            '4709'?: {
            
            };
            '4710'?: {
            
            };
            '4711'?: {
            
            };
            '4712'?: {
            
            };
            '4713'?: {
            
            };
            '4714'?: {
            
            };
            '4715'?: {
            
            };
            '4716'?: {
            
            };
            '4717'?: {
            
            };
            '4718'?: {
            
            };
            '4719'?: {
            
            };
            '4720'?: {
            
            };
            '4721'?: {
            
            };
            '4722'?: {
            
            };
            '4723'?: {
            
            };
            '4724'?: {
            
            };
            '4725'?: {
            
            };
            '4726'?: {
            
            };
            '4727'?: {
            
            };
            '4728'?: {
            
            };
            '4729'?: {
            
            };
            '4730'?: {
            
            };
            '4731'?: {
            
            };
            '4732'?: {
            
            };
            '4733'?: {
            
            };
            '4734'?: {
            
            };
            '4735'?: {
            
            };
            '4736'?: {
            
            };
            '4737'?: {
            
            };
            '4738'?: {
            
            };
            '4739'?: {
            
            };
            '4740'?: {
            
            };
            '4741'?: {
            
            };
            '4742'?: {
            
            };
            '4743'?: {
            
            };
            '4744'?: {
            
            };
            '4745'?: {
            
            };
            '4746'?: {
            
            };
            '4747'?: {
            
            };
            '4748'?: {
            
            };
            '4749'?: {
            
            };
            '4750'?: {
            
            };
            '4751'?: {
            
            };
            '4752'?: {
            
            };
            '4753'?: {
            
            };
            '4754'?: {
            
            };
            '4755'?: {
            
            };
            '4756'?: {
            
            };
            '4757'?: {
            
            };
            '4758'?: {
            
            };
            '4759'?: {
            
            };
            '4760'?: {
            
            };
            '4761'?: {
            
            };
            '4762'?: {
            
            };
            '4763'?: {
            
            };
            '4764'?: {
            
            };
            '4765'?: {
            
            };
            '4766'?: {
            
            };
            '4767'?: {
            
            };
            '4768'?: {
            
            };
            '4769'?: {
            
            };
            '4770'?: {
            
            };
            '4771'?: {
            
            };
            '4772'?: {
            
            };
            '4773'?: {
            
            };
            '4774'?: {
            
            };
            '4775'?: {
            
            };
            '4776'?: {
            
            };
            '4777'?: {
            
            };
            '4778'?: {
            
            };
            '4779'?: {
            
            };
            '4780'?: {
            
            };
            '4781'?: {
            
            };
            '4782'?: {
            
            };
            '4783'?: {
            
            };
            '4784'?: {
            
            };
            '4785'?: {
            
            };
            '4786'?: {
            
            };
            '4787'?: {
            
            };
            '4788'?: {
            
            };
            '4789'?: {
            
            };
            '4790'?: {
            
            };
            '4791'?: {
            
            };
            '4792'?: {
            
            };
            '4793'?: {
            
            };
            '4794'?: {
            
            };
            '4795'?: {
            
            };
            '4796'?: {
            
            };
            '4797'?: {
            
            };
            '4798'?: {
            
            };
            '4799'?: {
            
            };
            '4800'?: {
            
            };
            '4801'?: {
            
            };
            '4802'?: {
            
            };
            '4803'?: {
            
            };
            '4804'?: {
            
            };
            '4805'?: {
            
            };
            '4806'?: {
            
            };
            '4807'?: {
            
            };
            '4808'?: {
            
            };
            '4809'?: {
            
            };
            '4810'?: {
            
            };
            '4811'?: {
            
            };
            '4812'?: {
            
            };
            '4813'?: {
            
            };
            '4814'?: {
            
            };
            '4815'?: {
            
            };
            '4816'?: {
            
            };
            '4817'?: {
            
            };
            '4818'?: {
            
            };
            '4819'?: {
            
            };
            '4820'?: {
            
            };
            '4821'?: {
            
            };
            '4822'?: {
            
            };
            '4823'?: {
            
            };
            '4824'?: {
            
            };
            '4825'?: {
            
            };
            '4826'?: {
            
            };
            '4827'?: {
            
            };
            '4828'?: {
            
            };
            '4829'?: {
            
            };
            '4830'?: {
            
            };
            '4831'?: {
            
            };
            '4832'?: {
            
            };
            '4833'?: {
            
            };
            '4834'?: {
            
            };
            '4835'?: {
            
            };
            '4836'?: {
            
            };
            '4837'?: {
            
            };
            '4838'?: {
            
            };
            '4839'?: {
            
            };
            '4840'?: {
            
            };
            '4841'?: {
            
            };
            '4842'?: {
            
            };
            '4843'?: {
            
            };
            '4844'?: {
            
            };
            '4845'?: {
            
            };
            '4846'?: {
            
            };
            '4847'?: {
            
            };
            '4848'?: {
            
            };
            '4849'?: {
            
            };
            '4850'?: {
            
            };
            '4851'?: {
            
            };
            '4852'?: {
            
            };
            '4853'?: {
            
            };
            '4854'?: {
            
            };
            '4855'?: {
            
            };
            '4856'?: {
            
            };
            '4857'?: {
            
            };
            '4858'?: {
            
            };
            '4859'?: {
            
            };
            '4860'?: {
            
            };
            '4861'?: {
            
            };
            '4862'?: {
            
            };
            '4863'?: {
            
            };
            '4864'?: {
            
            };
            '4865'?: {
            
            };
            '4866'?: {
            
            };
            '4867'?: {
            
            };
            '4868'?: {
            
            };
            '4869'?: {
            
            };
            '4870'?: {
            
            };
            '4871'?: {
            
            };
            '4872'?: {
            
            };
            '4873'?: {
            
            };
            '4874'?: {
            
            };
            '4875'?: {
            
            };
            '4876'?: {
            
            };
            '4877'?: {
            
            };
            '4878'?: {
            
            };
            '4879'?: {
            
            };
            '4880'?: {
            
            };
            '4881'?: {
            
            };
            '4882'?: {
            
            };
            '4883'?: {
            
            };
            '4884'?: {
            
            };
            '4885'?: {
            
            };
            '4886'?: {
            
            };
            '4887'?: {
            
            };
            '4888'?: {
            
            };
            '4889'?: {
            
            };
            '4890'?: {
            
            };
            '4891'?: {
            
            };
            '4892'?: {
            
            };
            '4893'?: {
            
            };
            '4894'?: {
            
            };
            '4895'?: {
            
            };
            '4896'?: {
            
            };
            '4897'?: {
            
            };
            '4898'?: {
            
            };
            '4899'?: {
            
            };
            '4900'?: {
            
            };
            '4901'?: {
            
            };
            '4902'?: {
            
            };
            '4903'?: {
            
            };
            '4904'?: {
            
            };
            '4905'?: {
            
            };
            '4906'?: {
            
            };
            '4907'?: {
            
            };
            '4908'?: {
            
            };
            '4909'?: {
            
            };
            '4910'?: {
            
            };
            '4911'?: {
            
            };
            '4912'?: {
            
            };
            '4913'?: {
            
            };
            '4914'?: {
            
            };
            '4915'?: {
            
            };
            '4916'?: {
            
            };
            '4917'?: {
            
            };
            '4918'?: {
            
            };
            '4919'?: {
            
            };
            '4920'?: {
            
            };
            '4921'?: {
            
            };
            '4922'?: {
            
            };
            '4923'?: {
            
            };
            '4924'?: {
            
            };
            '4925'?: {
            
            };
            '4926'?: {
            
            };
            '4927'?: {
            
            };
            '4928'?: {
            
            };
            '4929'?: {
            
            };
            '4930'?: {
            
            };
            '4931'?: {
            
            };
            '4932'?: {
            
            };
            '4933'?: {
            
            };
            '4934'?: {
            
            };
            '4935'?: {
            
            };
            '4936'?: {
            
            };
            '4937'?: {
            
            };
            '4938'?: {
            
            };
            '4939'?: {
            
            };
            '4940'?: {
            
            };
            '4941'?: {
            
            };
            '4942'?: {
            
            };
            '4943'?: {
            
            };
            '4944'?: {
            
            };
            '4945'?: {
            
            };
            '4946'?: {
            
            };
            '4947'?: {
            
            };
            '4948'?: {
            
            };
            '4949'?: {
            
            };
            '4950'?: {
            
            };
            '4951'?: {
            
            };
            '4952'?: {
            
            };
            '4953'?: {
            
            };
            '4954'?: {
            
            };
            '4955'?: {
            
            };
            '4956'?: {
            
            };
            '4957'?: {
            
            };
            '4958'?: {
            
            };
            '4959'?: {
            
            };
            '4960'?: {
            
            };
            '4961'?: {
            
            };
            '4962'?: {
            
            };
            '4963'?: {
            
            };
            '4964'?: {
            
            };
            '4965'?: {
            
            };
            '4966'?: {
            
            };
            '4967'?: {
            
            };
            '4968'?: {
            
            };
            '4969'?: {
            
            };
            '4970'?: {
            
            };
            '4971'?: {
            
            };
            '4972'?: {
            
            };
            '4973'?: {
            
            };
            '4974'?: {
            
            };
            '4975'?: {
            
            };
            '4976'?: {
            
            };
            '4977'?: {
            
            };
            '4978'?: {
            
            };
            '4979'?: {
            
            };
            '4980'?: {
            
            };
            '4981'?: {
            
            };
            '4982'?: {
            
            };
            '4983'?: {
            
            };
            '4984'?: {
            
            };
            '4985'?: {
            
            };
          }[];
          crlset_sequence: number;
          host: string;
          is_issued_by_known_root: boolean;
          ocsp_response?: string;
          public_key_hashes: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
            '30': string;
            '31': string;
            '32': string;
            '33': string;
            '34': string;
            '35': string;
            '36': string;
            '37': string;
            '38': string;
            '39': string;
            '40': string;
            '41': string;
            '42': string;
            '43': string;
            '44': string;
            '45': string;
            '46': string;
            '47': string;
            '48': string;
            '49': string;
            '50': string;
          }[];
          verified_cert: {
            certificates: {
              '0': string;
              '1': string;
              '2': string;
              '3': string;
              '4': string;
              '5': string;
              '6': string;
              '7': string;
              '8': string;
              '9': string;
              '10': string;
              '11': string;
              '12': string;
              '13': string;
              '14': string;
              '15': string;
              '16': string;
              '17': string;
              '18': string;
              '19': string;
              '20': string;
              '21': string;
              '22': string;
              '23': string;
              '24': string;
              '25': string;
              '26': string;
              '27': string;
              '28': string;
              '29': string;
              '30': string;
              '31': string;
              '32': string;
              '33': string;
              '34': string;
              '35': string;
              '36': string;
              '37': string;
              '38': string;
              '39': string;
              '40': string;
              '41': string;
              '42': string;
              '43': string;
              '44': string;
              '45': string;
              '46': string;
              '47': string;
              '48': string;
              '49': string;
              '50': string;
              '51': string;
              '52': string;
              '53': string;
              '54': string;
              '55': string;
              '56': string;
              '57': string;
              '58': string;
              '59': string;
              '60': string;
              '61': string;
              '62': string;
              '63': string;
              '64': string;
              '65': string;
              '66': string;
              '67': string;
              '68': string;
              '69': string;
              '70': string;
              '71': string;
              '72': string;
              '73': string;
              '74': string;
              '75': string;
              '76': string;
              '77': string;
              '78': string;
              '79': string;
              '80': string;
              '81': string;
              '82': string;
              '83': string;
              '84': string;
              '85': string;
              '86': string;
              '87': string;
              '88': string;
              '89': string;
              '90': string;
              '91': string;
              '92': string;
              '93': string;
              '94': string;
              '95': string;
              '96': string;
              '97': string;
              '98': string;
              '99': string;
              '100': string;
              '101': string;
              '102': string;
              '103': string;
              '104': string;
              '105': string;
              '106': string;
              '107': string;
              '108': string;
              '109': string;
              '110': string;
              '111': string;
              '112': string;
              '113': string;
              '114': string;
              '115': string;
              '116': string;
              '117': string;
              '118': string;
              '119': string;
              '120': string;
              '121': string;
              '122': string;
              '123': string;
              '124': string;
              '125': string;
              '126': string;
              '127': string;
              '128': string;
              '129': string;
              '130': string;
              '131': string;
              '132': string;
              '133': string;
              '134': string;
              '135': string;
              '136': string;
              '137': string;
              '138': string;
              '139': string;
              '140': string;
              '141': string;
              '142': string;
              '143': string;
              '144': string;
              '145': string;
              '146': string;
              '147': string;
              '148': string;
              '149': string;
              '150': string;
              '151': string;
              '152': string;
              '153': string;
              '154': string;
              '155': string;
              '156': string;
              '157': string;
              '158': string;
              '159': string;
              '160': string;
              '161': string;
              '162': string;
              '163': string;
              '164': string;
              '165': string;
              '166': string;
              '167': string;
              '168': string;
              '169': string;
              '170': string;
              '171': string;
              '172': string;
              '173': string;
              '174': string;
              '175': string;
              '176': string;
              '177': string;
              '178': string;
              '179': string;
              '180': string;
              '181': string;
              '182': string;
              '183': string;
              '184': string;
              '185': string;
              '186': string;
              '187': string;
              '188': string;
              '189': string;
              '190': string;
              '191': string;
              '192': string;
              '193': string;
              '194': string;
              '195': string;
              '196': string;
              '197': string;
              '198': string;
              '199': string;
              '200': string;
              '201': string;
              '202': string;
              '203': string;
              '204': string;
              '205': string;
              '206': string;
              '207': string;
              '208': string;
              '209': string;
              '210': string;
              '211': string;
              '212': string;
              '213': string;
              '214': string;
              '215': string;
              '216': string;
              '217': string;
              '218': string;
              '219': string;
              '220': string;
              '221': string;
              '222': string;
              '223': string;
              '224': string;
              '225': string;
              '226': string;
              '227': string;
              '228': string;
              '229': string;
              '230': string;
              '231': string;
              '232': string;
              '233': string;
              '234': string;
              '235': string;
              '236': string;
              '237': string;
              '238': string;
              '239': string;
              '240': string;
              '241': string;
              '242': string;
              '243': string;
              '244': string;
              '245': string;
              '246': string;
              '247': string;
              '248': string;
              '249': string;
              '250': string;
              '251': string;
              '252': string;
              '253': string;
              '254': string;
              '255': string;
              '256': string;
              '257': string;
              '258': string;
              '259': string;
              '260': string;
              '261': string;
              '262': string;
              '263': string;
              '264': string;
              '265': string;
              '266': string;
              '267': string;
              '268': string;
              '269': string;
              '270': string;
              '271': string;
              '272': string;
              '273': string;
              '274': string;
              '275': string;
              '276': string;
              '277': string;
              '278': string;
              '279': string;
              '280': string;
              '281': string;
              '282': string;
              '283': string;
              '284': string;
              '285': string;
              '286': string;
              '287': string;
              '288': string;
              '289': string;
              '290': string;
              '291': string;
              '292': string;
              '293': string;
              '294': string;
              '295': string;
              '296': string;
              '297': string;
              '298': string;
              '299': string;
              '300': string;
              '301': string;
              '302': string;
              '303': string;
              '304': string;
              '305': string;
              '306': string;
              '307': string;
              '308': string;
              '309': string;
              '310': string;
              '311': string;
              '312': string;
              '313': string;
              '314': string;
              '315': string;
              '316': string;
              '317': string;
              '318': string;
              '319': string;
              '320': string;
              '321': string;
              '322': string;
              '323': string;
              '324': string;
              '325': string;
              '326': string;
              '327': string;
              '328': string;
              '329': string;
              '330': string;
              '331': string;
              '332': string;
              '333': string;
              '334': string;
              '335': string;
              '336': string;
              '337': string;
              '338': string;
              '339': string;
              '340': string;
              '341': string;
              '342': string;
              '343': string;
              '344': string;
              '345': string;
              '346': string;
              '347': string;
              '348': string;
              '349': string;
              '350': string;
              '351': string;
              '352': string;
              '353': string;
              '354': string;
              '355': string;
              '356': string;
              '357': string;
              '358': string;
              '359': string;
              '360': string;
              '361': string;
              '362': string;
              '363': string;
              '364': string;
              '365': string;
              '366': string;
              '367': string;
              '368': string;
              '369': string;
              '370': string;
              '371': string;
              '372': string;
              '373': string;
              '374': string;
              '375': string;
              '376': string;
              '377': string;
              '378': string;
              '379': string;
              '380': string;
              '381': string;
              '382': string;
              '383': string;
              '384': string;
              '385': string;
              '386': string;
              '387': string;
              '388': string;
              '389': string;
              '390': string;
              '391': string;
              '392': string;
              '393': string;
              '394': string;
              '395': string;
              '396': string;
              '397': string;
              '398': string;
              '399': string;
              '400': string;
              '401': string;
              '402': string;
              '403': string;
              '404': string;
              '405': string;
              '406': string;
              '407': string;
              '408': string;
              '409': string;
              '410': string;
              '411': string;
              '412': string;
              '413': string;
              '414': string;
              '415': string;
              '416': string;
              '417': string;
              '418': string;
              '419': string;
              '420': string;
              '421': string;
              '422': string;
              '423': string;
              '424': string;
              '425': string;
              '426': string;
              '427': string;
              '428': string;
              '429': string;
              '430': string;
              '431': string;
              '432': string;
              '433': string;
              '434': string;
              '435': string;
              '436': string;
              '437': string;
              '438': string;
              '439': string;
              '440': string;
              '441': string;
              '442': string;
              '443': string;
              '444': string;
              '445': string;
              '446': string;
              '447': string;
              '448': string;
              '449': string;
              '450': string;
              '451': string;
              '452': string;
              '453': string;
              '454': string;
              '455': string;
              '456': string;
              '457': string;
              '458': string;
              '459': string;
              '460': string;
              '461': string;
              '462': string;
              '463': string;
              '464': string;
              '465': string;
              '466': string;
              '467': string;
              '468': string;
              '469': string;
              '470': string;
              '471': string;
              '472': string;
              '473': string;
              '474': string;
              '475': string;
              '476': string;
              '477': string;
              '478': string;
              '479': string;
              '480': string;
              '481': string;
              '482': string;
              '483': string;
              '484': string;
              '485': string;
              '486': string;
              '487': string;
              '488': string;
              '489': string;
              '490': string;
              '491': string;
              '492': string;
              '493': string;
              '494': string;
              '495': string;
              '496': string;
              '497': string;
              '498': string;
              '499': string;
              '500': string;
              '501': string;
              '502': string;
              '503': string;
              '504': string;
              '505': string;
              '506': string;
              '507': string;
              '508': string;
              '509': string;
              '510': string;
              '511': string;
              '512': string;
              '513': string;
              '514': string;
              '515': string;
              '516': string;
              '517': string;
              '518': string;
              '519': string;
              '520': string;
              '521': string;
              '522': string;
              '523': string;
              '524': string;
              '525': string;
              '526': string;
              '527': string;
              '528': string;
              '529': string;
              '530': string;
              '531': string;
              '532': string;
              '533': string;
              '534': string;
              '535': string;
              '536': string;
              '537': string;
              '538': string;
              '539': string;
              '540': string;
              '541': string;
              '542': string;
              '543': string;
              '544': string;
              '545': string;
              '546': string;
              '547': string;
              '548': string;
              '549': string;
              '550': string;
              '551': string;
              '552': string;
              '553': string;
              '554': string;
              '555': string;
              '556': string;
              '557': string;
              '558': string;
              '559': string;
              '560': string;
              '561': string;
              '562': string;
              '563': string;
              '564': string;
              '565': string;
              '566': string;
              '567': string;
              '568': string;
              '569': string;
              '570': string;
              '571': string;
              '572': string;
              '573': string;
              '574': string;
              '575': string;
              '576': string;
              '577': string;
              '578': string;
              '579': string;
              '580': string;
              '581': string;
              '582': string;
              '583': string;
              '584': string;
              '585': string;
              '586': string;
              '587': string;
              '588': string;
              '589': string;
              '590': string;
              '591': string;
              '592': string;
              '593': string;
              '594': string;
              '595': string;
              '596': string;
              '597': string;
              '598': string;
              '599': string;
              '600': string;
              '601': string;
              '602': string;
              '603': string;
              '604': string;
              '605': string;
              '606': string;
              '607': string;
              '608': string;
              '609': string;
              '610': string;
              '611': string;
              '612': string;
              '613': string;
              '614': string;
              '615': string;
              '616': string;
              '617': string;
              '618': string;
              '619': string;
              '620': string;
              '621': string;
              '622': string;
              '623': string;
              '624': string;
              '625': string;
              '626': string;
              '627': string;
              '628': string;
              '629': string;
              '630': string;
              '631': string;
              '632': string;
              '633': string;
              '634': string;
              '635': string;
              '636': string;
              '637': string;
              '638': string;
              '639': string;
              '640': string;
              '641': string;
              '642': string;
              '643': string;
              '644': string;
              '645': string;
              '646': string;
              '647': string;
              '648': string;
              '649': string;
              '650': string;
              '651': string;
              '652': string;
              '653': string;
              '654': string;
              '655': string;
              '656': string;
              '657': string;
              '658': string;
              '659': string;
              '660': string;
              '661': string;
              '662': string;
              '663': string;
              '664': string;
              '665': string;
              '666': string;
              '667': string;
              '668': string;
              '669': string;
              '670': string;
              '671': string;
              '672': string;
              '673': string;
              '674': string;
              '675': string;
              '676': string;
              '677': string;
              '678': string;
              '679': string;
              '680': string;
              '681': string;
              '682': string;
              '683': string;
              '684': string;
              '685': string;
              '686': string;
              '687': string;
              '688': string;
              '689': string;
              '690': string;
              '691': string;
              '692': string;
              '693': string;
              '694': string;
              '695': string;
              '696': string;
              '697': string;
              '698': string;
              '699': string;
              '700': string;
              '701': string;
              '702': string;
              '703': string;
              '704': string;
              '705': string;
              '706': string;
              '707': string;
              '708': string;
              '709': string;
              '710': string;
              '711': string;
              '712': string;
              '713': string;
              '714': string;
              '715': string;
              '716': string;
              '717': string;
              '718': string;
              '719': string;
              '720': string;
              '721': string;
              '722': string;
              '723': string;
              '724': string;
              '725': string;
              '726': string;
              '727': string;
              '728': string;
              '729': string;
              '730': string;
              '731': string;
              '732': string;
              '733': string;
              '734': string;
              '735': string;
              '736': string;
              '737': string;
              '738': string;
              '739': string;
              '740': string;
              '741': string;
              '742': string;
              '743': string;
              '744': string;
              '745': string;
              '746': string;
              '747': string;
              '748': string;
              '749': string;
              '750': string;
              '751': string;
              '752': string;
              '753': string;
              '754': string;
              '755': string;
              '756': string;
              '757': string;
              '758': string;
              '759': string;
              '760': string;
              '761': string;
              '762': string;
              '763': string;
              '764': string;
              '765': string;
              '766': string;
              '767': string;
              '768': string;
              '769': string;
              '770': string;
              '771': string;
              '772': string;
              '773': string;
              '774': string;
              '775': string;
              '776': string;
              '777': string;
              '778': string;
              '779': string;
              '780': string;
              '781': string;
              '782': string;
              '783': string;
              '784': string;
              '785': string;
              '786': string;
              '787': string;
              '788': string;
              '789': string;
              '790': string;
              '791': string;
              '792': string;
              '793': string;
              '794': string;
              '795': string;
              '796': string;
              '797': string;
              '798': string;
              '799': string;
              '800': string;
              '801': string;
              '802': string;
              '803': string;
              '804': string;
              '805': string;
              '806': string;
              '807': string;
              '808': string;
              '809': string;
              '810': string;
              '811': string;
              '812': string;
              '813': string;
              '814': string;
              '815': string;
              '816': string;
              '817': string;
              '818': string;
              '819': string;
              '820': string;
              '821': string;
              '822': string;
              '823': string;
              '824': string;
              '825': string;
              '826': string;
              '827': string;
              '828': string;
              '829': string;
              '830': string;
              '831': string;
              '832': string;
              '833': string;
              '834': string;
              '835': string;
              '836': string;
              '837': string;
              '838': string;
              '839': string;
              '840': string;
              '841': string;
              '842': string;
              '843': string;
              '844': string;
              '845': string;
              '846': string;
              '847': string;
              '848': string;
              '849': string;
              '850': string;
              '851': string;
              '852': string;
              '853': string;
              '854': string;
              '855': string;
              '856': string;
              '857': string;
              '858': string;
              '859': string;
              '860': string;
              '861': string;
              '862': string;
              '863': string;
              '864': string;
              '865': string;
              '866': string;
              '867': string;
              '868': string;
              '869': string;
              '870': string;
              '871': string;
              '872': string;
              '873': string;
              '874': string;
              '875': string;
              '876': string;
              '877': string;
              '878': string;
              '879': string;
              '880': string;
              '881': string;
              '882': string;
              '883': string;
              '884': string;
              '885': string;
              '886': string;
              '887': string;
              '888': string;
              '889': string;
              '890': string;
              '891': string;
              '892': string;
              '893': string;
              '894': string;
              '895': string;
              '896': string;
              '897': string;
              '898': string;
              '899': string;
              '900': string;
              '901': string;
              '902': string;
              '903': string;
              '904': string;
              '905': string;
              '906': string;
              '907': string;
              '908': string;
              '909': string;
              '910': string;
              '911': string;
              '912': string;
              '913': string;
              '914': string;
              '915': string;
              '916': string;
              '917': string;
              '918': string;
              '919': string;
              '920': string;
              '921': string;
              '922': string;
              '923': string;
              '924': string;
              '925': string;
              '926': string;
              '927': string;
              '928': string;
              '929': string;
              '930': string;
              '931': string;
              '932': string;
              '933': string;
              '934': string;
              '935': string;
              '936': string;
              '937': string;
              '938': string;
              '939': string;
              '940': string;
              '941': string;
              '942': string;
              '943': string;
              '944': string;
              '945': string;
              '946': string;
              '947': string;
              '948': string;
              '949': string;
              '950': string;
              '951': string;
              '952': string;
              '953': string;
              '954': string;
              '955': string;
              '956': string;
              '957': string;
              '958': string;
              '959': string;
              '960': string;
              '961': string;
              '962': string;
              '963': string;
              '964': string;
              '965': string;
              '966': string;
              '967': string;
              '968': string;
              '969': string;
              '970': string;
              '971': string;
              '972': string;
              '973': string;
              '974': string;
              '975': string;
              '976': string;
              '977': string;
              '978': string;
              '979': string;
              '980': string;
              '981': string;
              '982': string;
              '983': string;
              '984': string;
              '985': string;
              '986': string;
              '987': string;
              '988': string;
              '989': string;
              '990': string;
              '991': string;
              '992': string;
              '993': string;
              '994': string;
              '995': string;
              '996': string;
              '997': string;
              '998': string;
              '999': string;
              '1000': string;
              '1001': string;
              '1002': string;
              '1003': string;
              '1004': string;
              '1005': string;
              '1006': string;
              '1007': string;
              '1008': string;
              '1009': string;
              '1010': string;
              '1011': string;
              '1012': string;
              '1013': string;
              '1014': string;
              '1015': string;
              '1016': string;
              '1017': string;
              '1018': string;
              '1019': string;
              '1020': string;
              '1021': string;
              '1022': string;
              '1023': string;
              '1024': string;
              '1025': string;
              '1026': string;
              '1027': string;
              '1028': string;
              '1029': string;
              '1030': string;
              '1031': string;
              '1032': string;
              '1033': string;
              '1034': string;
              '1035': string;
              '1036': string;
              '1037': string;
              '1038': string;
              '1039': string;
              '1040': string;
              '1041': string;
              '1042': string;
              '1043': string;
              '1044': string;
              '1045': string;
              '1046': string;
              '1047': string;
              '1048': string;
              '1049': string;
              '1050': string;
              '1051': string;
              '1052': string;
              '1053': string;
              '1054': string;
              '1055': string;
              '1056': string;
              '1057': string;
              '1058': string;
              '1059': string;
              '1060': string;
              '1061': string;
              '1062': string;
              '1063': string;
              '1064': string;
              '1065': string;
              '1066': string;
              '1067': string;
              '1068': string;
              '1069': string;
              '1070': string;
              '1071': string;
              '1072': string;
              '1073': string;
              '1074': string;
              '1075': string;
              '1076': string;
              '1077': string;
              '1078': string;
              '1079': string;
              '1080': string;
              '1081': string;
              '1082': string;
              '1083': string;
              '1084': string;
              '1085': string;
              '1086': string;
              '1087': string;
              '1088': string;
              '1089': string;
              '1090': string;
              '1091': string;
              '1092': string;
              '1093': string;
              '1094': string;
              '1095': string;
              '1096': string;
              '1097': string;
              '1098': string;
              '1099': string;
              '1100': string;
              '1101': string;
              '1102': string;
              '1103': string;
              '1104': string;
              '1105': string;
              '1106': string;
              '1107': string;
              '1108': string;
              '1109': string;
              '1110': string;
              '1111': string;
              '1112': string;
              '1113': string;
              '1114': string;
              '1115': string;
              '1116': string;
              '1117': string;
              '1118': string;
              '1119': string;
              '1120': string;
              '1121': string;
              '1122': string;
              '1123': string;
              '1124': string;
              '1125': string;
              '1126': string;
              '1127': string;
              '1128': string;
              '1129': string;
              '1130': string;
              '1131': string;
              '1132': string;
              '1133': string;
              '1134': string;
              '1135': string;
              '1136': string;
              '1137': string;
              '1138': string;
              '1139': string;
              '1140': string;
              '1141': string;
              '1142': string;
              '1143': string;
              '1144': string;
              '1145': string;
              '1146': string;
              '1147': string;
              '1148': string;
              '1149': string;
              '1150': string;
              '1151': string;
              '1152': string;
              '1153': string;
              '1154': string;
              '1155': string;
              '1156': string;
              '1157': string;
              '1158': string;
              '1159': string;
              '1160': string;
              '1161': string;
              '1162': string;
              '1163': string;
              '1164': string;
              '1165': string;
              '1166': string;
              '1167': string;
              '1168': string;
              '1169': string;
              '1170': string;
              '1171': string;
              '1172': string;
              '1173': string;
              '1174': string;
              '1175': string;
              '1176': string;
              '1177': string;
              '1178': string;
              '1179': string;
              '1180': string;
              '1181': string;
              '1182': string;
              '1183': string;
              '1184': string;
              '1185': string;
              '1186': string;
              '1187': string;
              '1188': string;
              '1189': string;
              '1190': string;
              '1191': string;
              '1192': string;
              '1193': string;
              '1194': string;
              '1195': string;
              '1196': string;
              '1197': string;
              '1198': string;
              '1199': string;
              '1200': string;
              '1201': string;
              '1202': string;
              '1203': string;
              '1204': string;
              '1205': string;
              '1206': string;
              '1207': string;
              '1208': string;
              '1209': string;
              '1210': string;
              '1211': string;
              '1212': string;
              '1213': string;
              '1214': string;
              '1215': string;
              '1216': string;
              '1217': string;
              '1218': string;
              '1219': string;
              '1220': string;
              '1221': string;
              '1222': string;
              '1223': string;
              '1224': string;
              '1225': string;
              '1226': string;
              '1227': string;
              '1228': string;
              '1229': string;
              '1230': string;
              '1231': string;
              '1232': string;
              '1233': string;
              '1234': string;
              '1235': string;
              '1236': string;
              '1237': string;
              '1238': string;
              '1239': string;
              '1240': string;
              '1241': string;
              '1242': string;
              '1243': string;
              '1244': string;
              '1245': string;
              '1246': string;
              '1247': string;
              '1248': string;
              '1249': string;
              '1250': string;
              '1251': string;
              '1252': string;
              '1253': string;
              '1254': string;
              '1255': string;
              '1256': string;
              '1257': string;
              '1258': string;
              '1259': string;
              '1260': string;
              '1261': string;
              '1262': string;
              '1263': string;
              '1264': string;
              '1265': string;
              '1266': string;
              '1267': string;
              '1268': string;
              '1269': string;
              '1270': string;
              '1271': string;
              '1272': string;
              '1273': string;
              '1274': string;
              '1275': string;
              '1276': string;
              '1277': string;
              '1278': string;
              '1279': string;
              '1280': string;
              '1281': string;
              '1282': string;
              '1283': string;
              '1284': string;
              '1285': string;
              '1286': string;
              '1287': string;
              '1288': string;
              '1289': string;
              '1290': string;
              '1291': string;
              '1292': string;
              '1293': string;
              '1294': string;
              '1295': string;
              '1296': string;
              '1297': string;
              '1298': string;
              '1299': string;
              '1300': string;
              '1301': string;
              '1302': string;
              '1303': string;
              '1304': string;
              '1305': string;
              '1306': string;
              '1307': string;
              '1308': string;
              '1309': string;
              '1310': string;
              '1311': string;
              '1312': string;
              '1313': string;
              '1314': string;
              '1315': string;
              '1316': string;
              '1317': string;
              '1318': string;
              '1319': string;
              '1320': string;
              '1321': string;
              '1322': string;
              '1323': string;
              '1324': string;
              '1325': string;
              '1326': string;
              '1327': string;
              '1328': string;
              '1329': string;
              '1330': string;
              '1331': string;
              '1332': string;
              '1333': string;
              '1334': string;
              '1335': string;
              '1336': string;
              '1337': string;
              '1338': string;
              '1339': string;
              '1340': string;
              '1341': string;
              '1342': string;
              '1343': string;
              '1344': string;
              '1345': string;
              '1346': string;
              '1347': string;
              '1348': string;
              '1349': string;
              '1350': string;
              '1351': string;
              '1352': string;
              '1353': string;
              '1354': string;
              '1355': string;
              '1356': string;
              '1357': string;
              '1358': string;
              '1359': string;
              '1360': string;
              '1361': string;
              '1362': string;
              '1363': string;
              '1364': string;
              '1365': string;
              '1366': string;
              '1367': string;
              '1368': string;
              '1369': string;
              '1370': string;
              '1371': string;
              '1372': string;
              '1373': string;
              '1374': string;
              '1375': string;
              '1376': string;
              '1377': string;
              '1378': string;
              '1379': string;
              '1380': string;
              '1381': string;
              '1382': string;
              '1383': string;
              '1384': string;
              '1385': string;
              '1386': string;
              '1387': string;
              '1388': string;
              '1389': string;
              '1390': string;
              '1391': string;
              '1392': string;
              '1393': string;
              '1394': string;
              '1395': string;
              '1396': string;
              '1397': string;
              '1398': string;
              '1399': string;
              '1400': string;
              '1401': string;
              '1402': string;
              '1403': string;
              '1404': string;
              '1405': string;
              '1406': string;
              '1407': string;
              '1408': string;
              '1409': string;
              '1410': string;
              '1411': string;
              '1412': string;
              '1413': string;
              '1414': string;
              '1415': string;
              '1416': string;
              '1417': string;
              '1418': string;
              '1419': string;
              '1420': string;
              '1421': string;
              '1422': string;
              '1423': string;
              '1424': string;
              '1425': string;
              '1426': string;
              '1427': string;
              '1428': string;
              '1429': string;
              '1430': string;
              '1431': string;
              '1432': string;
              '1433': string;
              '1434': string;
              '1435': string;
              '1436': string;
              '1437': string;
              '1438': string;
              '1439': string;
              '1440': string;
              '1441': string;
              '1442': string;
              '1443': string;
              '1444': string;
              '1445': string;
              '1446': string;
              '1447': string;
              '1448': string;
              '1449': string;
              '1450': string;
              '1451': string;
              '1452': string;
              '1453': string;
              '1454': string;
              '1455': string;
              '1456': string;
              '1457': string;
              '1458': string;
              '1459': string;
              '1460': string;
              '1461': string;
              '1462': string;
              '1463': string;
              '1464': string;
              '1465': string;
              '1466': string;
              '1467': string;
              '1468': string;
              '1469': string;
              '1470': string;
              '1471': string;
              '1472': string;
              '1473': string;
              '1474': string;
              '1475': string;
              '1476': string;
              '1477': string;
              '1478': string;
              '1479': string;
              '1480': string;
              '1481': string;
              '1482': string;
              '1483': string;
              '1484': string;
              '1485': string;
              '1486': string;
              '1487': string;
              '1488': string;
              '1489': string;
              '1490': string;
              '1491': string;
              '1492': string;
              '1493': string;
              '1494': string;
              '1495': string;
              '1496': string;
              '1497': string;
              '1498': string;
              '1499': string;
              '1500': string;
              '1501': string;
              '1502': string;
              '1503': string;
              '1504': string;
              '1505': string;
              '1506': string;
              '1507': string;
              '1508': string;
              '1509': string;
              '1510': string;
              '1511': string;
              '1512': string;
              '1513': string;
              '1514': string;
              '1515': string;
              '1516': string;
              '1517': string;
              '1518': string;
              '1519': string;
              '1520': string;
              '1521': string;
              '1522': string;
              '1523': string;
              '1524': string;
              '1525': string;
              '1526': string;
              '1527': string;
              '1528': string;
              '1529': string;
              '1530': string;
              '1531': string;
              '1532': string;
              '1533': string;
              '1534': string;
              '1535': string;
              '1536': string;
              '1537': string;
              '1538': string;
              '1539': string;
              '1540': string;
              '1541': string;
              '1542': string;
              '1543': string;
              '1544': string;
              '1545': string;
              '1546': string;
              '1547': string;
              '1548': string;
              '1549': string;
              '1550': string;
              '1551': string;
              '1552': string;
              '1553': string;
              '1554': string;
              '1555': string;
              '1556': string;
              '1557': string;
              '1558': string;
              '1559': string;
              '1560': string;
              '1561': string;
              '1562': string;
              '1563': string;
              '1564': string;
              '1565': string;
              '1566': string;
              '1567': string;
              '1568': string;
              '1569': string;
              '1570': string;
              '1571': string;
              '1572': string;
              '1573': string;
              '1574': string;
              '1575': string;
              '1576': string;
              '1577': string;
              '1578': string;
              '1579': string;
              '1580': string;
              '1581': string;
              '1582': string;
              '1583': string;
              '1584': string;
              '1585': string;
              '1586': string;
              '1587': string;
              '1588': string;
              '1589': string;
              '1590': string;
              '1591': string;
              '1592': string;
              '1593': string;
              '1594': string;
              '1595': string;
              '1596': string;
              '1597': string;
              '1598': string;
              '1599': string;
              '1600': string;
              '1601': string;
              '1602': string;
              '1603': string;
              '1604': string;
              '1605': string;
              '1606': string;
              '1607': string;
              '1608': string;
              '1609': string;
              '1610': string;
              '1611': string;
              '1612': string;
              '1613': string;
              '1614': string;
              '1615': string;
              '1616': string;
              '1617': string;
              '1618': string;
              '1619': string;
              '1620': string;
              '1621': string;
              '1622': string;
              '1623': string;
              '1624': string;
              '1625': string;
              '1626': string;
              '1627': string;
              '1628': string;
              '1629': string;
              '1630': string;
              '1631': string;
              '1632': string;
              '1633': string;
              '1634': string;
              '1635': string;
              '1636': string;
              '1637': string;
              '1638': string;
              '1639': string;
              '1640': string;
              '1641': string;
              '1642': string;
              '1643': string;
              '1644': string;
              '1645': string;
              '1646': string;
              '1647': string;
              '1648': string;
              '1649': string;
              '1650': string;
              '1651': string;
              '1652': string;
              '1653': string;
              '1654': string;
              '1655': string;
              '1656': string;
              '1657': string;
              '1658': string;
              '1659': string;
              '1660': string;
              '1661': string;
              '1662': string;
              '1663': string;
              '1664': string;
              '1665': string;
              '1666': string;
              '1667': string;
              '1668': string;
              '1669': string;
              '1670': string;
              '1671': string;
              '1672': string;
              '1673': string;
              '1674': string;
              '1675'?: string;
              '1676'?: string;
              '1677'?: string;
              '1678'?: string;
              '1679'?: string;
              '1680'?: string;
              '1681'?: string;
              '1682'?: string;
              '1683'?: string;
              '1684'?: string;
              '1685'?: string;
              '1686'?: string;
              '1687'?: string;
              '1688'?: string;
              '1689'?: string;
              '1690'?: string;
              '1691'?: string;
              '1692'?: string;
              '1693'?: string;
              '1694'?: string;
              '1695'?: string;
              '1696'?: string;
              '1697'?: string;
              '1698'?: string;
              '1699'?: string;
              '1700'?: string;
              '1701'?: string;
              '1702'?: string;
              '1703'?: string;
              '1704'?: string;
              '1705'?: string;
              '1706'?: string;
              '1707'?: string;
              '1708'?: string;
              '1709'?: string;
              '1710'?: string;
              '1711'?: string;
              '1712'?: string;
              '1713'?: string;
              '1714'?: string;
              '1715'?: string;
              '1716'?: string;
              '1717'?: string;
              '1718'?: string;
              '1719'?: string;
              '1720'?: string;
              '1721'?: string;
              '1722'?: string;
              '1723'?: string;
              '1724'?: string;
              '1725'?: string;
              '1726'?: string;
              '1727'?: string;
              '1728'?: string;
              '1729'?: string;
              '1730'?: string;
              '1731'?: string;
              '1732'?: string;
              '1733'?: string;
              '1734'?: string;
              '1735'?: string;
              '1736'?: string;
              '1737'?: string;
              '1738'?: string;
              '1739'?: string;
              '1740'?: string;
              '1741'?: string;
              '1742'?: string;
              '1743'?: string;
              '1744'?: string;
              '1745'?: string;
              '1746'?: string;
              '1747'?: string;
              '1748'?: string;
              '1749'?: string;
              '1750'?: string;
              '1751'?: string;
              '1752'?: string;
              '1753'?: string;
              '1754'?: string;
              '1755'?: string;
              '1756'?: string;
              '1757'?: string;
              '1758'?: string;
              '1759'?: string;
              '1760'?: string;
              '1761'?: string;
              '1762'?: string;
              '1763'?: string;
              '1764'?: string;
              '1765'?: string;
              '1766'?: string;
              '1767'?: string;
              '1768'?: string;
              '1769'?: string;
              '1770'?: string;
              '1771'?: string;
              '1772'?: string;
              '1773'?: string;
              '1774'?: string;
              '1775'?: string;
              '1776'?: string;
              '1777'?: string;
              '1778'?: string;
              '1779'?: string;
              '1780'?: string;
              '1781'?: string;
              '1782'?: string;
              '1783'?: string;
              '1784'?: string;
              '1785'?: string;
              '1786'?: string;
              '1787'?: string;
              '1788'?: string;
              '1789'?: string;
              '1790'?: string;
              '1791'?: string;
              '1792'?: string;
              '1793'?: string;
              '1794'?: string;
              '1795'?: string;
              '1796'?: string;
              '1797'?: string;
              '1798'?: string;
              '1799'?: string;
              '1800'?: string;
              '1801'?: string;
              '1802'?: string;
              '1803'?: string;
              '1804'?: string;
              '1805'?: string;
              '1806'?: string;
              '1807'?: string;
              '1808'?: string;
              '1809'?: string;
              '1810'?: string;
              '1811'?: string;
              '1812'?: string;
              '1813'?: string;
              '1814'?: string;
              '1815'?: string;
              '1816'?: string;
              '1817'?: string;
              '1818'?: string;
              '1819'?: string;
              '1820'?: string;
              '1821'?: string;
              '1822'?: string;
              '1823'?: string;
              '1824'?: string;
              '1825'?: string;
              '1826'?: string;
              '1827'?: string;
              '1828'?: string;
              '1829'?: string;
              '1830'?: string;
              '1831'?: string;
              '1832'?: string;
              '1833'?: string;
              '1834'?: string;
              '1835'?: string;
              '1836'?: string;
              '1837'?: string;
              '1838'?: string;
              '1839'?: string;
              '1840'?: string;
              '1841'?: string;
              '1842'?: string;
              '1843'?: string;
              '1844'?: string;
              '1845'?: string;
              '1846'?: string;
              '1847'?: string;
              '1848'?: string;
              '1849'?: string;
              '1850'?: string;
              '1851'?: string;
              '1852'?: string;
              '1853'?: string;
              '1854'?: string;
              '1855'?: string;
              '1856'?: string;
              '1857'?: string;
              '1858'?: string;
              '1859'?: string;
              '1860'?: string;
              '1861'?: string;
              '1862'?: string;
              '1863'?: string;
              '1864'?: string;
              '1865'?: string;
              '1866'?: string;
              '1867'?: string;
              '1868'?: string;
              '1869'?: string;
              '1870'?: string;
              '1871'?: string;
              '1872'?: string;
              '1873'?: string;
              '1874'?: string;
              '1875'?: string;
              '1876'?: string;
              '1877'?: string;
              '1878'?: string;
              '1879'?: string;
              '1880'?: string;
              '1881'?: string;
              '1882'?: string;
              '1883'?: string;
              '1884'?: string;
              '1885'?: string;
              '1886'?: string;
              '1887'?: string;
              '1888'?: string;
              '1889'?: string;
              '1890'?: string;
              '1891'?: string;
              '1892'?: string;
              '1893'?: string;
              '1894'?: string;
              '1895'?: string;
              '1896'?: string;
              '1897'?: string;
              '1898'?: string;
              '1899'?: string;
              '1900'?: string;
              '1901'?: string;
              '1902'?: string;
              '1903'?: string;
              '1904'?: string;
              '1905'?: string;
              '1906'?: string;
              '1907'?: string;
              '1908'?: string;
              '1909'?: string;
              '1910'?: string;
              '1911'?: string;
              '1912'?: string;
              '1913'?: string;
              '1914'?: string;
              '1915'?: string;
              '1916'?: string;
              '1917'?: string;
              '1918'?: string;
              '1919'?: string;
              '1920'?: string;
              '1921'?: string;
              '1922'?: string;
              '1923'?: string;
              '1924'?: string;
              '1925'?: string;
              '1926'?: string;
              '1927'?: string;
              '1928'?: string;
              '1929'?: string;
              '1930'?: string;
              '1931'?: string;
              '1932'?: string;
              '1933'?: string;
              '1934'?: string;
              '1935'?: string;
              '1936'?: string;
              '1937'?: string;
              '1938'?: string;
              '1939'?: string;
              '1940'?: string;
              '1941'?: string;
              '1942'?: string;
              '1943'?: string;
              '1944'?: string;
              '1945'?: string;
              '1946'?: string;
              '1947'?: string;
              '1948'?: string;
              '1949'?: string;
              '1950'?: string;
              '1951'?: string;
              '1952'?: string;
              '1953'?: string;
              '1954'?: string;
              '1955'?: string;
              '1956'?: string;
              '1957'?: string;
              '1958'?: string;
              '1959'?: string;
              '1960'?: string;
              '1961'?: string;
              '1962'?: string;
              '1963'?: string;
              '1964'?: string;
              '1965'?: string;
              '1966'?: string;
              '1967'?: string;
              '1968'?: string;
              '1969'?: string;
              '1970'?: string;
              '1971'?: string;
              '1972'?: string;
              '1973'?: string;
              '1974'?: string;
              '1975'?: string;
              '1976'?: string;
              '1977'?: string;
              '1978'?: string;
              '1979'?: string;
              '1980'?: string;
              '1981'?: string;
              '1982'?: string;
              '1983'?: string;
              '1984'?: string;
              '1985'?: string;
              '1986'?: string;
              '1987'?: string;
              '1988'?: string;
              '1989'?: string;
              '1990'?: string;
              '1991'?: string;
              '1992'?: string;
              '1993'?: string;
              '1994'?: string;
              '1995'?: string;
              '1996'?: string;
              '1997'?: string;
              '1998'?: string;
              '1999'?: string;
              '2000'?: string;
              '2001'?: string;
              '2002'?: string;
              '2003'?: string;
              '2004'?: string;
              '2005'?: string;
              '2006'?: string;
              '2007'?: string;
              '2008'?: string;
              '2009'?: string;
              '2010'?: string;
              '2011'?: string;
              '2012'?: string;
              '2013'?: string;
              '2014'?: string;
              '2015'?: string;
              '2016'?: string;
              '2017'?: string;
              '2018'?: string;
              '2019'?: string;
              '2020'?: string;
              '2021'?: string;
              '2022'?: string;
              '2023'?: string;
              '2024'?: string;
              '2025'?: string;
              '2026'?: string;
              '2027'?: string;
              '2028'?: string;
              '2029'?: string;
              '2030'?: string;
              '2031'?: string;
              '2032'?: string;
              '2033'?: string;
              '2034'?: string;
              '2035'?: string;
              '2036'?: string;
              '2037'?: string;
              '2038'?: string;
              '2039'?: string;
              '2040'?: string;
              '2041'?: string;
              '2042'?: string;
              '2043'?: string;
              '2044'?: string;
              '2045'?: string;
              '2046'?: string;
              '2047'?: string;
              '2048'?: string;
              '2049'?: string;
              '2050'?: string;
              '2051'?: string;
              '2052'?: string;
              '2053'?: string;
              '2054'?: string;
              '2055'?: string;
              '2056'?: string;
              '2057'?: string;
              '2058'?: string;
              '2059'?: string;
              '2060'?: string;
              '2061'?: string;
              '2062'?: string;
              '2063'?: string;
              '2064'?: string;
              '2065'?: string;
              '2066'?: string;
              '2067'?: string;
              '2068'?: string;
              '2069'?: string;
              '2070'?: string;
              '2071'?: string;
              '2072'?: string;
              '2073'?: string;
              '2074'?: string;
              '2075'?: string;
              '2076'?: string;
              '2077'?: string;
              '2078'?: string;
              '2079'?: string;
              '2080'?: string;
              '2081'?: string;
              '2082'?: string;
              '2083'?: string;
              '2084'?: string;
              '2085'?: string;
              '2086'?: string;
              '2087'?: string;
              '2088'?: string;
              '2089'?: string;
              '2090'?: string;
              '2091'?: string;
              '2092'?: string;
              '2093'?: string;
              '2094'?: string;
              '2095'?: string;
              '2096'?: string;
              '2097'?: string;
              '2098'?: string;
              '2099'?: string;
              '2100'?: string;
              '2101'?: string;
              '2102'?: string;
              '2103'?: string;
              '2104'?: string;
              '2105'?: string;
              '2106'?: {
              
              };
              '2107'?: {
              
              };
              '2108'?: {
              
              };
              '2109'?: {
              
              };
              '2110'?: {
              
              };
              '2111'?: {
              
              };
              '2112'?: {
              
              };
              '2113'?: {
              
              };
              '2114'?: {
              
              };
              '2115'?: {
              
              };
              '2116'?: {
              
              };
              '2117'?: {
              
              };
              '2118'?: {
              
              };
              '2119'?: {
              
              };
              '2120'?: {
              
              };
              '2121'?: {
              
              };
              '2122'?: {
              
              };
              '2123'?: {
              
              };
              '2124'?: {
              
              };
              '2125'?: {
              
              };
              '2126'?: {
              
              };
              '2127'?: {
              
              };
              '2128'?: {
              
              };
              '2129'?: {
              
              };
              '2130'?: {
              
              };
              '2131'?: {
              
              };
              '2132'?: {
              
              };
              '2133'?: {
              
              };
              '2134'?: {
              
              };
              '2135'?: {
              
              };
              '2136'?: {
              
              };
              '2137'?: {
              
              };
              '2138'?: {
              
              };
              '2139'?: {
              
              };
              '2140'?: {
              
              };
              '2141'?: {
              
              };
              '2142'?: {
              
              };
              '2143'?: {
              
              };
              '2144'?: {
              
              };
              '2145'?: {
              
              };
              '2146'?: {
              
              };
              '2147'?: {
              
              };
              '2148'?: {
              
              };
              '2149'?: {
              
              };
              '2150'?: {
              
              };
              '2151'?: {
              
              };
              '2152'?: {
              
              };
              '2153'?: {
              
              };
              '2154'?: {
              
              };
              '2155'?: {
              
              };
              '2156'?: {
              
              };
              '2157'?: {
              
              };
              '2158'?: {
              
              };
              '2159'?: {
              
              };
              '2160'?: {
              
              };
              '2161'?: {
              
              };
              '2162'?: {
              
              };
              '2163'?: {
              
              };
              '2164'?: {
              
              };
              '2165'?: {
              
              };
              '2166'?: {
              
              };
              '2167'?: {
              
              };
              '2168'?: {
              
              };
              '2169'?: {
              
              };
              '2170'?: {
              
              };
              '2171'?: {
              
              };
              '2172'?: {
              
              };
              '2173'?: {
              
              };
              '2174'?: {
              
              };
              '2175'?: {
              
              };
              '2176'?: {
              
              };
              '2177'?: {
              
              };
              '2178'?: {
              
              };
              '2179'?: {
              
              };
              '2180'?: {
              
              };
              '2181'?: {
              
              };
              '2182'?: {
              
              };
              '2183'?: {
              
              };
              '2184'?: {
              
              };
              '2185'?: {
              
              };
              '2186'?: {
              
              };
              '2187'?: {
              
              };
              '2188'?: {
              
              };
              '2189'?: {
              
              };
              '2190'?: {
              
              };
              '2191'?: {
              
              };
              '2192'?: {
              
              };
              '2193'?: {
              
              };
              '2194'?: {
              
              };
              '2195'?: {
              
              };
              '2196'?: {
              
              };
              '2197'?: {
              
              };
              '2198'?: {
              
              };
              '2199'?: {
              
              };
              '2200'?: {
              
              };
              '2201'?: {
              
              };
              '2202'?: {
              
              };
              '2203'?: {
              
              };
              '2204'?: {
              
              };
              '2205'?: {
              
              };
              '2206'?: {
              
              };
              '2207'?: {
              
              };
              '2208'?: {
              
              };
              '2209'?: {
              
              };
              '2210'?: {
              
              };
              '2211'?: {
              
              };
              '2212'?: {
              
              };
              '2213'?: {
              
              };
              '2214'?: {
              
              };
              '2215'?: {
              
              };
              '2216'?: {
              
              };
              '2217'?: {
              
              };
              '2218'?: {
              
              };
              '2219'?: {
              
              };
              '2220'?: {
              
              };
              '2221'?: {
              
              };
              '2222'?: {
              
              };
              '2223'?: {
              
              };
              '2224'?: {
              
              };
              '2225'?: {
              
              };
              '2226'?: {
              
              };
              '2227'?: {
              
              };
              '2228'?: {
              
              };
              '2229'?: {
              
              };
              '2230'?: {
              
              };
              '2231'?: {
              
              };
              '2232'?: {
              
              };
              '2233'?: {
              
              };
              '2234'?: {
              
              };
              '2235'?: {
              
              };
              '2236'?: {
              
              };
              '2237'?: {
              
              };
              '2238'?: {
              
              };
              '2239'?: {
              
              };
              '2240'?: {
              
              };
              '2241'?: {
              
              };
              '2242'?: {
              
              };
              '2243'?: {
              
              };
              '2244'?: {
              
              };
              '2245'?: {
              
              };
              '2246'?: {
              
              };
              '2247'?: {
              
              };
              '2248'?: {
              
              };
              '2249'?: {
              
              };
              '2250'?: {
              
              };
              '2251'?: {
              
              };
              '2252'?: {
              
              };
              '2253'?: {
              
              };
              '2254'?: {
              
              };
              '2255'?: {
              
              };
              '2256'?: {
              
              };
              '2257'?: {
              
              };
              '2258'?: {
              
              };
              '2259'?: {
              
              };
              '2260'?: {
              
              };
              '2261'?: {
              
              };
              '2262'?: {
              
              };
              '2263'?: {
              
              };
              '2264'?: {
              
              };
              '2265'?: {
              
              };
              '2266'?: {
              
              };
              '2267'?: {
              
              };
              '2268'?: {
              
              };
              '2269'?: {
              
              };
              '2270'?: {
              
              };
              '2271'?: {
              
              };
              '2272'?: {
              
              };
              '2273'?: {
              
              };
              '2274'?: {
              
              };
              '2275'?: {
              
              };
              '2276'?: {
              
              };
              '2277'?: {
              
              };
              '2278'?: {
              
              };
              '2279'?: {
              
              };
              '2280'?: {
              
              };
              '2281'?: {
              
              };
              '2282'?: {
              
              };
              '2283'?: {
              
              };
              '2284'?: {
              
              };
              '2285'?: {
              
              };
              '2286'?: {
              
              };
              '2287'?: {
              
              };
              '2288'?: {
              
              };
              '2289'?: {
              
              };
              '2290'?: {
              
              };
              '2291'?: {
              
              };
              '2292'?: {
              
              };
              '2293'?: {
              
              };
              '2294'?: {
              
              };
              '2295'?: {
              
              };
              '2296'?: {
              
              };
              '2297'?: {
              
              };
              '2298'?: {
              
              };
              '2299'?: {
              
              };
              '2300'?: {
              
              };
              '2301'?: {
              
              };
              '2302'?: {
              
              };
              '2303'?: {
              
              };
              '2304'?: {
              
              };
              '2305'?: {
              
              };
              '2306'?: {
              
              };
              '2307'?: {
              
              };
              '2308'?: {
              
              };
              '2309'?: {
              
              };
              '2310'?: {
              
              };
              '2311'?: {
              
              };
              '2312'?: {
              
              };
              '2313'?: {
              
              };
              '2314'?: {
              
              };
              '2315'?: {
              
              };
              '2316'?: {
              
              };
              '2317'?: {
              
              };
              '2318'?: {
              
              };
              '2319'?: {
              
              };
              '2320'?: {
              
              };
              '2321'?: {
              
              };
              '2322'?: {
              
              };
              '2323'?: {
              
              };
              '2324'?: {
              
              };
              '2325'?: {
              
              };
              '2326'?: {
              
              };
              '2327'?: {
              
              };
              '2328'?: {
              
              };
              '2329'?: {
              
              };
              '2330'?: {
              
              };
              '2331'?: {
              
              };
              '2332'?: {
              
              };
              '2333'?: {
              
              };
              '2334'?: {
              
              };
              '2335'?: {
              
              };
              '2336'?: {
              
              };
              '2337'?: {
              
              };
              '2338'?: {
              
              };
              '2339'?: {
              
              };
              '2340'?: {
              
              };
              '2341'?: {
              
              };
              '2342'?: {
              
              };
              '2343'?: {
              
              };
              '2344'?: {
              
              };
              '2345'?: {
              
              };
              '2346'?: {
              
              };
              '2347'?: {
              
              };
              '2348'?: {
              
              };
              '2349'?: {
              
              };
              '2350'?: {
              
              };
              '2351'?: {
              
              };
              '2352'?: {
              
              };
              '2353'?: {
              
              };
              '2354'?: {
              
              };
              '2355'?: {
              
              };
              '2356'?: {
              
              };
              '2357'?: {
              
              };
              '2358'?: {
              
              };
              '2359'?: {
              
              };
              '2360'?: {
              
              };
              '2361'?: {
              
              };
              '2362'?: {
              
              };
              '2363'?: {
              
              };
              '2364'?: {
              
              };
              '2365'?: {
              
              };
              '2366'?: {
              
              };
              '2367'?: {
              
              };
              '2368'?: {
              
              };
              '2369'?: {
              
              };
              '2370'?: {
              
              };
              '2371'?: {
              
              };
              '2372'?: {
              
              };
              '2373'?: {
              
              };
              '2374'?: {
              
              };
              '2375'?: {
              
              };
              '2376'?: {
              
              };
              '2377'?: {
              
              };
              '2378'?: {
              
              };
              '2379'?: {
              
              };
              '2380'?: {
              
              };
              '2381'?: {
              
              };
              '2382'?: {
              
              };
              '2383'?: {
              
              };
              '2384'?: {
              
              };
              '2385'?: {
              
              };
              '2386'?: {
              
              };
              '2387'?: {
              
              };
              '2388'?: {
              
              };
              '2389'?: {
              
              };
              '2390'?: {
              
              };
              '2391'?: {
              
              };
              '2392'?: {
              
              };
              '2393'?: {
              
              };
              '2394'?: {
              
              };
              '2395'?: {
              
              };
              '2396'?: {
              
              };
              '2397'?: {
              
              };
              '2398'?: {
              
              };
              '2399'?: {
              
              };
              '2400'?: {
              
              };
              '2401'?: {
              
              };
              '2402'?: {
              
              };
              '2403'?: {
              
              };
              '2404'?: {
              
              };
              '2405'?: {
              
              };
              '2406'?: {
              
              };
              '2407'?: {
              
              };
              '2408'?: {
              
              };
              '2409'?: {
              
              };
              '2410'?: {
              
              };
              '2411'?: {
              
              };
              '2412'?: {
              
              };
              '2413'?: {
              
              };
              '2414'?: {
              
              };
              '2415'?: {
              
              };
              '2416'?: {
              
              };
              '2417'?: {
              
              };
              '2418'?: {
              
              };
              '2419'?: {
              
              };
              '2420'?: {
              
              };
              '2421'?: {
              
              };
              '2422'?: {
              
              };
              '2423'?: {
              
              };
              '2424'?: {
              
              };
              '2425'?: {
              
              };
              '2426'?: {
              
              };
              '2427'?: {
              
              };
              '2428'?: {
              
              };
              '2429'?: {
              
              };
              '2430'?: {
              
              };
              '2431'?: {
              
              };
              '2432'?: {
              
              };
              '2433'?: {
              
              };
              '2434'?: {
              
              };
              '2435'?: {
              
              };
              '2436'?: {
              
              };
              '2437'?: {
              
              };
              '2438'?: {
              
              };
              '2439'?: {
              
              };
              '2440'?: {
              
              };
              '2441'?: {
              
              };
              '2442'?: {
              
              };
              '2443'?: {
              
              };
              '2444'?: {
              
              };
              '2445'?: {
              
              };
              '2446'?: {
              
              };
              '2447'?: {
              
              };
              '2448'?: {
              
              };
              '2449'?: {
              
              };
              '2450'?: {
              
              };
              '2451'?: {
              
              };
              '2452'?: {
              
              };
              '2453'?: {
              
              };
              '2454'?: {
              
              };
              '2455'?: {
              
              };
              '2456'?: {
              
              };
              '2457'?: {
              
              };
              '2458'?: {
              
              };
              '2459'?: {
              
              };
              '2460'?: {
              
              };
              '2461'?: {
              
              };
              '2462'?: {
              
              };
              '2463'?: {
              
              };
              '2464'?: {
              
              };
              '2465'?: {
              
              };
              '2466'?: {
              
              };
              '2467'?: {
              
              };
              '2468'?: {
              
              };
              '2469'?: {
              
              };
              '2470'?: {
              
              };
              '2471'?: {
              
              };
              '2472'?: {
              
              };
              '2473'?: {
              
              };
              '2474'?: {
              
              };
              '2475'?: {
              
              };
              '2476'?: {
              
              };
              '2477'?: {
              
              };
              '2478'?: {
              
              };
              '2479'?: {
              
              };
              '2480'?: {
              
              };
              '2481'?: {
              
              };
              '2482'?: {
              
              };
              '2483'?: {
              
              };
              '2484'?: {
              
              };
              '2485'?: {
              
              };
              '2486'?: {
              
              };
              '2487'?: {
              
              };
              '2488'?: {
              
              };
              '2489'?: {
              
              };
              '2490'?: {
              
              };
              '2491'?: {
              
              };
              '2492'?: {
              
              };
              '2493'?: {
              
              };
              '2494'?: {
              
              };
              '2495'?: {
              
              };
              '2496'?: {
              
              };
              '2497'?: {
              
              };
              '2498'?: {
              
              };
              '2499'?: {
              
              };
              '2500'?: {
              
              };
              '2501'?: {
              
              };
              '2502'?: {
              
              };
              '2503'?: {
              
              };
              '2504'?: {
              
              };
              '2505'?: {
              
              };
              '2506'?: {
              
              };
              '2507'?: {
              
              };
              '2508'?: {
              
              };
              '2509'?: {
              
              };
              '2510'?: {
              
              };
              '2511'?: {
              
              };
              '2512'?: {
              
              };
              '2513'?: {
              
              };
              '2514'?: {
              
              };
              '2515'?: {
              
              };
              '2516'?: {
              
              };
              '2517'?: {
              
              };
              '2518'?: {
              
              };
              '2519'?: {
              
              };
              '2520'?: {
              
              };
              '2521'?: {
              
              };
              '2522'?: {
              
              };
              '2523'?: {
              
              };
              '2524'?: {
              
              };
              '2525'?: {
              
              };
              '2526'?: {
              
              };
              '2527'?: {
              
              };
              '2528'?: {
              
              };
              '2529'?: {
              
              };
              '2530'?: {
              
              };
              '2531'?: {
              
              };
              '2532'?: {
              
              };
              '2533'?: {
              
              };
              '2534'?: {
              
              };
              '2535'?: {
              
              };
              '2536'?: {
              
              };
              '2537'?: {
              
              };
              '2538'?: {
              
              };
              '2539'?: {
              
              };
              '2540'?: {
              
              };
              '2541'?: {
              
              };
              '2542'?: {
              
              };
              '2543'?: {
              
              };
              '2544'?: {
              
              };
              '2545'?: {
              
              };
              '2546'?: {
              
              };
              '2547'?: {
              
              };
              '2548'?: {
              
              };
              '2549'?: {
              
              };
              '2550'?: {
              
              };
              '2551'?: {
              
              };
              '2552'?: {
              
              };
              '2553'?: {
              
              };
              '2554'?: {
              
              };
              '2555'?: {
              
              };
              '2556'?: {
              
              };
              '2557'?: {
              
              };
              '2558'?: {
              
              };
              '2559'?: {
              
              };
              '2560'?: {
              
              };
              '2561'?: {
              
              };
              '2562'?: {
              
              };
              '2563'?: {
              
              };
              '2564'?: {
              
              };
              '2565'?: {
              
              };
              '2566'?: {
              
              };
              '2567'?: {
              
              };
              '2568'?: {
              
              };
              '2569'?: {
              
              };
              '2570'?: {
              
              };
              '2571'?: {
              
              };
              '2572'?: {
              
              };
              '2573'?: {
              
              };
              '2574'?: {
              
              };
              '2575'?: {
              
              };
              '2576'?: {
              
              };
              '2577'?: {
              
              };
              '2578'?: {
              
              };
              '2579'?: {
              
              };
              '2580'?: {
              
              };
              '2581'?: {
              
              };
              '2582'?: {
              
              };
              '2583'?: {
              
              };
              '2584'?: {
              
              };
              '2585'?: {
              
              };
              '2586'?: {
              
              };
              '2587'?: {
              
              };
              '2588'?: {
              
              };
              '2589'?: {
              
              };
              '2590'?: {
              
              };
              '2591'?: {
              
              };
              '2592'?: {
              
              };
              '2593'?: {
              
              };
              '2594'?: {
              
              };
              '2595'?: {
              
              };
              '2596'?: {
              
              };
              '2597'?: {
              
              };
              '2598'?: {
              
              };
              '2599'?: {
              
              };
              '2600'?: {
              
              };
              '2601'?: {
              
              };
              '2602'?: {
              
              };
              '2603'?: {
              
              };
              '2604'?: {
              
              };
              '2605'?: {
              
              };
              '2606'?: {
              
              };
              '2607'?: {
              
              };
              '2608'?: {
              
              };
              '2609'?: {
              
              };
              '2610'?: {
              
              };
              '2611'?: {
              
              };
              '2612'?: {
              
              };
              '2613'?: {
              
              };
              '2614'?: {
              
              };
              '2615'?: {
              
              };
              '2616'?: {
              
              };
              '2617'?: {
              
              };
              '2618'?: {
              
              };
              '2619'?: {
              
              };
              '2620'?: {
              
              };
              '2621'?: {
              
              };
              '2622'?: {
              
              };
              '2623'?: {
              
              };
              '2624'?: {
              
              };
              '2625'?: {
              
              };
              '2626'?: {
              
              };
              '2627'?: {
              
              };
              '2628'?: {
              
              };
              '2629'?: {
              
              };
              '2630'?: {
              
              };
              '2631'?: {
              
              };
              '2632'?: {
              
              };
              '2633'?: {
              
              };
              '2634'?: {
              
              };
              '2635'?: {
              
              };
              '2636'?: {
              
              };
              '2637'?: {
              
              };
              '2638'?: {
              
              };
              '2639'?: {
              
              };
              '2640'?: {
              
              };
              '2641'?: {
              
              };
              '2642'?: {
              
              };
              '2643'?: {
              
              };
              '2644'?: {
              
              };
              '2645'?: {
              
              };
              '2646'?: {
              
              };
              '2647'?: {
              
              };
              '2648'?: {
              
              };
              '2649'?: {
              
              };
              '2650'?: {
              
              };
              '2651'?: {
              
              };
              '2652'?: {
              
              };
              '2653'?: {
              
              };
              '2654'?: {
              
              };
              '2655'?: {
              
              };
              '2656'?: {
              
              };
              '2657'?: {
              
              };
              '2658'?: {
              
              };
              '2659'?: {
              
              };
              '2660'?: {
              
              };
              '2661'?: {
              
              };
              '2662'?: {
              
              };
              '2663'?: {
              
              };
              '2664'?: {
              
              };
              '2665'?: {
              
              };
              '2666'?: {
              
              };
              '2667'?: {
              
              };
              '2668'?: {
              
              };
              '2669'?: {
              
              };
              '2670'?: {
              
              };
              '2671'?: {
              
              };
              '2672'?: {
              
              };
              '2673'?: {
              
              };
              '2674'?: {
              
              };
              '2675'?: {
              
              };
              '2676'?: {
              
              };
              '2677'?: {
              
              };
              '2678'?: {
              
              };
              '2679'?: {
              
              };
              '2680'?: {
              
              };
              '2681'?: {
              
              };
              '2682'?: {
              
              };
              '2683'?: {
              
              };
              '2684'?: {
              
              };
              '2685'?: {
              
              };
              '2686'?: {
              
              };
              '2687'?: {
              
              };
              '2688'?: {
              
              };
              '2689'?: {
              
              };
              '2690'?: {
              
              };
              '2691'?: {
              
              };
              '2692'?: {
              
              };
              '2693'?: {
              
              };
              '2694'?: {
              
              };
              '2695'?: {
              
              };
              '2696'?: {
              
              };
              '2697'?: {
              
              };
              '2698'?: {
              
              };
              '2699'?: {
              
              };
              '2700'?: {
              
              };
              '2701'?: {
              
              };
              '2702'?: {
              
              };
              '2703'?: {
              
              };
              '2704'?: {
              
              };
              '2705'?: {
              
              };
              '2706'?: {
              
              };
              '2707'?: {
              
              };
              '2708'?: {
              
              };
              '2709'?: {
              
              };
              '2710'?: {
              
              };
              '2711'?: {
              
              };
              '2712'?: {
              
              };
              '2713'?: {
              
              };
              '2714'?: {
              
              };
              '2715'?: {
              
              };
              '2716'?: {
              
              };
              '2717'?: {
              
              };
              '2718'?: {
              
              };
              '2719'?: {
              
              };
              '2720'?: {
              
              };
              '2721'?: {
              
              };
              '2722'?: {
              
              };
              '2723'?: {
              
              };
              '2724'?: {
              
              };
              '2725'?: {
              
              };
              '2726'?: {
              
              };
              '2727'?: {
              
              };
              '2728'?: {
              
              };
              '2729'?: {
              
              };
              '2730'?: {
              
              };
              '2731'?: {
              
              };
              '2732'?: {
              
              };
              '2733'?: {
              
              };
              '2734'?: {
              
              };
              '2735'?: {
              
              };
              '2736'?: {
              
              };
              '2737'?: {
              
              };
              '2738'?: {
              
              };
              '2739'?: {
              
              };
              '2740'?: {
              
              };
              '2741'?: {
              
              };
              '2742'?: {
              
              };
              '2743'?: {
              
              };
              '2744'?: {
              
              };
              '2745'?: {
              
              };
              '2746'?: {
              
              };
              '2747'?: {
              
              };
              '2748'?: {
              
              };
              '2749'?: {
              
              };
              '2750'?: {
              
              };
              '2751'?: {
              
              };
              '2752'?: {
              
              };
              '2753'?: {
              
              };
              '2754'?: {
              
              };
              '2755'?: {
              
              };
              '2756'?: {
              
              };
              '2757'?: {
              
              };
              '2758'?: {
              
              };
              '2759'?: {
              
              };
              '2760'?: {
              
              };
              '2761'?: {
              
              };
              '2762'?: {
              
              };
              '2763'?: {
              
              };
              '2764'?: {
              
              };
              '2765'?: {
              
              };
              '2766'?: {
              
              };
              '2767'?: {
              
              };
              '2768'?: {
              
              };
              '2769'?: {
              
              };
              '2770'?: {
              
              };
              '2771'?: {
              
              };
              '2772'?: {
              
              };
              '2773'?: {
              
              };
              '2774'?: {
              
              };
              '2775'?: {
              
              };
              '2776'?: {
              
              };
              '2777'?: {
              
              };
              '2778'?: {
              
              };
              '2779'?: {
              
              };
              '2780'?: {
              
              };
              '2781'?: {
              
              };
              '2782'?: {
              
              };
              '2783'?: {
              
              };
              '2784'?: {
              
              };
              '2785'?: {
              
              };
              '2786'?: {
              
              };
              '2787'?: {
              
              };
              '2788'?: {
              
              };
              '2789'?: {
              
              };
              '2790'?: {
              
              };
              '2791'?: {
              
              };
              '2792'?: {
              
              };
              '2793'?: {
              
              };
              '2794'?: {
              
              };
              '2795'?: {
              
              };
              '2796'?: {
              
              };
              '2797'?: {
              
              };
              '2798'?: {
              
              };
              '2799'?: {
              
              };
              '2800'?: {
              
              };
              '2801'?: {
              
              };
              '2802'?: {
              
              };
              '2803'?: {
              
              };
              '2804'?: {
              
              };
              '2805'?: {
              
              };
              '2806'?: {
              
              };
              '2807'?: {
              
              };
              '2808'?: {
              
              };
              '2809'?: {
              
              };
              '2810'?: {
              
              };
              '2811'?: {
              
              };
              '2812'?: {
              
              };
              '2813'?: {
              
              };
              '2814'?: {
              
              };
              '2815'?: {
              
              };
              '2816'?: {
              
              };
              '2817'?: {
              
              };
              '2818'?: {
              
              };
              '2819'?: {
              
              };
              '2820'?: {
              
              };
              '2821'?: {
              
              };
              '2822'?: {
              
              };
              '2823'?: {
              
              };
              '2824'?: {
              
              };
              '2825'?: {
              
              };
              '2826'?: {
              
              };
              '2827'?: {
              
              };
              '2828'?: {
              
              };
              '2829'?: {
              
              };
              '2830'?: {
              
              };
              '2831'?: {
              
              };
              '2832'?: {
              
              };
              '2833'?: {
              
              };
              '2834'?: {
              
              };
              '2835'?: {
              
              };
              '2836'?: {
              
              };
              '2837'?: {
              
              };
              '2838'?: {
              
              };
              '2839'?: {
              
              };
              '2840'?: {
              
              };
              '2841'?: {
              
              };
              '2842'?: {
              
              };
              '2843'?: {
              
              };
              '2844'?: {
              
              };
              '2845'?: {
              
              };
              '2846'?: {
              
              };
              '2847'?: {
              
              };
              '2848'?: {
              
              };
              '2849'?: {
              
              };
              '2850'?: {
              
              };
              '2851'?: {
              
              };
              '2852'?: {
              
              };
              '2853'?: {
              
              };
              '2854'?: {
              
              };
              '2855'?: {
              
              };
              '2856'?: {
              
              };
              '2857'?: {
              
              };
              '2858'?: {
              
              };
              '2859'?: {
              
              };
              '2860'?: {
              
              };
              '2861'?: {
              
              };
              '2862'?: {
              
              };
              '2863'?: {
              
              };
              '2864'?: {
              
              };
              '2865'?: {
              
              };
              '2866'?: {
              
              };
              '2867'?: {
              
              };
              '2868'?: {
              
              };
              '2869'?: {
              
              };
              '2870'?: {
              
              };
              '2871'?: {
              
              };
              '2872'?: {
              
              };
              '2873'?: {
              
              };
              '2874'?: {
              
              };
              '2875'?: {
              
              };
              '2876'?: {
              
              };
              '2877'?: {
              
              };
              '2878'?: {
              
              };
              '2879'?: {
              
              };
              '2880'?: {
              
              };
              '2881'?: {
              
              };
              '2882'?: {
              
              };
              '2883'?: {
              
              };
              '2884'?: {
              
              };
              '2885'?: {
              
              };
              '2886'?: {
              
              };
              '2887'?: {
              
              };
              '2888'?: {
              
              };
              '2889'?: {
              
              };
              '2890'?: {
              
              };
              '2891'?: {
              
              };
              '2892'?: {
              
              };
              '2893'?: {
              
              };
              '2894'?: {
              
              };
              '2895'?: {
              
              };
              '2896'?: {
              
              };
              '2897'?: {
              
              };
              '2898'?: {
              
              };
              '2899'?: {
              
              };
              '2900'?: {
              
              };
              '2901'?: {
              
              };
              '2902'?: {
              
              };
              '2903'?: {
              
              };
              '2904'?: {
              
              };
              '2905'?: {
              
              };
              '2906'?: {
              
              };
              '2907'?: {
              
              };
              '2908'?: {
              
              };
              '2909'?: {
              
              };
              '2910'?: {
              
              };
              '2911'?: {
              
              };
              '2912'?: {
              
              };
              '2913'?: {
              
              };
              '2914'?: {
              
              };
              '2915'?: {
              
              };
              '2916'?: {
              
              };
              '2917'?: {
              
              };
              '2918'?: {
              
              };
              '2919'?: {
              
              };
              '2920'?: {
              
              };
              '2921'?: {
              
              };
              '2922'?: {
              
              };
              '2923'?: {
              
              };
              '2924'?: {
              
              };
              '2925'?: {
              
              };
              '2926'?: {
              
              };
              '2927'?: {
              
              };
              '2928'?: {
              
              };
              '2929'?: {
              
              };
              '2930'?: {
              
              };
              '2931'?: {
              
              };
              '2932'?: {
              
              };
              '2933'?: {
              
              };
              '2934'?: {
              
              };
              '2935'?: {
              
              };
              '2936'?: {
              
              };
              '2937'?: {
              
              };
              '2938'?: {
              
              };
              '2939'?: {
              
              };
              '2940'?: {
              
              };
              '2941'?: {
              
              };
              '2942'?: {
              
              };
              '2943'?: {
              
              };
              '2944'?: {
              
              };
              '2945'?: {
              
              };
              '2946'?: {
              
              };
              '2947'?: {
              
              };
              '2948'?: {
              
              };
              '2949'?: {
              
              };
              '2950'?: {
              
              };
              '2951'?: {
              
              };
              '2952'?: {
              
              };
              '2953'?: {
              
              };
              '2954'?: {
              
              };
              '2955'?: {
              
              };
              '2956'?: {
              
              };
              '2957'?: {
              
              };
              '2958'?: {
              
              };
              '2959'?: {
              
              };
              '2960'?: {
              
              };
              '2961'?: {
              
              };
              '2962'?: {
              
              };
              '2963'?: {
              
              };
              '2964'?: {
              
              };
              '2965'?: {
              
              };
              '2966'?: {
              
              };
              '2967'?: {
              
              };
              '2968'?: {
              
              };
              '2969'?: {
              
              };
              '2970'?: {
              
              };
              '2971'?: {
              
              };
              '2972'?: {
              
              };
              '2973'?: {
              
              };
              '2974'?: {
              
              };
              '2975'?: {
              
              };
              '2976'?: {
              
              };
              '2977'?: {
              
              };
              '2978'?: {
              
              };
              '2979'?: {
              
              };
              '2980'?: {
              
              };
              '2981'?: {
              
              };
              '2982'?: {
              
              };
              '2983'?: {
              
              };
              '2984'?: {
              
              };
              '2985'?: {
              
              };
              '2986'?: {
              
              };
              '2987'?: {
              
              };
              '2988'?: {
              
              };
              '2989'?: {
              
              };
              '2990'?: {
              
              };
              '2991'?: {
              
              };
              '2992'?: {
              
              };
              '2993'?: {
              
              };
              '2994'?: {
              
              };
              '2995'?: {
              
              };
              '2996'?: {
              
              };
              '2997'?: {
              
              };
              '2998'?: {
              
              };
              '2999'?: {
              
              };
              '3000'?: {
              
              };
              '3001'?: {
              
              };
              '3002'?: {
              
              };
              '3003'?: {
              
              };
              '3004'?: {
              
              };
              '3005'?: {
              
              };
              '3006'?: {
              
              };
              '3007'?: {
              
              };
              '3008'?: {
              
              };
              '3009'?: {
              
              };
              '3010'?: {
              
              };
              '3011'?: {
              
              };
              '3012'?: {
              
              };
              '3013'?: {
              
              };
              '3014'?: {
              
              };
              '3015'?: {
              
              };
              '3016'?: {
              
              };
              '3017'?: {
              
              };
              '3018'?: {
              
              };
              '3019'?: {
              
              };
              '3020'?: {
              
              };
              '3021'?: {
              
              };
              '3022'?: {
              
              };
              '3023'?: {
              
              };
              '3024'?: {
              
              };
              '3025'?: {
              
              };
              '3026'?: {
              
              };
              '3027'?: {
              
              };
              '3028'?: {
              
              };
              '3029'?: {
              
              };
              '3030'?: {
              
              };
              '3031'?: {
              
              };
              '3032'?: {
              
              };
              '3033'?: {
              
              };
              '3034'?: {
              
              };
              '3035'?: {
              
              };
              '3036'?: {
              
              };
              '3037'?: {
              
              };
              '3038'?: {
              
              };
              '3039'?: {
              
              };
              '3040'?: {
              
              };
              '3041'?: {
              
              };
              '3042'?: {
              
              };
              '3043'?: {
              
              };
              '3044'?: {
              
              };
              '3045'?: {
              
              };
              '3046'?: {
              
              };
              '3047'?: {
              
              };
              '3048'?: {
              
              };
              '3049'?: {
              
              };
              '3050'?: {
              
              };
              '3051'?: {
              
              };
              '3052'?: {
              
              };
              '3053'?: {
              
              };
              '3054'?: {
              
              };
              '3055'?: {
              
              };
              '3056'?: {
              
              };
              '3057'?: {
              
              };
              '3058'?: {
              
              };
              '3059'?: {
              
              };
              '3060'?: {
              
              };
              '3061'?: {
              
              };
              '3062'?: {
              
              };
              '3063'?: {
              
              };
              '3064'?: {
              
              };
              '3065'?: {
              
              };
              '3066'?: {
              
              };
              '3067'?: {
              
              };
              '3068'?: {
              
              };
              '3069'?: {
              
              };
              '3070'?: {
              
              };
              '3071'?: {
              
              };
              '3072'?: {
              
              };
              '3073'?: {
              
              };
              '3074'?: {
              
              };
              '3075'?: {
              
              };
              '3076'?: {
              
              };
              '3077'?: {
              
              };
              '3078'?: {
              
              };
              '3079'?: {
              
              };
              '3080'?: {
              
              };
              '3081'?: {
              
              };
              '3082'?: {
              
              };
              '3083'?: {
              
              };
              '3084'?: {
              
              };
              '3085'?: {
              
              };
              '3086'?: {
              
              };
              '3087'?: {
              
              };
              '3088'?: {
              
              };
              '3089'?: {
              
              };
              '3090'?: {
              
              };
              '3091'?: {
              
              };
              '3092'?: {
              
              };
              '3093'?: {
              
              };
              '3094'?: {
              
              };
              '3095'?: {
              
              };
              '3096'?: {
              
              };
              '3097'?: {
              
              };
              '3098'?: {
              
              };
              '3099'?: {
              
              };
              '3100'?: {
              
              };
              '3101'?: {
              
              };
              '3102'?: {
              
              };
              '3103'?: {
              
              };
              '3104'?: {
              
              };
              '3105'?: {
              
              };
              '3106'?: {
              
              };
              '3107'?: {
              
              };
              '3108'?: {
              
              };
              '3109'?: {
              
              };
              '3110'?: {
              
              };
              '3111'?: {
              
              };
              '3112'?: {
              
              };
              '3113'?: {
              
              };
              '3114'?: {
              
              };
              '3115'?: {
              
              };
              '3116'?: {
              
              };
              '3117'?: {
              
              };
              '3118'?: {
              
              };
              '3119'?: {
              
              };
              '3120'?: {
              
              };
              '3121'?: {
              
              };
              '3122'?: {
              
              };
              '3123'?: {
              
              };
              '3124'?: {
              
              };
              '3125'?: {
              
              };
              '3126'?: {
              
              };
              '3127'?: {
              
              };
              '3128'?: {
              
              };
              '3129'?: {
              
              };
              '3130'?: {
              
              };
              '3131'?: {
              
              };
              '3132'?: {
              
              };
              '3133'?: {
              
              };
              '3134'?: {
              
              };
              '3135'?: {
              
              };
              '3136'?: {
              
              };
              '3137'?: {
              
              };
              '3138'?: {
              
              };
              '3139'?: {
              
              };
              '3140'?: {
              
              };
              '3141'?: {
              
              };
              '3142'?: {
              
              };
              '3143'?: {
              
              };
              '3144'?: {
              
              };
              '3145'?: {
              
              };
              '3146'?: {
              
              };
              '3147'?: {
              
              };
              '3148'?: {
              
              };
              '3149'?: {
              
              };
              '3150'?: {
              
              };
              '3151'?: {
              
              };
              '3152'?: {
              
              };
              '3153'?: {
              
              };
              '3154'?: {
              
              };
              '3155'?: {
              
              };
              '3156'?: {
              
              };
              '3157'?: {
              
              };
              '3158'?: {
              
              };
              '3159'?: {
              
              };
              '3160'?: {
              
              };
              '3161'?: {
              
              };
              '3162'?: {
              
              };
              '3163'?: {
              
              };
              '3164'?: {
              
              };
              '3165'?: {
              
              };
              '3166'?: {
              
              };
              '3167'?: {
              
              };
              '3168'?: {
              
              };
              '3169'?: {
              
              };
              '3170'?: {
              
              };
              '3171'?: {
              
              };
              '3172'?: {
              
              };
              '3173'?: {
              
              };
              '3174'?: {
              
              };
              '3175'?: {
              
              };
              '3176'?: {
              
              };
              '3177'?: {
              
              };
              '3178'?: {
              
              };
              '3179'?: {
              
              };
              '3180'?: {
              
              };
              '3181'?: {
              
              };
              '3182'?: {
              
              };
              '3183'?: {
              
              };
              '3184'?: {
              
              };
              '3185'?: {
              
              };
              '3186'?: {
              
              };
              '3187'?: {
              
              };
              '3188'?: {
              
              };
              '3189'?: {
              
              };
              '3190'?: {
              
              };
              '3191'?: {
              
              };
              '3192'?: {
              
              };
              '3193'?: {
              
              };
              '3194'?: {
              
              };
              '3195'?: {
              
              };
              '3196'?: {
              
              };
              '3197'?: {
              
              };
              '3198'?: {
              
              };
              '3199'?: {
              
              };
              '3200'?: {
              
              };
              '3201'?: {
              
              };
              '3202'?: {
              
              };
              '3203'?: {
              
              };
              '3204'?: {
              
              };
              '3205'?: {
              
              };
              '3206'?: {
              
              };
              '3207'?: {
              
              };
              '3208'?: {
              
              };
              '3209'?: {
              
              };
              '3210'?: {
              
              };
              '3211'?: {
              
              };
              '3212'?: {
              
              };
              '3213'?: {
              
              };
              '3214'?: {
              
              };
              '3215'?: {
              
              };
              '3216'?: {
              
              };
              '3217'?: {
              
              };
              '3218'?: {
              
              };
              '3219'?: {
              
              };
              '3220'?: {
              
              };
              '3221'?: {
              
              };
              '3222'?: {
              
              };
              '3223'?: {
              
              };
              '3224'?: {
              
              };
              '3225'?: {
              
              };
              '3226'?: {
              
              };
              '3227'?: {
              
              };
              '3228'?: {
              
              };
              '3229'?: {
              
              };
              '3230'?: {
              
              };
              '3231'?: {
              
              };
              '3232'?: {
              
              };
              '3233'?: {
              
              };
              '3234'?: {
              
              };
              '3235'?: {
              
              };
              '3236'?: {
              
              };
              '3237'?: {
              
              };
              '3238'?: {
              
              };
              '3239'?: {
              
              };
              '3240'?: {
              
              };
              '3241'?: {
              
              };
              '3242'?: {
              
              };
              '3243'?: {
              
              };
              '3244'?: {
              
              };
              '3245'?: {
              
              };
              '3246'?: {
              
              };
              '3247'?: {
              
              };
              '3248'?: {
              
              };
              '3249'?: {
              
              };
              '3250'?: {
              
              };
              '3251'?: {
              
              };
              '3252'?: {
              
              };
              '3253'?: {
              
              };
              '3254'?: {
              
              };
              '3255'?: {
              
              };
              '3256'?: {
              
              };
              '3257'?: {
              
              };
              '3258'?: {
              
              };
              '3259'?: {
              
              };
              '3260'?: {
              
              };
              '3261'?: {
              
              };
              '3262'?: {
              
              };
              '3263'?: {
              
              };
              '3264'?: {
              
              };
              '3265'?: {
              
              };
              '3266'?: {
              
              };
              '3267'?: {
              
              };
              '3268'?: {
              
              };
              '3269'?: {
              
              };
              '3270'?: {
              
              };
              '3271'?: {
              
              };
              '3272'?: {
              
              };
              '3273'?: {
              
              };
              '3274'?: {
              
              };
              '3275'?: {
              
              };
              '3276'?: {
              
              };
              '3277'?: {
              
              };
              '3278'?: {
              
              };
              '3279'?: {
              
              };
              '3280'?: {
              
              };
              '3281'?: {
              
              };
              '3282'?: {
              
              };
              '3283'?: {
              
              };
              '3284'?: {
              
              };
              '3285'?: {
              
              };
              '3286'?: {
              
              };
              '3287'?: {
              
              };
              '3288'?: {
              
              };
              '3289'?: {
              
              };
              '3290'?: {
              
              };
              '3291'?: {
              
              };
              '3292'?: {
              
              };
              '3293'?: {
              
              };
              '3294'?: {
              
              };
              '3295'?: {
              
              };
              '3296'?: {
              
              };
              '3297'?: {
              
              };
              '3298'?: {
              
              };
              '3299'?: {
              
              };
              '3300'?: {
              
              };
              '3301'?: {
              
              };
              '3302'?: {
              
              };
              '3303'?: {
              
              };
              '3304'?: {
              
              };
              '3305'?: {
              
              };
              '3306'?: {
              
              };
              '3307'?: {
              
              };
              '3308'?: {
              
              };
              '3309'?: {
              
              };
              '3310'?: {
              
              };
              '3311'?: {
              
              };
              '3312'?: {
              
              };
              '3313'?: {
              
              };
              '3314'?: {
              
              };
              '3315'?: {
              
              };
              '3316'?: {
              
              };
              '3317'?: {
              
              };
              '3318'?: {
              
              };
              '3319'?: {
              
              };
              '3320'?: {
              
              };
              '3321'?: {
              
              };
              '3322'?: {
              
              };
              '3323'?: {
              
              };
              '3324'?: {
              
              };
              '3325'?: {
              
              };
              '3326'?: {
              
              };
              '3327'?: {
              
              };
              '3328'?: {
              
              };
              '3329'?: {
              
              };
              '3330'?: {
              
              };
              '3331'?: {
              
              };
              '3332'?: {
              
              };
              '3333'?: {
              
              };
              '3334'?: {
              
              };
              '3335'?: {
              
              };
              '3336'?: {
              
              };
              '3337'?: {
              
              };
              '3338'?: {
              
              };
              '3339'?: {
              
              };
              '3340'?: {
              
              };
              '3341'?: {
              
              };
              '3342'?: {
              
              };
              '3343'?: {
              
              };
              '3344'?: {
              
              };
              '3345'?: {
              
              };
              '3346'?: {
              
              };
              '3347'?: {
              
              };
              '3348'?: {
              
              };
              '3349'?: {
              
              };
              '3350'?: {
              
              };
              '3351'?: {
              
              };
              '3352'?: {
              
              };
              '3353'?: {
              
              };
              '3354'?: {
              
              };
              '3355'?: {
              
              };
              '3356'?: {
              
              };
              '3357'?: {
              
              };
              '3358'?: {
              
              };
              '3359'?: {
              
              };
              '3360'?: {
              
              };
              '3361'?: {
              
              };
              '3362'?: {
              
              };
              '3363'?: {
              
              };
              '3364'?: {
              
              };
              '3365'?: {
              
              };
              '3366'?: {
              
              };
              '3367'?: {
              
              };
              '3368'?: {
              
              };
              '3369'?: {
              
              };
              '3370'?: {
              
              };
              '3371'?: {
              
              };
              '3372'?: {
              
              };
              '3373'?: {
              
              };
              '3374'?: {
              
              };
              '3375'?: {
              
              };
              '3376'?: {
              
              };
              '3377'?: {
              
              };
              '3378'?: {
              
              };
              '3379'?: {
              
              };
              '3380'?: {
              
              };
              '3381'?: {
              
              };
              '3382'?: {
              
              };
              '3383'?: {
              
              };
              '3384'?: {
              
              };
              '3385'?: {
              
              };
              '3386'?: {
              
              };
              '3387'?: {
              
              };
              '3388'?: {
              
              };
              '3389'?: {
              
              };
              '3390'?: {
              
              };
              '3391'?: {
              
              };
              '3392'?: {
              
              };
              '3393'?: {
              
              };
              '3394'?: {
              
              };
              '3395'?: {
              
              };
              '3396'?: {
              
              };
              '3397'?: {
              
              };
              '3398'?: {
              
              };
              '3399'?: {
              
              };
              '3400'?: {
              
              };
              '3401'?: {
              
              };
              '3402'?: {
              
              };
              '3403'?: {
              
              };
              '3404'?: {
              
              };
              '3405'?: {
              
              };
              '3406'?: {
              
              };
              '3407'?: {
              
              };
              '3408'?: {
              
              };
              '3409'?: {
              
              };
              '3410'?: {
              
              };
              '3411'?: {
              
              };
              '3412'?: {
              
              };
              '3413'?: {
              
              };
              '3414'?: {
              
              };
              '3415'?: {
              
              };
              '3416'?: {
              
              };
              '3417'?: {
              
              };
              '3418'?: {
              
              };
              '3419'?: {
              
              };
              '3420'?: {
              
              };
              '3421'?: {
              
              };
              '3422'?: {
              
              };
              '3423'?: {
              
              };
              '3424'?: {
              
              };
              '3425'?: {
              
              };
              '3426'?: {
              
              };
              '3427'?: {
              
              };
              '3428'?: {
              
              };
              '3429'?: {
              
              };
              '3430'?: {
              
              };
              '3431'?: {
              
              };
              '3432'?: {
              
              };
              '3433'?: {
              
              };
              '3434'?: {
              
              };
              '3435'?: {
              
              };
              '3436'?: {
              
              };
              '3437'?: {
              
              };
              '3438'?: {
              
              };
              '3439'?: {
              
              };
              '3440'?: {
              
              };
              '3441'?: {
              
              };
              '3442'?: {
              
              };
              '3443'?: {
              
              };
              '3444'?: {
              
              };
              '3445'?: {
              
              };
              '3446'?: {
              
              };
              '3447'?: {
              
              };
              '3448'?: {
              
              };
              '3449'?: {
              
              };
              '3450'?: {
              
              };
              '3451'?: {
              
              };
              '3452'?: {
              
              };
              '3453'?: {
              
              };
              '3454'?: {
              
              };
              '3455'?: {
              
              };
              '3456'?: {
              
              };
              '3457'?: {
              
              };
              '3458'?: {
              
              };
              '3459'?: {
              
              };
              '3460'?: {
              
              };
              '3461'?: {
              
              };
              '3462'?: {
              
              };
              '3463'?: {
              
              };
              '3464'?: {
              
              };
              '3465'?: {
              
              };
              '3466'?: {
              
              };
              '3467'?: {
              
              };
              '3468'?: {
              
              };
              '3469'?: {
              
              };
              '3470'?: {
              
              };
              '3471'?: {
              
              };
              '3472'?: {
              
              };
              '3473'?: {
              
              };
              '3474'?: {
              
              };
              '3475'?: {
              
              };
              '3476'?: {
              
              };
              '3477'?: {
              
              };
              '3478'?: {
              
              };
              '3479'?: {
              
              };
              '3480'?: {
              
              };
              '3481'?: {
              
              };
              '3482'?: {
              
              };
              '3483'?: {
              
              };
              '3484'?: {
              
              };
              '3485'?: {
              
              };
              '3486'?: {
              
              };
              '3487'?: {
              
              };
              '3488'?: {
              
              };
              '3489'?: {
              
              };
              '3490'?: {
              
              };
              '3491'?: {
              
              };
              '3492'?: {
              
              };
              '3493'?: {
              
              };
              '3494'?: {
              
              };
              '3495'?: {
              
              };
              '3496'?: {
              
              };
              '3497'?: {
              
              };
              '3498'?: {
              
              };
              '3499'?: {
              
              };
              '3500'?: {
              
              };
              '3501'?: {
              
              };
              '3502'?: {
              
              };
              '3503'?: {
              
              };
              '3504'?: {
              
              };
              '3505'?: {
              
              };
              '3506'?: {
              
              };
              '3507'?: {
              
              };
              '3508'?: {
              
              };
              '3509'?: {
              
              };
              '3510'?: {
              
              };
              '3511'?: {
              
              };
              '3512'?: {
              
              };
              '3513'?: {
              
              };
              '3514'?: {
              
              };
              '3515'?: {
              
              };
              '3516'?: {
              
              };
              '3517'?: {
              
              };
              '3518'?: {
              
              };
              '3519'?: {
              
              };
              '3520'?: {
              
              };
              '3521'?: {
              
              };
              '3522'?: {
              
              };
              '3523'?: {
              
              };
              '3524'?: {
              
              };
              '3525'?: {
              
              };
              '3526'?: {
              
              };
              '3527'?: {
              
              };
              '3528'?: {
              
              };
              '3529'?: {
              
              };
              '3530'?: {
              
              };
              '3531'?: {
              
              };
              '3532'?: {
              
              };
              '3533'?: {
              
              };
              '3534'?: {
              
              };
              '3535'?: {
              
              };
              '3536'?: {
              
              };
              '3537'?: {
              
              };
              '3538'?: {
              
              };
              '3539'?: {
              
              };
              '3540'?: {
              
              };
              '3541'?: {
              
              };
              '3542'?: {
              
              };
              '3543'?: {
              
              };
              '3544'?: {
              
              };
              '3545'?: {
              
              };
              '3546'?: {
              
              };
              '3547'?: {
              
              };
              '3548'?: {
              
              };
              '3549'?: {
              
              };
              '3550'?: {
              
              };
              '3551'?: {
              
              };
              '3552'?: {
              
              };
              '3553'?: {
              
              };
              '3554'?: {
              
              };
              '3555'?: {
              
              };
              '3556'?: {
              
              };
              '3557'?: {
              
              };
              '3558'?: {
              
              };
              '3559'?: {
              
              };
              '3560'?: {
              
              };
              '3561'?: {
              
              };
              '3562'?: {
              
              };
              '3563'?: {
              
              };
              '3564'?: {
              
              };
              '3565'?: {
              
              };
              '3566'?: {
              
              };
              '3567'?: {
              
              };
              '3568'?: {
              
              };
              '3569'?: {
              
              };
              '3570'?: {
              
              };
              '3571'?: {
              
              };
              '3572'?: {
              
              };
              '3573'?: {
              
              };
              '3574'?: {
              
              };
              '3575'?: {
              
              };
              '3576'?: {
              
              };
              '3577'?: {
              
              };
              '3578'?: {
              
              };
              '3579'?: {
              
              };
              '3580'?: {
              
              };
              '3581'?: {
              
              };
              '3582'?: {
              
              };
              '3583'?: {
              
              };
              '3584'?: {
              
              };
              '3585'?: {
              
              };
              '3586'?: {
              
              };
              '3587'?: {
              
              };
              '3588'?: {
              
              };
              '3589'?: {
              
              };
              '3590'?: {
              
              };
              '3591'?: {
              
              };
              '3592'?: {
              
              };
              '3593'?: {
              
              };
              '3594'?: {
              
              };
              '3595'?: {
              
              };
              '3596'?: {
              
              };
              '3597'?: {
              
              };
              '3598'?: {
              
              };
              '3599'?: {
              
              };
              '3600'?: {
              
              };
              '3601'?: {
              
              };
              '3602'?: {
              
              };
              '3603'?: {
              
              };
              '3604'?: {
              
              };
              '3605'?: {
              
              };
              '3606'?: {
              
              };
              '3607'?: {
              
              };
              '3608'?: {
              
              };
              '3609'?: {
              
              };
              '3610'?: {
              
              };
              '3611'?: {
              
              };
              '3612'?: {
              
              };
              '3613'?: {
              
              };
              '3614'?: {
              
              };
              '3615'?: {
              
              };
              '3616'?: {
              
              };
              '3617'?: {
              
              };
              '3618'?: {
              
              };
              '3619'?: {
              
              };
              '3620'?: {
              
              };
              '3621'?: {
              
              };
              '3622'?: {
              
              };
              '3623'?: {
              
              };
              '3624'?: {
              
              };
              '3625'?: {
              
              };
              '3626'?: {
              
              };
              '3627'?: {
              
              };
              '3628'?: {
              
              };
              '3629'?: {
              
              };
              '3630'?: {
              
              };
              '3631'?: {
              
              };
              '3632'?: {
              
              };
              '3633'?: {
              
              };
              '3634'?: {
              
              };
              '3635'?: {
              
              };
              '3636'?: {
              
              };
              '3637'?: {
              
              };
              '3638'?: {
              
              };
              '3639'?: {
              
              };
              '3640'?: {
              
              };
              '3641'?: {
              
              };
              '3642'?: {
              
              };
              '3643'?: {
              
              };
              '3644'?: {
              
              };
              '3645'?: {
              
              };
              '3646'?: {
              
              };
              '3647'?: {
              
              };
              '3648'?: {
              
              };
              '3649'?: {
              
              };
              '3650'?: {
              
              };
              '3651'?: {
              
              };
              '3652'?: {
              
              };
              '3653'?: {
              
              };
              '3654'?: {
              
              };
              '3655'?: {
              
              };
              '3656'?: {
              
              };
              '3657'?: {
              
              };
              '3658'?: {
              
              };
              '3659'?: {
              
              };
              '3660'?: {
              
              };
              '3661'?: {
              
              };
              '3662'?: {
              
              };
              '3663'?: {
              
              };
              '3664'?: {
              
              };
              '3665'?: {
              
              };
              '3666'?: {
              
              };
              '3667'?: {
              
              };
              '3668'?: {
              
              };
              '3669'?: {
              
              };
              '3670'?: {
              
              };
              '3671'?: {
              
              };
              '3672'?: {
              
              };
              '3673'?: {
              
              };
              '3674'?: {
              
              };
              '3675'?: {
              
              };
              '3676'?: {
              
              };
              '3677'?: {
              
              };
              '3678'?: {
              
              };
              '3679'?: {
              
              };
              '3680'?: {
              
              };
              '3681'?: {
              
              };
              '3682'?: {
              
              };
              '3683'?: {
              
              };
              '3684'?: {
              
              };
              '3685'?: {
              
              };
              '3686'?: {
              
              };
              '3687'?: {
              
              };
              '3688'?: {
              
              };
              '3689'?: {
              
              };
              '3690'?: {
              
              };
              '3691'?: {
              
              };
              '3692'?: {
              
              };
              '3693'?: {
              
              };
              '3694'?: {
              
              };
              '3695'?: {
              
              };
              '3696'?: {
              
              };
              '3697'?: {
              
              };
              '3698'?: {
              
              };
              '3699'?: {
              
              };
              '3700'?: {
              
              };
              '3701'?: {
              
              };
              '3702'?: {
              
              };
              '3703'?: {
              
              };
              '3704'?: {
              
              };
              '3705'?: {
              
              };
              '3706'?: {
              
              };
              '3707'?: {
              
              };
              '3708'?: {
              
              };
              '3709'?: {
              
              };
              '3710'?: {
              
              };
              '3711'?: {
              
              };
              '3712'?: {
              
              };
              '3713'?: {
              
              };
              '3714'?: {
              
              };
              '3715'?: {
              
              };
              '3716'?: {
              
              };
              '3717'?: {
              
              };
              '3718'?: {
              
              };
              '3719'?: {
              
              };
              '3720'?: {
              
              };
              '3721'?: {
              
              };
              '3722'?: {
              
              };
              '3723'?: {
              
              };
              '3724'?: {
              
              };
              '3725'?: {
              
              };
              '3726'?: {
              
              };
              '3727'?: {
              
              };
              '3728'?: {
              
              };
              '3729'?: {
              
              };
              '3730'?: {
              
              };
              '3731'?: {
              
              };
              '3732'?: {
              
              };
              '3733'?: {
              
              };
              '3734'?: {
              
              };
              '3735'?: {
              
              };
              '3736'?: {
              
              };
              '3737'?: {
              
              };
              '3738'?: {
              
              };
              '3739'?: {
              
              };
              '3740'?: {
              
              };
              '3741'?: {
              
              };
              '3742'?: {
              
              };
              '3743'?: {
              
              };
              '3744'?: {
              
              };
              '3745'?: {
              
              };
              '3746'?: {
              
              };
              '3747'?: {
              
              };
              '3748'?: {
              
              };
              '3749'?: {
              
              };
              '3750'?: {
              
              };
              '3751'?: {
              
              };
              '3752'?: {
              
              };
              '3753'?: {
              
              };
              '3754'?: {
              
              };
              '3755'?: {
              
              };
              '3756'?: {
              
              };
              '3757'?: {
              
              };
              '3758'?: {
              
              };
              '3759'?: {
              
              };
              '3760'?: {
              
              };
              '3761'?: {
              
              };
              '3762'?: {
              
              };
              '3763'?: {
              
              };
              '3764'?: {
              
              };
              '3765'?: {
              
              };
              '3766'?: {
              
              };
              '3767'?: {
              
              };
              '3768'?: {
              
              };
              '3769'?: {
              
              };
              '3770'?: {
              
              };
              '3771'?: {
              
              };
              '3772'?: {
              
              };
              '3773'?: {
              
              };
              '3774'?: {
              
              };
              '3775'?: {
              
              };
              '3776'?: {
              
              };
              '3777'?: {
              
              };
              '3778'?: {
              
              };
              '3779'?: {
              
              };
              '3780'?: {
              
              };
              '3781'?: {
              
              };
              '3782'?: {
              
              };
              '3783'?: {
              
              };
              '3784'?: {
              
              };
              '3785'?: {
              
              };
              '3786'?: {
              
              };
              '3787'?: {
              
              };
              '3788'?: {
              
              };
              '3789'?: {
              
              };
              '3790'?: {
              
              };
              '3791'?: {
              
              };
              '3792'?: {
              
              };
              '3793'?: {
              
              };
              '3794'?: {
              
              };
              '3795'?: {
              
              };
              '3796'?: {
              
              };
              '3797'?: {
              
              };
              '3798'?: {
              
              };
              '3799'?: {
              
              };
              '3800'?: {
              
              };
              '3801'?: {
              
              };
              '3802'?: {
              
              };
              '3803'?: {
              
              };
              '3804'?: {
              
              };
              '3805'?: {
              
              };
              '3806'?: {
              
              };
              '3807'?: {
              
              };
              '3808'?: {
              
              };
              '3809'?: {
              
              };
              '3810'?: {
              
              };
              '3811'?: {
              
              };
              '3812'?: {
              
              };
              '3813'?: {
              
              };
              '3814'?: {
              
              };
              '3815'?: {
              
              };
              '3816'?: {
              
              };
              '3817'?: {
              
              };
              '3818'?: {
              
              };
              '3819'?: {
              
              };
              '3820'?: {
              
              };
              '3821'?: {
              
              };
              '3822'?: {
              
              };
              '3823'?: {
              
              };
              '3824'?: {
              
              };
              '3825'?: {
              
              };
              '3826'?: {
              
              };
              '3827'?: {
              
              };
              '3828'?: {
              
              };
              '3829'?: {
              
              };
              '3830'?: {
              
              };
              '3831'?: {
              
              };
              '3832'?: {
              
              };
              '3833'?: {
              
              };
              '3834'?: {
              
              };
              '3835'?: {
              
              };
              '3836'?: {
              
              };
              '3837'?: {
              
              };
              '3838'?: {
              
              };
              '3839'?: {
              
              };
              '3840'?: {
              
              };
              '3841'?: {
              
              };
              '3842'?: {
              
              };
              '3843'?: {
              
              };
              '3844'?: {
              
              };
              '3845'?: {
              
              };
              '3846'?: {
              
              };
              '3847'?: {
              
              };
              '3848'?: {
              
              };
              '3849'?: {
              
              };
              '3850'?: {
              
              };
              '3851'?: {
              
              };
              '3852'?: {
              
              };
              '3853'?: {
              
              };
              '3854'?: {
              
              };
              '3855'?: {
              
              };
              '3856'?: {
              
              };
              '3857'?: {
              
              };
              '3858'?: {
              
              };
              '3859'?: {
              
              };
              '3860'?: {
              
              };
              '3861'?: {
              
              };
              '3862'?: {
              
              };
              '3863'?: {
              
              };
              '3864'?: {
              
              };
              '3865'?: {
              
              };
              '3866'?: {
              
              };
              '3867'?: {
              
              };
              '3868'?: {
              
              };
              '3869'?: {
              
              };
              '3870'?: {
              
              };
              '3871'?: {
              
              };
              '3872'?: {
              
              };
              '3873'?: {
              
              };
              '3874'?: {
              
              };
              '3875'?: {
              
              };
              '3876'?: {
              
              };
              '3877'?: {
              
              };
              '3878'?: {
              
              };
              '3879'?: {
              
              };
              '3880'?: {
              
              };
              '3881'?: {
              
              };
              '3882'?: {
              
              };
              '3883'?: {
              
              };
              '3884'?: {
              
              };
              '3885'?: {
              
              };
              '3886'?: {
              
              };
              '3887'?: {
              
              };
              '3888'?: {
              
              };
              '3889'?: {
              
              };
              '3890'?: {
              
              };
              '3891'?: {
              
              };
              '3892'?: {
              
              };
              '3893'?: {
              
              };
              '3894'?: {
              
              };
              '3895'?: {
              
              };
              '3896'?: {
              
              };
              '3897'?: {
              
              };
              '3898'?: {
              
              };
              '3899'?: {
              
              };
              '3900'?: {
              
              };
              '3901'?: {
              
              };
              '3902'?: {
              
              };
              '3903'?: {
              
              };
              '3904'?: {
              
              };
              '3905'?: {
              
              };
              '3906'?: {
              
              };
              '3907'?: {
              
              };
              '3908'?: {
              
              };
              '3909'?: {
              
              };
              '3910'?: {
              
              };
              '3911'?: {
              
              };
              '3912'?: {
              
              };
              '3913'?: {
              
              };
              '3914'?: {
              
              };
              '3915'?: {
              
              };
              '3916'?: {
              
              };
              '3917'?: {
              
              };
              '3918'?: {
              
              };
              '3919'?: {
              
              };
              '3920'?: {
              
              };
              '3921'?: {
              
              };
              '3922'?: {
              
              };
              '3923'?: {
              
              };
              '3924'?: {
              
              };
              '3925'?: {
              
              };
              '3926'?: {
              
              };
              '3927'?: {
              
              };
              '3928'?: {
              
              };
              '3929'?: {
              
              };
              '3930'?: {
              
              };
              '3931'?: {
              
              };
              '3932'?: {
              
              };
              '3933'?: {
              
              };
              '3934'?: {
              
              };
              '3935'?: {
              
              };
              '3936'?: {
              
              };
              '3937'?: {
              
              };
              '3938'?: {
              
              };
              '3939'?: {
              
              };
              '3940'?: {
              
              };
              '3941'?: {
              
              };
              '3942'?: {
              
              };
              '3943'?: {
              
              };
              '3944'?: {
              
              };
              '3945'?: {
              
              };
              '3946'?: {
              
              };
              '3947'?: {
              
              };
              '3948'?: {
              
              };
              '3949'?: {
              
              };
              '3950'?: {
              
              };
              '3951'?: {
              
              };
              '3952'?: {
              
              };
              '3953'?: {
              
              };
              '3954'?: {
              
              };
              '3955'?: {
              
              };
              '3956'?: {
              
              };
              '3957'?: {
              
              };
              '3958'?: {
              
              };
              '3959'?: {
              
              };
              '3960'?: {
              
              };
              '3961'?: {
              
              };
              '3962'?: {
              
              };
              '3963'?: {
              
              };
              '3964'?: {
              
              };
              '3965'?: {
              
              };
              '3966'?: {
              
              };
              '3967'?: {
              
              };
              '3968'?: {
              
              };
              '3969'?: {
              
              };
              '3970'?: {
              
              };
              '3971'?: {
              
              };
              '3972'?: {
              
              };
              '3973'?: {
              
              };
              '3974'?: {
              
              };
              '3975'?: {
              
              };
              '3976'?: {
              
              };
              '3977'?: {
              
              };
              '3978'?: {
              
              };
              '3979'?: {
              
              };
              '3980'?: {
              
              };
              '3981'?: {
              
              };
              '3982'?: {
              
              };
              '3983'?: {
              
              };
              '3984'?: {
              
              };
              '3985'?: {
              
              };
              '3986'?: {
              
              };
              '3987'?: {
              
              };
              '3988'?: {
              
              };
              '3989'?: {
              
              };
              '3990'?: {
              
              };
              '3991'?: {
              
              };
              '3992'?: {
              
              };
              '3993'?: {
              
              };
              '3994'?: {
              
              };
              '3995'?: {
              
              };
              '3996'?: {
              
              };
              '3997'?: {
              
              };
              '3998'?: {
              
              };
              '3999'?: {
              
              };
              '4000'?: {
              
              };
              '4001'?: {
              
              };
              '4002'?: {
              
              };
              '4003'?: {
              
              };
              '4004'?: {
              
              };
              '4005'?: {
              
              };
              '4006'?: {
              
              };
              '4007'?: {
              
              };
              '4008'?: {
              
              };
              '4009'?: {
              
              };
              '4010'?: {
              
              };
              '4011'?: {
              
              };
              '4012'?: {
              
              };
              '4013'?: {
              
              };
              '4014'?: {
              
              };
              '4015'?: {
              
              };
              '4016'?: {
              
              };
              '4017'?: {
              
              };
              '4018'?: {
              
              };
              '4019'?: {
              
              };
              '4020'?: {
              
              };
              '4021'?: {
              
              };
              '4022'?: {
              
              };
              '4023'?: {
              
              };
              '4024'?: {
              
              };
              '4025'?: {
              
              };
              '4026'?: {
              
              };
              '4027'?: {
              
              };
              '4028'?: {
              
              };
              '4029'?: {
              
              };
              '4030'?: {
              
              };
              '4031'?: {
              
              };
              '4032'?: {
              
              };
              '4033'?: {
              
              };
              '4034'?: {
              
              };
              '4035'?: {
              
              };
              '4036'?: {
              
              };
              '4037'?: {
              
              };
              '4038'?: {
              
              };
              '4039'?: {
              
              };
              '4040'?: {
              
              };
              '4041'?: {
              
              };
              '4042'?: {
              
              };
              '4043'?: {
              
              };
              '4044'?: {
              
              };
              '4045'?: {
              
              };
              '4046'?: {
              
              };
              '4047'?: {
              
              };
              '4048'?: {
              
              };
              '4049'?: {
              
              };
              '4050'?: {
              
              };
              '4051'?: {
              
              };
              '4052'?: {
              
              };
              '4053'?: {
              
              };
              '4054'?: {
              
              };
              '4055'?: {
              
              };
              '4056'?: {
              
              };
              '4057'?: {
              
              };
              '4058'?: {
              
              };
              '4059'?: {
              
              };
              '4060'?: {
              
              };
              '4061'?: {
              
              };
              '4062'?: {
              
              };
              '4063'?: {
              
              };
              '4064'?: {
              
              };
              '4065'?: {
              
              };
              '4066'?: {
              
              };
              '4067'?: {
              
              };
              '4068'?: {
              
              };
              '4069'?: {
              
              };
              '4070'?: {
              
              };
              '4071'?: {
              
              };
              '4072'?: {
              
              };
              '4073'?: {
              
              };
              '4074'?: {
              
              };
              '4075'?: {
              
              };
              '4076'?: {
              
              };
              '4077'?: {
              
              };
              '4078'?: {
              
              };
              '4079'?: {
              
              };
              '4080'?: {
              
              };
              '4081'?: {
              
              };
              '4082'?: {
              
              };
              '4083'?: {
              
              };
              '4084'?: {
              
              };
              '4085'?: {
              
              };
              '4086'?: {
              
              };
              '4087'?: {
              
              };
              '4088'?: {
              
              };
              '4089'?: {
              
              };
              '4090'?: {
              
              };
              '4091'?: {
              
              };
              '4092'?: {
              
              };
              '4093'?: {
              
              };
              '4094'?: {
              
              };
              '4095'?: {
              
              };
              '4096'?: {
              
              };
              '4097'?: {
              
              };
              '4098'?: {
              
              };
              '4099'?: {
              
              };
              '4100'?: {
              
              };
              '4101'?: {
              
              };
              '4102'?: {
              
              };
              '4103'?: {
              
              };
              '4104'?: {
              
              };
              '4105'?: {
              
              };
              '4106'?: {
              
              };
              '4107'?: {
              
              };
              '4108'?: {
              
              };
              '4109'?: {
              
              };
              '4110'?: {
              
              };
              '4111'?: {
              
              };
              '4112'?: {
              
              };
              '4113'?: {
              
              };
              '4114'?: {
              
              };
              '4115'?: {
              
              };
              '4116'?: {
              
              };
              '4117'?: {
              
              };
              '4118'?: {
              
              };
              '4119'?: {
              
              };
              '4120'?: {
              
              };
              '4121'?: {
              
              };
              '4122'?: {
              
              };
              '4123'?: {
              
              };
              '4124'?: {
              
              };
              '4125'?: {
              
              };
              '4126'?: {
              
              };
              '4127'?: {
              
              };
              '4128'?: {
              
              };
              '4129'?: {
              
              };
              '4130'?: {
              
              };
              '4131'?: {
              
              };
              '4132'?: {
              
              };
              '4133'?: {
              
              };
              '4134'?: {
              
              };
              '4135'?: {
              
              };
              '4136'?: {
              
              };
              '4137'?: {
              
              };
              '4138'?: {
              
              };
              '4139'?: {
              
              };
              '4140'?: {
              
              };
              '4141'?: {
              
              };
              '4142'?: {
              
              };
              '4143'?: {
              
              };
              '4144'?: {
              
              };
              '4145'?: {
              
              };
              '4146'?: {
              
              };
              '4147'?: {
              
              };
              '4148'?: {
              
              };
              '4149'?: {
              
              };
              '4150'?: {
              
              };
              '4151'?: {
              
              };
              '4152'?: {
              
              };
              '4153'?: {
              
              };
              '4154'?: {
              
              };
              '4155'?: {
              
              };
              '4156'?: {
              
              };
              '4157'?: {
              
              };
              '4158'?: {
              
              };
              '4159'?: {
              
              };
              '4160'?: {
              
              };
              '4161'?: {
              
              };
              '4162'?: {
              
              };
              '4163'?: {
              
              };
              '4164'?: {
              
              };
              '4165'?: {
              
              };
              '4166'?: {
              
              };
              '4167'?: {
              
              };
              '4168'?: {
              
              };
              '4169'?: {
              
              };
              '4170'?: {
              
              };
              '4171'?: {
              
              };
              '4172'?: {
              
              };
              '4173'?: {
              
              };
              '4174'?: {
              
              };
              '4175'?: {
              
              };
              '4176'?: {
              
              };
              '4177'?: {
              
              };
              '4178'?: {
              
              };
              '4179'?: {
              
              };
              '4180'?: {
              
              };
              '4181'?: {
              
              };
              '4182'?: {
              
              };
              '4183'?: {
              
              };
              '4184'?: {
              
              };
              '4185'?: {
              
              };
              '4186'?: {
              
              };
              '4187'?: {
              
              };
              '4188'?: {
              
              };
              '4189'?: {
              
              };
              '4190'?: {
              
              };
              '4191'?: {
              
              };
              '4192'?: {
              
              };
              '4193'?: {
              
              };
              '4194'?: {
              
              };
              '4195'?: {
              
              };
              '4196'?: {
              
              };
              '4197'?: {
              
              };
              '4198'?: {
              
              };
              '4199'?: {
              
              };
              '4200'?: {
              
              };
              '4201'?: {
              
              };
              '4202'?: {
              
              };
              '4203'?: {
              
              };
              '4204'?: {
              
              };
              '4205'?: {
              
              };
              '4206'?: {
              
              };
              '4207'?: {
              
              };
              '4208'?: {
              
              };
              '4209'?: {
              
              };
              '4210'?: {
              
              };
              '4211'?: {
              
              };
              '4212'?: {
              
              };
              '4213'?: {
              
              };
              '4214'?: {
              
              };
              '4215'?: {
              
              };
              '4216'?: {
              
              };
              '4217'?: {
              
              };
              '4218'?: {
              
              };
              '4219'?: {
              
              };
              '4220'?: {
              
              };
              '4221'?: {
              
              };
              '4222'?: {
              
              };
              '4223'?: {
              
              };
              '4224'?: {
              
              };
              '4225'?: {
              
              };
              '4226'?: {
              
              };
              '4227'?: {
              
              };
              '4228'?: {
              
              };
              '4229'?: {
              
              };
              '4230'?: {
              
              };
              '4231'?: {
              
              };
              '4232'?: {
              
              };
              '4233'?: {
              
              };
              '4234'?: {
              
              };
              '4235'?: {
              
              };
              '4236'?: {
              
              };
              '4237'?: {
              
              };
              '4238'?: {
              
              };
              '4239'?: {
              
              };
              '4240'?: {
              
              };
              '4241'?: {
              
              };
              '4242'?: {
              
              };
              '4243'?: {
              
              };
              '4244'?: {
              
              };
              '4245'?: {
              
              };
              '4246'?: {
              
              };
              '4247'?: {
              
              };
              '4248'?: {
              
              };
              '4249'?: {
              
              };
              '4250'?: {
              
              };
              '4251'?: {
              
              };
              '4252'?: {
              
              };
              '4253'?: {
              
              };
              '4254'?: {
              
              };
              '4255'?: {
              
              };
              '4256'?: {
              
              };
              '4257'?: {
              
              };
              '4258'?: {
              
              };
              '4259'?: {
              
              };
              '4260'?: {
              
              };
              '4261'?: {
              
              };
              '4262'?: {
              
              };
              '4263'?: {
              
              };
              '4264'?: {
              
              };
              '4265'?: {
              
              };
              '4266'?: {
              
              };
              '4267'?: {
              
              };
              '4268'?: {
              
              };
              '4269'?: {
              
              };
              '4270'?: {
              
              };
              '4271'?: {
              
              };
              '4272'?: {
              
              };
              '4273'?: {
              
              };
              '4274'?: {
              
              };
              '4275'?: {
              
              };
              '4276'?: {
              
              };
              '4277'?: {
              
              };
              '4278'?: {
              
              };
              '4279'?: {
              
              };
              '4280'?: {
              
              };
              '4281'?: {
              
              };
              '4282'?: {
              
              };
              '4283'?: {
              
              };
              '4284'?: {
              
              };
              '4285'?: {
              
              };
              '4286'?: {
              
              };
              '4287'?: {
              
              };
              '4288'?: {
              
              };
              '4289'?: {
              
              };
              '4290'?: {
              
              };
              '4291'?: {
              
              };
              '4292'?: {
              
              };
              '4293'?: {
              
              };
              '4294'?: {
              
              };
              '4295'?: {
              
              };
              '4296'?: {
              
              };
              '4297'?: {
              
              };
              '4298'?: {
              
              };
              '4299'?: {
              
              };
              '4300'?: {
              
              };
              '4301'?: {
              
              };
              '4302'?: {
              
              };
              '4303'?: {
              
              };
              '4304'?: {
              
              };
              '4305'?: {
              
              };
              '4306'?: {
              
              };
              '4307'?: {
              
              };
              '4308'?: {
              
              };
              '4309'?: {
              
              };
              '4310'?: {
              
              };
              '4311'?: {
              
              };
              '4312'?: {
              
              };
              '4313'?: {
              
              };
              '4314'?: {
              
              };
              '4315'?: {
              
              };
              '4316'?: {
              
              };
              '4317'?: {
              
              };
              '4318'?: {
              
              };
              '4319'?: {
              
              };
              '4320'?: {
              
              };
              '4321'?: {
              
              };
              '4322'?: {
              
              };
              '4323'?: {
              
              };
              '4324'?: {
              
              };
              '4325'?: {
              
              };
              '4326'?: {
              
              };
              '4327'?: {
              
              };
              '4328'?: {
              
              };
              '4329'?: {
              
              };
              '4330'?: {
              
              };
              '4331'?: {
              
              };
              '4332'?: {
              
              };
              '4333'?: {
              
              };
              '4334'?: {
              
              };
              '4335'?: {
              
              };
              '4336'?: {
              
              };
              '4337'?: {
              
              };
              '4338'?: {
              
              };
              '4339'?: {
              
              };
              '4340'?: {
              
              };
              '4341'?: {
              
              };
              '4342'?: {
              
              };
              '4343'?: {
              
              };
              '4344'?: {
              
              };
              '4345'?: {
              
              };
              '4346'?: {
              
              };
              '4347'?: {
              
              };
              '4348'?: {
              
              };
              '4349'?: {
              
              };
              '4350'?: {
              
              };
              '4351'?: {
              
              };
              '4352'?: {
              
              };
              '4353'?: {
              
              };
              '4354'?: {
              
              };
              '4355'?: {
              
              };
              '4356'?: {
              
              };
              '4357'?: {
              
              };
              '4358'?: {
              
              };
              '4359'?: {
              
              };
              '4360'?: {
              
              };
              '4361'?: {
              
              };
              '4362'?: {
              
              };
              '4363'?: {
              
              };
              '4364'?: {
              
              };
              '4365'?: {
              
              };
              '4366'?: {
              
              };
              '4367'?: {
              
              };
              '4368'?: {
              
              };
              '4369'?: {
              
              };
              '4370'?: {
              
              };
              '4371'?: {
              
              };
              '4372'?: {
              
              };
              '4373'?: {
              
              };
              '4374'?: {
              
              };
              '4375'?: {
              
              };
              '4376'?: {
              
              };
              '4377'?: {
              
              };
              '4378'?: {
              
              };
              '4379'?: {
              
              };
              '4380'?: {
              
              };
              '4381'?: {
              
              };
              '4382'?: {
              
              };
              '4383'?: {
              
              };
              '4384'?: {
              
              };
              '4385'?: {
              
              };
              '4386'?: {
              
              };
              '4387'?: {
              
              };
              '4388'?: {
              
              };
              '4389'?: {
              
              };
              '4390'?: {
              
              };
              '4391'?: {
              
              };
              '4392'?: {
              
              };
              '4393'?: {
              
              };
              '4394'?: {
              
              };
              '4395'?: {
              
              };
              '4396'?: {
              
              };
              '4397'?: {
              
              };
              '4398'?: {
              
              };
              '4399'?: {
              
              };
              '4400'?: {
              
              };
              '4401'?: {
              
              };
              '4402'?: {
              
              };
              '4403'?: {
              
              };
              '4404'?: {
              
              };
              '4405'?: {
              
              };
              '4406'?: {
              
              };
              '4407'?: {
              
              };
              '4408'?: {
              
              };
              '4409'?: {
              
              };
              '4410'?: {
              
              };
              '4411'?: {
              
              };
              '4412'?: {
              
              };
              '4413'?: {
              
              };
              '4414'?: {
              
              };
              '4415'?: {
              
              };
              '4416'?: {
              
              };
              '4417'?: {
              
              };
              '4418'?: {
              
              };
              '4419'?: {
              
              };
              '4420'?: {
              
              };
              '4421'?: {
              
              };
              '4422'?: {
              
              };
              '4423'?: {
              
              };
              '4424'?: {
              
              };
              '4425'?: {
              
              };
              '4426'?: {
              
              };
              '4427'?: {
              
              };
              '4428'?: {
              
              };
              '4429'?: {
              
              };
              '4430'?: {
              
              };
              '4431'?: {
              
              };
              '4432'?: {
              
              };
              '4433'?: {
              
              };
              '4434'?: {
              
              };
              '4435'?: {
              
              };
              '4436'?: {
              
              };
              '4437'?: {
              
              };
              '4438'?: {
              
              };
              '4439'?: {
              
              };
              '4440'?: {
              
              };
              '4441'?: {
              
              };
              '4442'?: {
              
              };
              '4443'?: {
              
              };
              '4444'?: {
              
              };
              '4445'?: {
              
              };
              '4446'?: {
              
              };
              '4447'?: {
              
              };
              '4448'?: {
              
              };
              '4449'?: {
              
              };
              '4450'?: {
              
              };
              '4451'?: {
              
              };
              '4452'?: {
              
              };
              '4453'?: {
              
              };
              '4454'?: {
              
              };
              '4455'?: {
              
              };
              '4456'?: {
              
              };
              '4457'?: {
              
              };
              '4458'?: {
              
              };
              '4459'?: {
              
              };
              '4460'?: {
              
              };
              '4461'?: {
              
              };
              '4462'?: {
              
              };
              '4463'?: {
              
              };
              '4464'?: {
              
              };
              '4465'?: {
              
              };
              '4466'?: {
              
              };
              '4467'?: {
              
              };
              '4468'?: {
              
              };
              '4469'?: {
              
              };
              '4470'?: {
              
              };
              '4471'?: {
              
              };
              '4472'?: {
              
              };
              '4473'?: {
              
              };
              '4474'?: {
              
              };
              '4475'?: {
              
              };
              '4476'?: {
              
              };
              '4477'?: {
              
              };
              '4478'?: {
              
              };
              '4479'?: {
              
              };
              '4480'?: {
              
              };
              '4481'?: {
              
              };
              '4482'?: {
              
              };
              '4483'?: {
              
              };
              '4484'?: {
              
              };
              '4485'?: {
              
              };
              '4486'?: {
              
              };
              '4487'?: {
              
              };
              '4488'?: {
              
              };
              '4489'?: {
              
              };
              '4490'?: {
              
              };
              '4491'?: {
              
              };
              '4492'?: {
              
              };
              '4493'?: {
              
              };
              '4494'?: {
              
              };
              '4495'?: {
              
              };
              '4496'?: {
              
              };
              '4497'?: {
              
              };
              '4498'?: {
              
              };
              '4499'?: {
              
              };
              '4500'?: {
              
              };
              '4501'?: {
              
              };
              '4502'?: {
              
              };
              '4503'?: {
              
              };
              '4504'?: {
              
              };
              '4505'?: {
              
              };
              '4506'?: {
              
              };
              '4507'?: {
              
              };
              '4508'?: {
              
              };
              '4509'?: {
              
              };
              '4510'?: {
              
              };
              '4511'?: {
              
              };
              '4512'?: {
              
              };
              '4513'?: {
              
              };
              '4514'?: {
              
              };
              '4515'?: {
              
              };
              '4516'?: {
              
              };
              '4517'?: {
              
              };
              '4518'?: {
              
              };
              '4519'?: {
              
              };
              '4520'?: {
              
              };
              '4521'?: {
              
              };
              '4522'?: {
              
              };
              '4523'?: {
              
              };
              '4524'?: {
              
              };
              '4525'?: {
              
              };
              '4526'?: {
              
              };
              '4527'?: {
              
              };
              '4528'?: {
              
              };
              '4529'?: {
              
              };
              '4530'?: {
              
              };
              '4531'?: {
              
              };
              '4532'?: {
              
              };
              '4533'?: {
              
              };
              '4534'?: {
              
              };
              '4535'?: {
              
              };
              '4536'?: {
              
              };
              '4537'?: {
              
              };
              '4538'?: {
              
              };
              '4539'?: {
              
              };
              '4540'?: {
              
              };
              '4541'?: {
              
              };
              '4542'?: {
              
              };
              '4543'?: {
              
              };
              '4544'?: {
              
              };
              '4545'?: {
              
              };
              '4546'?: {
              
              };
              '4547'?: {
              
              };
              '4548'?: {
              
              };
              '4549'?: {
              
              };
              '4550'?: {
              
              };
              '4551'?: {
              
              };
              '4552'?: {
              
              };
              '4553'?: {
              
              };
              '4554'?: {
              
              };
              '4555'?: {
              
              };
              '4556'?: {
              
              };
              '4557'?: {
              
              };
              '4558'?: {
              
              };
              '4559'?: {
              
              };
              '4560'?: {
              
              };
              '4561'?: {
              
              };
              '4562'?: {
              
              };
              '4563'?: {
              
              };
              '4564'?: {
              
              };
              '4565'?: {
              
              };
              '4566'?: {
              
              };
              '4567'?: {
              
              };
              '4568'?: {
              
              };
              '4569'?: {
              
              };
              '4570'?: {
              
              };
              '4571'?: {
              
              };
              '4572'?: {
              
              };
              '4573'?: {
              
              };
              '4574'?: {
              
              };
              '4575'?: {
              
              };
              '4576'?: {
              
              };
              '4577'?: {
              
              };
              '4578'?: {
              
              };
              '4579'?: {
              
              };
              '4580'?: {
              
              };
              '4581'?: {
              
              };
              '4582'?: {
              
              };
              '4583'?: {
              
              };
              '4584'?: {
              
              };
              '4585'?: {
              
              };
              '4586'?: {
              
              };
              '4587'?: {
              
              };
              '4588'?: {
              
              };
              '4589'?: {
              
              };
              '4590'?: {
              
              };
              '4591'?: {
              
              };
              '4592'?: {
              
              };
              '4593'?: {
              
              };
              '4594'?: {
              
              };
              '4595'?: {
              
              };
              '4596'?: {
              
              };
              '4597'?: {
              
              };
              '4598'?: {
              
              };
              '4599'?: {
              
              };
              '4600'?: {
              
              };
              '4601'?: {
              
              };
              '4602'?: {
              
              };
              '4603'?: {
              
              };
              '4604'?: {
              
              };
              '4605'?: {
              
              };
              '4606'?: {
              
              };
              '4607'?: {
              
              };
              '4608'?: {
              
              };
              '4609'?: {
              
              };
              '4610'?: {
              
              };
              '4611'?: {
              
              };
              '4612'?: {
              
              };
              '4613'?: {
              
              };
              '4614'?: {
              
              };
              '4615'?: {
              
              };
              '4616'?: {
              
              };
              '4617'?: {
              
              };
              '4618'?: {
              
              };
              '4619'?: {
              
              };
              '4620'?: {
              
              };
              '4621'?: {
              
              };
              '4622'?: {
              
              };
              '4623'?: {
              
              };
              '4624'?: {
              
              };
              '4625'?: {
              
              };
              '4626'?: {
              
              };
              '4627'?: {
              
              };
              '4628'?: {
              
              };
              '4629'?: {
              
              };
              '4630'?: {
              
              };
              '4631'?: {
              
              };
              '4632'?: {
              
              };
              '4633'?: {
              
              };
              '4634'?: {
              
              };
              '4635'?: {
              
              };
              '4636'?: {
              
              };
              '4637'?: {
              
              };
              '4638'?: {
              
              };
              '4639'?: {
              
              };
              '4640'?: {
              
              };
              '4641'?: {
              
              };
              '4642'?: {
              
              };
              '4643'?: {
              
              };
              '4644'?: {
              
              };
              '4645'?: {
              
              };
              '4646'?: {
              
              };
              '4647'?: {
              
              };
              '4648'?: {
              
              };
              '4649'?: {
              
              };
              '4650'?: {
              
              };
              '4651'?: {
              
              };
              '4652'?: {
              
              };
              '4653'?: {
              
              };
              '4654'?: {
              
              };
              '4655'?: {
              
              };
              '4656'?: {
              
              };
              '4657'?: {
              
              };
              '4658'?: {
              
              };
              '4659'?: {
              
              };
              '4660'?: {
              
              };
              '4661'?: {
              
              };
              '4662'?: {
              
              };
              '4663'?: {
              
              };
              '4664'?: {
              
              };
              '4665'?: {
              
              };
              '4666'?: {
              
              };
              '4667'?: {
              
              };
              '4668'?: {
              
              };
              '4669'?: {
              
              };
              '4670'?: {
              
              };
              '4671'?: {
              
              };
              '4672'?: {
              
              };
              '4673'?: {
              
              };
              '4674'?: {
              
              };
              '4675'?: {
              
              };
              '4676'?: {
              
              };
              '4677'?: {
              
              };
              '4678'?: {
              
              };
              '4679'?: {
              
              };
              '4680'?: {
              
              };
              '4681'?: {
              
              };
              '4682'?: {
              
              };
              '4683'?: {
              
              };
              '4684'?: {
              
              };
              '4685'?: {
              
              };
              '4686'?: {
              
              };
              '4687'?: {
              
              };
              '4688'?: {
              
              };
              '4689'?: {
              
              };
              '4690'?: {
              
              };
              '4691'?: {
              
              };
              '4692'?: {
              
              };
              '4693'?: {
              
              };
              '4694'?: {
              
              };
              '4695'?: {
              
              };
              '4696'?: {
              
              };
              '4697'?: {
              
              };
              '4698'?: {
              
              };
              '4699'?: {
              
              };
              '4700'?: {
              
              };
              '4701'?: {
              
              };
              '4702'?: {
              
              };
              '4703'?: {
              
              };
              '4704'?: {
              
              };
              '4705'?: {
              
              };
              '4706'?: {
              
              };
              '4707'?: {
              
              };
              '4708'?: {
              
              };
              '4709'?: {
              
              };
              '4710'?: {
              
              };
              '4711'?: {
              
              };
              '4712'?: {
              
              };
              '4713'?: {
              
              };
              '4714'?: {
              
              };
              '4715'?: {
              
              };
              '4716'?: {
              
              };
              '4717'?: {
              
              };
              '4718'?: {
              
              };
              '4719'?: {
              
              };
              '4720'?: {
              
              };
              '4721'?: {
              
              };
              '4722'?: {
              
              };
              '4723'?: {
              
              };
              '4724'?: {
              
              };
              '4725'?: {
              
              };
              '4726'?: {
              
              };
              '4727'?: {
              
              };
              '4728'?: {
              
              };
              '4729'?: {
              
              };
              '4730'?: {
              
              };
              '4731'?: {
              
              };
              '4732'?: {
              
              };
              '4733'?: {
              
              };
              '4734'?: {
              
              };
              '4735'?: {
              
              };
              '4736'?: {
              
              };
              '4737'?: {
              
              };
              '4738'?: {
              
              };
              '4739'?: {
              
              };
              '4740'?: {
              
              };
              '4741'?: {
              
              };
              '4742'?: {
              
              };
              '4743'?: {
              
              };
              '4744'?: {
              
              };
              '4745'?: {
              
              };
              '4746'?: {
              
              };
              '4747'?: {
              
              };
              '4748'?: {
              
              };
              '4749'?: {
              
              };
              '4750'?: {
              
              };
              '4751'?: {
              
              };
              '4752'?: {
              
              };
              '4753'?: {
              
              };
              '4754'?: {
              
              };
              '4755'?: {
              
              };
              '4756'?: {
              
              };
              '4757'?: {
              
              };
              '4758'?: {
              
              };
              '4759'?: {
              
              };
              '4760'?: {
              
              };
              '4761'?: {
              
              };
              '4762'?: {
              
              };
              '4763'?: {
              
              };
              '4764'?: {
              
              };
              '4765'?: {
              
              };
              '4766'?: {
              
              };
              '4767'?: {
              
              };
              '4768'?: {
              
              };
              '4769'?: {
              
              };
              '4770'?: {
              
              };
              '4771'?: {
              
              };
              '4772'?: {
              
              };
              '4773'?: {
              
              };
              '4774'?: {
              
              };
              '4775'?: {
              
              };
              '4776'?: {
              
              };
              '4777'?: {
              
              };
              '4778'?: {
              
              };
              '4779'?: {
              
              };
              '4780'?: {
              
              };
              '4781'?: {
              
              };
              '4782'?: {
              
              };
              '4783'?: {
              
              };
              '4784'?: {
              
              };
              '4785'?: {
              
              };
              '4786'?: {
              
              };
              '4787'?: {
              
              };
              '4788'?: {
              
              };
              '4789'?: {
              
              };
              '4790'?: {
              
              };
              '4791'?: {
              
              };
              '4792'?: {
              
              };
              '4793'?: {
              
              };
              '4794'?: {
              
              };
              '4795'?: {
              
              };
              '4796'?: {
              
              };
              '4797'?: {
              
              };
              '4798'?: {
              
              };
              '4799'?: {
              
              };
              '4800'?: {
              
              };
              '4801'?: {
              
              };
              '4802'?: {
              
              };
              '4803'?: {
              
              };
              '4804'?: {
              
              };
              '4805'?: {
              
              };
              '4806'?: {
              
              };
              '4807'?: {
              
              };
              '4808'?: {
              
              };
              '4809'?: {
              
              };
              '4810'?: {
              
              };
              '4811'?: {
              
              };
              '4812'?: {
              
              };
              '4813'?: {
              
              };
              '4814'?: {
              
              };
              '4815'?: {
              
              };
              '4816'?: {
              
              };
              '4817'?: {
              
              };
              '4818'?: {
              
              };
              '4819'?: {
              
              };
              '4820'?: {
              
              };
              '4821'?: {
              
              };
              '4822'?: {
              
              };
              '4823'?: {
              
              };
              '4824'?: {
              
              };
              '4825'?: {
              
              };
              '4826'?: {
              
              };
              '4827'?: {
              
              };
              '4828'?: {
              
              };
              '4829'?: {
              
              };
              '4830'?: {
              
              };
              '4831'?: {
              
              };
              '4832'?: {
              
              };
              '4833'?: {
              
              };
              '4834'?: {
              
              };
              '4835'?: {
              
              };
              '4836'?: {
              
              };
              '4837'?: {
              
              };
              '4838'?: {
              
              };
              '4839'?: {
              
              };
              '4840'?: {
              
              };
              '4841'?: {
              
              };
              '4842'?: {
              
              };
              '4843'?: {
              
              };
              '4844'?: {
              
              };
              '4845'?: {
              
              };
              '4846'?: {
              
              };
              '4847'?: {
              
              };
              '4848'?: {
              
              };
              '4849'?: {
              
              };
              '4850'?: {
              
              };
              '4851'?: {
              
              };
              '4852'?: {
              
              };
              '4853'?: {
              
              };
              '4854'?: {
              
              };
              '4855'?: {
              
              };
              '4856'?: {
              
              };
              '4857'?: {
              
              };
              '4858'?: {
              
              };
              '4859'?: {
              
              };
              '4860'?: {
              
              };
              '4861'?: {
              
              };
              '4862'?: {
              
              };
              '4863'?: {
              
              };
              '4864'?: {
              
              };
              '4865'?: {
              
              };
              '4866'?: {
              
              };
              '4867'?: {
              
              };
              '4868'?: {
              
              };
              '4869'?: {
              
              };
              '4870'?: {
              
              };
              '4871'?: {
              
              };
              '4872'?: {
              
              };
              '4873'?: {
              
              };
              '4874'?: {
              
              };
              '4875'?: {
              
              };
              '4876'?: {
              
              };
              '4877'?: {
              
              };
              '4878'?: {
              
              };
              '4879'?: {
              
              };
              '4880'?: {
              
              };
              '4881'?: {
              
              };
              '4882'?: {
              
              };
              '4883'?: {
              
              };
              '4884'?: {
              
              };
              '4885'?: {
              
              };
              '4886'?: {
              
              };
              '4887'?: {
              
              };
              '4888'?: {
              
              };
              '4889'?: {
              
              };
              '4890'?: {
              
              };
              '4891'?: {
              
              };
              '4892'?: {
              
              };
              '4893'?: {
              
              };
              '4894'?: {
              
              };
              '4895'?: {
              
              };
              '4896'?: {
              
              };
              '4897'?: {
              
              };
              '4898'?: {
              
              };
              '4899'?: {
              
              };
              '4900'?: {
              
              };
              '4901'?: {
              
              };
              '4902'?: {
              
              };
              '4903'?: {
              
              };
              '4904'?: {
              
              };
              '4905'?: {
              
              };
              '4906'?: {
              
              };
              '4907'?: {
              
              };
              '4908'?: {
              
              };
              '4909'?: {
              
              };
              '4910'?: {
              
              };
              '4911'?: {
              
              };
              '4912'?: {
              
              };
              '4913'?: {
              
              };
              '4914'?: {
              
              };
              '4915'?: {
              
              };
              '4916'?: {
              
              };
              '4917'?: {
              
              };
              '4918'?: {
              
              };
              '4919'?: {
              
              };
              '4920'?: {
              
              };
              '4921'?: {
              
              };
              '4922'?: {
              
              };
              '4923'?: {
              
              };
              '4924'?: {
              
              };
              '4925'?: {
              
              };
              '4926'?: {
              
              };
              '4927'?: {
              
              };
              '4928'?: {
              
              };
              '4929'?: {
              
              };
              '4930'?: {
              
              };
              '4931'?: {
              
              };
              '4932'?: {
              
              };
              '4933'?: {
              
              };
              '4934'?: {
              
              };
              '4935'?: {
              
              };
              '4936'?: {
              
              };
              '4937'?: {
              
              };
              '4938'?: {
              
              };
              '4939'?: {
              
              };
              '4940'?: {
              
              };
              '4941'?: {
              
              };
              '4942'?: {
              
              };
              '4943'?: {
              
              };
              '4944'?: {
              
              };
              '4945'?: {
              
              };
              '4946'?: {
              
              };
              '4947'?: {
              
              };
              '4948'?: {
              
              };
              '4949'?: {
              
              };
              '4950'?: {
              
              };
              '4951'?: {
              
              };
              '4952'?: {
              
              };
              '4953'?: {
              
              };
              '4954'?: {
              
              };
              '4955'?: {
              
              };
              '4956'?: {
              
              };
              '4957'?: {
              
              };
              '4958'?: {
              
              };
              '4959'?: {
              
              };
              '4960'?: {
              
              };
              '4961'?: {
              
              };
              '4962'?: {
              
              };
              '4963'?: {
              
              };
              '4964'?: {
              
              };
              '4965'?: {
              
              };
              '4966'?: {
              
              };
              '4967'?: {
              
              };
              '4968'?: {
              
              };
              '4969'?: {
              
              };
              '4970'?: {
              
              };
              '4971'?: {
              
              };
              '4972'?: {
              
              };
              '4973'?: {
              
              };
              '4974'?: {
              
              };
              '4975'?: {
              
              };
              '4976'?: {
              
              };
              '4977'?: {
              
              };
              '4978'?: {
              
              };
              '4979'?: {
              
              };
              '4980'?: {
              
              };
              '4981'?: {
              
              };
              '4982'?: {
              
              };
              '4983'?: {
              
              };
              '4984'?: {
              
              };
              '4985'?: {
              
              };
            }[];
          };
          verify_flags: number;
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFY_PROC';
      // Denotes the beginning of the nestable async flow event CERT_VERIFY_PROC.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'CERT_VERIFY_PROC';
      // Denotes a step into the nestable async flow event CERT_VERIFY_PROC.
      ph: 'e';
      scope: string;
    }
  }

  namespace ChannelMojo {
    type OnMessageReceived = 
      TraceEvent.ChannelMojo.OnMessageReceived.X;
  
    namespace OnMessageReceived {
      interface X extends TraceEvent.Base {
        args: {
          class: number;
          line: number;
        };
        // Duration.
        dur: number;
        name: 'ChannelMojo::OnMessageReceived';
        // Denotes the end of the event OnMessageReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CheckerImageTracker {
    type ShouldCheckerImage = 
      TraceEvent.CheckerImageTracker.ShouldCheckerImage.X;
  
    namespace ShouldCheckerImage {
      interface X extends TraceEvent.Base {
        args: {
          image_id: number;
        };
        // Duration.
        dur: number;
        name: 'CheckerImageTracker::ShouldCheckerImage';
        // Denotes the end of the event ShouldCheckerImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CheckUrl {
    interface F extends TraceEvent.Base {
      args: {
        url: string;
      };
      id2: {
        local: string;
      };
      name: 'CheckUrl';
      // Denotes the ending of the async event CheckUrl.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
        url: string;
      };
      id2: {
        local: string;
      };
      name: 'CheckUrl';
      // Denotes the beginning of the async event CheckUrl.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ChildThreadImpl {
    type Init = 
      TraceEvent.ChildThreadImpl.Init.X;
  
    namespace Init {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ChildThreadImpl::Init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Chrome {
    namespace Mojom {
      type CacheStatsRecorder = 
        TraceEvent.Chrome.Mojom.CacheStatsRecorder.X;
    
      type ChromeRenderFrame = 
        TraceEvent.Chrome.Mojom.ChromeRenderFrame.X;
    
      type NetworkDiagnosticsClient = 
        TraceEvent.Chrome.Mojom.NetworkDiagnosticsClient.X;
    
      type RendererConfiguration = 
        TraceEvent.Chrome.Mojom.RendererConfiguration.X;
    
      namespace CacheStatsRecorder {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'chrome.mojom.CacheStatsRecorder';
          // Denotes the end of the event CacheStatsRecorder.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ChromeRenderFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'chrome.mojom.ChromeRenderFrame';
          // Denotes the end of the event ChromeRenderFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkDiagnosticsClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'chrome.mojom.NetworkDiagnosticsClient';
          // Denotes the end of the event NetworkDiagnosticsClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RendererConfiguration {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'chrome.mojom.RendererConfiguration';
          // Denotes the end of the event RendererConfiguration.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Chromerendererextensionsextension_localization_peer {
    type Cc = 
      TraceEvent.Chromerendererextensionsextension_localization_peer.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../chrome/renderer/extensions/extension_localization_peer.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ChromeRenderFrameObserver {
    type CapturePageText = 
      TraceEvent.ChromeRenderFrameObserver.CapturePageText.X;
  
    namespace CapturePageText {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ChromeRenderFrameObserver::CapturePageText';
        // Denotes the end of the event CapturePageText.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ClassicPendingScript {
    type GetSource = 
      TraceEvent.ClassicPendingScript.GetSource.X;
  
    namespace GetSource {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ClassicPendingScript::GetSource';
        // Denotes the end of the event GetSource.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ClassifyNavigation {
    interface X extends TraceEvent.Base {
      args: {
        return: {
          reason: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ClassifyNavigation';
      // Denotes the end of the event ClassifyNavigation.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ClientDiscardableSharedMemoryManager {
    type AllocateLockedDiscardableSharedMemory = 
      TraceEvent.ClientDiscardableSharedMemoryManager.AllocateLockedDiscardableSharedMemory.X;
  
    namespace AllocateLockedDiscardableSharedMemory {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
          size: number;
        };
        // Duration.
        dur: number;
        name: 'ClientDiscardableSharedMemoryManager::AllocateLockedDiscardableSharedMemory';
        // Denotes the end of the event AllocateLockedDiscardableSharedMemory.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferHelper {
    type Finish = 
      TraceEvent.CommandBufferHelper.Finish.X;
  
    type Flush = 
      TraceEvent.CommandBufferHelper.Flush.X;
  
    namespace Finish {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferHelper::Finish';
        // Denotes the end of the event Finish.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Flush {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferHelper::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferProxyImpl {
    type Flush = 
      TraceEvent.CommandBufferProxyImpl.Flush.X;
  
    type Initialize = 
      TraceEvent.CommandBufferProxyImpl.Initialize.X;
  
    type OrderingBarrier = 
      TraceEvent.CommandBufferProxyImpl.OrderingBarrier.X;
  
    type WaitForGetOffset = 
      TraceEvent.CommandBufferProxyImpl.WaitForGetOffset.X;
  
    namespace Flush {
      interface X extends TraceEvent.Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OrderingBarrier {
      interface X extends TraceEvent.Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::OrderingBarrier';
        // Denotes the end of the event OrderingBarrier.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitForGetOffset {
      interface X extends TraceEvent.Base {
        args: {
          end: number;
          start: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::WaitForGetOffset';
        // Denotes the end of the event WaitForGetOffset.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferService {
    type Paused = 
      TraceEvent.CommandBufferService.Paused.C;
  
    type PutChanged = 
      TraceEvent.CommandBufferService.PutChanged.B |
      TraceEvent.CommandBufferService.PutChanged.X;
  
    namespace Paused {
      interface C extends TraceEvent.Base {
        args: {
          value: number;
        };
        id2: {
          local: string;
        };
        name: 'CommandBufferService::Paused';
        // Denotes a counter for the event Paused.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PutChanged {
      interface B extends TraceEvent.Base {
        args: {
          handler: string;
        };
        name: 'CommandBufferService:PutChanged';
        // Denotes the beginning of the event PutChanged.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          handler: string;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferService:PutChanged';
        // Denotes the end of the event PutChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferStub {
    type OnAsyncFlush = 
      TraceEvent.CommandBufferStub.OnAsyncFlush.X;
  
    type OnDestroyTransferBuffer = 
      TraceEvent.CommandBufferStub.OnDestroyTransferBuffer.X;
  
    type OnRegisterTransferBuffer = 
      TraceEvent.CommandBufferStub.OnRegisterTransferBuffer.X;
  
    type OnSetGetBuffer = 
      TraceEvent.CommandBufferStub.OnSetGetBuffer.X;
  
    type OnWaitForGetOffsetInRange = 
      TraceEvent.CommandBufferStub.OnWaitForGetOffsetInRange.X;
  
    namespace OnAsyncFlush {
      interface X extends TraceEvent.Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnAsyncFlush';
        // Denotes the end of the event OnAsyncFlush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDestroyTransferBuffer {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnDestroyTransferBuffer';
        // Denotes the end of the event OnDestroyTransferBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRegisterTransferBuffer {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnRegisterTransferBuffer';
        // Denotes the end of the event OnRegisterTransferBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnSetGetBuffer {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnSetGetBuffer';
        // Denotes the end of the event OnSetGetBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnWaitForGetOffsetInRange {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnWaitForGetOffsetInRange';
        // Denotes the end of the event OnWaitForGetOffsetInRange.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandDispatcher {
    type PerformKeyEquivalent = 
      TraceEvent.CommandDispatcher.PerformKeyEquivalent.X;
  
    type PreSendEvent = 
      TraceEvent.CommandDispatcher.PreSendEvent.X;
  
    type RedispatchKeyEvent = 
      TraceEvent.CommandDispatcher.RedispatchKeyEvent.X;
  
    namespace PerformKeyEquivalent {
      interface X extends TraceEvent.Base {
        args: {
          'is keyWin': boolean;
          'window num': number;
        };
        // Duration.
        dur: number;
        name: 'CommandDispatcher::performKeyEquivalent';
        // Denotes the end of the event PerformKeyEquivalent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PreSendEvent {
      interface X extends TraceEvent.Base {
        args: {
          'event window num': number;
          'window num': number;
        };
        // Duration.
        dur: number;
        name: 'CommandDispatcher::preSendEvent';
        // Denotes the end of the event PreSendEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RedispatchKeyEvent {
      interface X extends TraceEvent.Base {
        args: {
          'event window num': number;
          'window num': number;
        };
        // Duration.
        dur: number;
        name: 'CommandDispatcher::redispatchKeyEvent';
        // Denotes the end of the event RedispatchKeyEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Commit {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Commit';
      // Denotes the beginning of the nestable async flow event Commit.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Commit';
      // Denotes a step into the nestable async flow event Commit.
      ph: 'e';
      scope?: string;
    }
  }

  namespace CommitLoad {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          isOutermostMainFrame?: boolean;
          name?: string;
          nodeId?: number;
          page: string;
          parent?: string;
          url?: string;
        };
      };
      // Duration.
      dur: number;
      name: 'CommitLoad';
      // Denotes the end of the event CommitLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CommitNavigationEnd {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'commitNavigationEnd';
      // Denotes a mark of the event CommitNavigationEnd.
      ph: 'R';
      s: string;
    }
  }

  namespace CommitPendingTreesToCA {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CommitPendingTreesToCA';
      // Denotes the end of the event CommitPendingTreesToCA.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Componentscast_channelmojo_data_pump {
    type Cc = 
      TraceEvent.Componentscast_channelmojo_data_pump.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../components/cast_channel/mojo_data_pump.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CompositeLayers {
    interface B extends TraceEvent.Base {
      args: {
        layerTreeId: number;
      };
      name: 'CompositeLayers';
      // Denotes the beginning of the event CompositeLayers.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
      
      };
      name: 'CompositeLayers';
      // Denotes the ending of the event CompositeLayers.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        frameSeqId: number;
        layerTreeId: number;
      };
      // Duration.
      dur: number;
      name: 'CompositeLayers';
      // Denotes the end of the event CompositeLayers.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CompositingInputsUpdater {
    type Update = 
      TraceEvent.CompositingInputsUpdater.Update.X;
  
    namespace Update {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositingInputsUpdater::update';
        // Denotes the end of the event Update.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CompositingLayerAssigner {
    type Assign = 
      TraceEvent.CompositingLayerAssigner.Assign.X;
  
    namespace Assign {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositingLayerAssigner::assign';
        // Denotes the end of the event Assign.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CompositingRequirementsUpdater {
    type UpdateRecursive = 
      TraceEvent.CompositingRequirementsUpdater.UpdateRecursive.X;
  
    namespace UpdateRecursive {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositingRequirementsUpdater::updateRecursive';
        // Denotes the end of the event UpdateRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Compositor_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'compositor_tq';
      // Denotes the end of the event Compositor_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CompositorTimingHistory {
    type ClearHistory = 
      TraceEvent.CompositorTimingHistory.ClearHistory.X;
  
    namespace ClearHistory {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositorTimingHistory::ClearHistory';
        // Denotes the end of the event ClearHistory.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CONNECT_JOB_SET_SOCKET {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'CONNECT_JOB_SET_SOCKET';
      // Denotes the ending of the nestable async flow event CONNECT_JOB_SET_SOCKET.
      ph: 'n';
      scope: string;
    }
  }

  namespace CONNECT_JOB {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'CONNECT_JOB';
      // Denotes the beginning of the nestable async flow event CONNECT_JOB.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'CONNECT_JOB';
      // Denotes a step into the nestable async flow event CONNECT_JOB.
      ph: 'e';
      scope: string;
    }
  }

  namespace ConsoleMessage {
    type Error = 
      TraceEvent.ConsoleMessage.Error.I;
  
    namespace Error {
      interface I extends TraceEvent.Base {
        args: {
          message?: {
            content: string;
            url: string;
          };
          source: string;
        };
        name: 'ConsoleMessage::Error';
        // Denotes an event Error. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Container_0B1564F57920B21667889FA7471D4D85_0 {
    type EmbedRequest = 
      TraceEvent.Container_0B1564F57920B21667889FA7471D4D85_0.EmbedRequest.R;
  
    type PlayerReady = 
      TraceEvent.Container_0B1564F57920B21667889FA7471D4D85_0.PlayerReady.R;
  
    namespace EmbedRequest {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: 'container_0B1564F5-7920-B216-6788-9FA7471D4D85_0::embedRequest';
        // Denotes a mark of the event EmbedRequest.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PlayerReady {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime: number;
          };
        };
        name: 'container_0B1564F5-7920-B216-6788-9FA7471D4D85_0::playerReady';
        // Denotes a mark of the event PlayerReady.
        ph: 'R';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Content_settings {
    namespace Mojom {
      type ContentSettingsManager = 
        TraceEvent.Content_settings.Mojom.ContentSettingsManager.X;
    
      namespace ContentSettingsManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content_settings.mojom.ContentSettingsManager';
          // Denotes the end of the event ContentSettingsManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Content {
    namespace Mojom {
      type AgentSchedulingGroup = 
        TraceEvent.Content.Mojom.AgentSchedulingGroup.X;
    
      type ChildHistogramFetcherFactory = 
        TraceEvent.Content.Mojom.ChildHistogramFetcherFactory.X;
    
      type ChildProcess = 
        TraceEvent.Content.Mojom.ChildProcess.X;
    
      type ChildProcessHost = 
        TraceEvent.Content.Mojom.ChildProcessHost.X;
    
      type Frame = 
        TraceEvent.Content.Mojom.Frame.X;
    
      type FrameFactory = 
        TraceEvent.Content.Mojom.FrameFactory.X;
    
      type FrameHost = 
        TraceEvent.Content.Mojom.FrameHost.X;
    
      type FrameSinkProvider = 
        TraceEvent.Content.Mojom.FrameSinkProvider.X;
    
      type NavigationClient = 
        TraceEvent.Content.Mojom.NavigationClient.X;
    
      type Renderer = 
        TraceEvent.Content.Mojom.Renderer.X;
    
      type RendererHost = 
        TraceEvent.Content.Mojom.RendererHost.X;
    
      type RendererVariationsConfiguration = 
        TraceEvent.Content.Mojom.RendererVariationsConfiguration.X;
    
      type RouteProvider = 
        TraceEvent.Content.Mojom.RouteProvider.X;
    
      type SandboxSupportMac = 
        TraceEvent.Content.Mojom.SandboxSupportMac.X;
    
      namespace AgentSchedulingGroup {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.AgentSchedulingGroup';
          // Denotes the end of the event AgentSchedulingGroup.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ChildHistogramFetcherFactory {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.ChildHistogramFetcherFactory';
          // Denotes the end of the event ChildHistogramFetcherFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ChildProcess {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.ChildProcess';
          // Denotes the end of the event ChildProcess.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ChildProcessHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.ChildProcessHost';
          // Denotes the end of the event ChildProcessHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Frame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.Frame';
          // Denotes the end of the event Frame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameFactory {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.FrameFactory';
          // Denotes the end of the event FrameFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.FrameHost';
          // Denotes the end of the event FrameHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameSinkProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.FrameSinkProvider';
          // Denotes the end of the event FrameSinkProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NavigationClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.NavigationClient';
          // Denotes the end of the event NavigationClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Renderer {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.Renderer';
          // Denotes the end of the event Renderer.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RendererHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.RendererHost';
          // Denotes the end of the event RendererHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RendererVariationsConfiguration {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.RendererVariationsConfiguration';
          // Denotes the end of the event RendererVariationsConfiguration.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RouteProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.RouteProvider';
          // Denotes the end of the event RouteProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SandboxSupportMac {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.SandboxSupportMac';
          // Denotes the end of the event SandboxSupportMac.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ContentLayerDelegate {
    type PaintContents = 
      TraceEvent.ContentLayerDelegate.PaintContents.X;
  
    namespace PaintContents {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ContentLayerDelegate::paintContents';
        // Denotes the end of the event PaintContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ContentMainRunnerImpl {
    type Initialize = 
      TraceEvent.ContentMainRunnerImpl.Initialize.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ContentMainRunnerImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Contentrendererloadernavigation_body_loader {
    type Cc = 
      TraceEvent.Contentrendererloadernavigation_body_loader.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../content/renderer/loader/navigation_body_loader.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Context {
    type AddFinishedBlobFromItems = 
      TraceEvent.Context.AddFinishedBlobFromItems.X;
  
    namespace AddFinishedBlobFromItems {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Context::AddFinishedBlobFromItems';
        // Denotes the end of the event AddFinishedBlobFromItems.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ContextCreatedNotification {
    interface X extends TraceEvent.Base {
      args: {
        IsMainFrame: boolean;
        IsOutermostMainFrame?: boolean;
      };
      // Duration.
      dur: number;
      name: 'ContextCreatedNotification';
      // Denotes the end of the event ContextCreatedNotification.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Control_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'control_tq';
      // Denotes the end of the event Control_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace COOKIE_INCLUSION_STATUS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          operation: string;
          status: string;
        };
        source_type: string;
      };
      id: string;
      name: 'COOKIE_INCLUSION_STATUS';
      // Denotes the ending of the nestable async flow event COOKIE_INCLUSION_STATUS.
      ph: 'n';
      scope: string;
    }
  }

  namespace COOKIE_STORE_COOKIE_ADDED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'COOKIE_STORE_COOKIE_ADDED';
      // Denotes the ending of the nestable async flow event COOKIE_STORE_COOKIE_ADDED.
      ph: 'n';
      scope: string;
    }
  }

  namespace COOKIE_STORE_COOKIE_DELETED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'COOKIE_STORE_COOKIE_DELETED';
      // Denotes the ending of the nestable async flow event COOKIE_STORE_COOKIE_DELETED.
      ph: 'n';
      scope: string;
    }
  }

  namespace CreateGrGLInterfacebind_with_flush_on_macafterfunc {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CreateGrGLInterface - bind_with_flush_on_mac - afterfunc';
      // Denotes the end of the event CreateGrGLInterfacebind_with_flush_on_macafterfunc.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CreateGrGLInterfacebind_with_flush_on_macbeforefunc {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CreateGrGLInterface - bind_with_flush_on_mac - beforefunc';
      // Denotes the end of the event CreateGrGLInterfacebind_with_flush_on_macbeforefunc.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CreateIOSurface {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CreateIOSurface';
      // Denotes the end of the event CreateIOSurface.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CSSParserImpl {
    namespace ParseStyleSheet {
      type Parse = 
        TraceEvent.CSSParserImpl.ParseStyleSheet.Parse.X;
    
      namespace Parse {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'CSSParserImpl::parseStyleSheet.parse';
          // Denotes the end of the event Parse.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
          baseUrl: string;
          length: number;
          mode: number;
          tokenCount: number;
        };
        // Duration.
        dur: number;
        name: 'CSSParserImpl::parseStyleSheet';
        // Denotes the end of the event ParseStyleSheet.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CustomElementRegistry {
    type Define = 
      TraceEvent.CustomElementRegistry.Define.X;
  
    namespace Define {
      interface X extends TraceEvent.Base {
        args: {
          name: string;
        };
        // Duration.
        dur: number;
        name: 'CustomElementRegistry::define';
        // Denotes the end of the event Define.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Damagenotvisible {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Damage not visible.';
      // Denotes an event Damagenotvisible. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Database {
    type BeginTransaction = 
      TraceEvent.Database.BeginTransaction.X;
  
    type CommitTransaction = 
      TraceEvent.Database.CommitTransaction.X;
  
    type Delete = 
      TraceEvent.Database.Delete.X;
  
    type ReleaseCacheMemoryIfNeeded = 
      TraceEvent.Database.ReleaseCacheMemoryIfNeeded.X;
  
    namespace BeginTransaction {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Database::BeginTransaction';
        // Denotes the end of the event BeginTransaction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitTransaction {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Database::CommitTransaction';
        // Denotes the end of the event CommitTransaction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Delete {
      interface X extends TraceEvent.Base {
        args: {
          path: string;
        };
        // Duration.
        dur: number;
        name: 'Database::Delete';
        // Denotes the end of the event Delete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReleaseCacheMemoryIfNeeded {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Database::ReleaseCacheMemoryIfNeeded';
        // Denotes the end of the event ReleaseCacheMemoryIfNeeded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DataReductionProxyCompressionStats {
    type RecordDataUseWithMimeType = 
      TraceEvent.DataReductionProxyCompressionStats.RecordDataUseWithMimeType.X;
  
    namespace RecordDataUseWithMimeType {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DataReductionProxyCompressionStats::RecordDataUseWithMimeType';
        // Denotes the end of the event RecordDataUseWithMimeType.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DecodedDataDocumentParser {
    type AppendBytes = 
      TraceEvent.DecodedDataDocumentParser.AppendBytes.X;
  
    namespace AppendBytes {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DecodedDataDocumentParser::AppendBytes';
        // Denotes the end of the event AppendBytes.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DecodeFont {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DecodeFont';
      // Denotes the end of the event DecodeFont.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DecodeImage {
    interface X extends TraceEvent.Base {
      args: {
        imageType: string;
      };
      // Duration.
      dur: number;
      name: 'Decode Image';
      // Denotes the end of the event DecodeImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DecodeLazyPixelRef {
    interface X extends TraceEvent.Base {
      args: {
        LazyPixelRef: number;
      };
      // Duration.
      dur: number;
      name: 'Decode LazyPixelRef';
      // Denotes the end of the event DecodeLazyPixelRef.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DecodingImageGenerator {
    type GetPixels = 
      TraceEvent.DecodingImageGenerator.GetPixels.X;
  
    type GetYUVAPlanes = 
      TraceEvent.DecodingImageGenerator.GetYUVAPlanes.X;
  
    type QueryYUVAInfo = 
      TraceEvent.DecodingImageGenerator.QueryYUVAInfo.X;
  
    namespace GetPixels {
      interface X extends TraceEvent.Base {
        args: {
          client_id: number;
          'frame index': number;
        };
        // Duration.
        dur: number;
        name: 'DecodingImageGenerator::getPixels';
        // Denotes the end of the event GetPixels.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetYUVAPlanes {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DecodingImageGenerator::GetYUVAPlanes';
        // Denotes the end of the event GetYUVAPlanes.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueryYUVAInfo {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DecodingImageGenerator::QueryYUVAInfo';
        // Denotes the end of the event QueryYUVAInfo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Default_tq {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'default_tq';
      // Denotes the beginning of the event Default_tq.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'default_tq';
      // Denotes the end of the event Default_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Deferred {
    interface F extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Deferred';
      // Denotes the ending of the async event Deferred.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
        original_url: string;
      };
      id2: {
        local: string;
      };
      name: 'Deferred';
      // Denotes the beginning of the async event Deferred.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DelayBasedBeginFrameSource {
    type OnTimerTick = 
      TraceEvent.DelayBasedBeginFrameSource.OnTimerTick.X;
  
    namespace OnTimerTick {
      interface X extends TraceEvent.Base {
        args: {
          frame_time: number;
          interval: number;
        };
        // Duration.
        dur: number;
        name: 'DelayBasedBeginFrameSource::OnTimerTick';
        // Denotes the end of the event OnTimerTick.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DelayBasedTimeSource {
    type SetActive = 
      TraceEvent.DelayBasedTimeSource.SetActive.X;
  
    namespace SetActive {
      interface X extends TraceEvent.Base {
        args: {
          active: boolean;
        };
        // Duration.
        dur: number;
        name: 'DelayBasedTimeSource::SetActive';
        // Denotes the end of the event SetActive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Device {
    namespace Mojom {
      type DeviceService = 
        TraceEvent.Device.Mojom.DeviceService.X;
    
      type PowerMonitor = 
        TraceEvent.Device.Mojom.PowerMonitor.X;
    
      type PowerMonitorClient = 
        TraceEvent.Device.Mojom.PowerMonitorClient.X;
    
      type TimeZoneMonitor = 
        TraceEvent.Device.Mojom.TimeZoneMonitor.X;
    
      type WakeLock = 
        TraceEvent.Device.Mojom.WakeLock.X;
    
      type WakeLockContext = 
        TraceEvent.Device.Mojom.WakeLockContext.X;
    
      type WakeLockProvider = 
        TraceEvent.Device.Mojom.WakeLockProvider.X;
    
      namespace DeviceService {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.DeviceService';
          // Denotes the end of the event DeviceService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PowerMonitor {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.PowerMonitor';
          // Denotes the end of the event PowerMonitor.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PowerMonitorClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.PowerMonitorClient';
          // Denotes the end of the event PowerMonitorClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TimeZoneMonitor {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.TimeZoneMonitor';
          // Denotes the end of the event TimeZoneMonitor.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WakeLock {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.WakeLock';
          // Denotes the end of the event WakeLock.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WakeLockContext {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.WakeLockContext';
          // Denotes the end of the event WakeLockContext.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WakeLockProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.WakeLockProvider';
          // Denotes the end of the event WakeLockProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace DidCommitNavigation {
    type Errorpage = 
      TraceEvent.DidCommitNavigation.Errorpage.b |
      TraceEvent.DidCommitNavigation.Errorpage.e;
  
    namespace Errorpage {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'DidCommitNavigation: error page';
        // Denotes the beginning of the nestable async flow event Errorpage.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'DidCommitNavigation: error page';
        // Denotes a step into the nestable async flow event Errorpage.
        ph: 'e';
        scope: string;
      }
    }
  
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'DidCommitNavigation';
      // Denotes the beginning of the nestable async flow event DidCommitNavigation.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'DidCommitNavigation';
      // Denotes a step into the nestable async flow event DidCommitNavigation.
      ph: 'e';
      scope: string;
    }
  }

  namespace DidCommitProvisionalLoad_StateResetForNewDocument {
    interface X extends TraceEvent.Base {
      args: {
        render_frame_host: string;
      };
      // Duration.
      dur: number;
      name: 'DidCommitProvisionalLoad_StateResetForNewDocument';
      // Denotes the end of the event DidCommitProvisionalLoad_StateResetForNewDocument.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DidPrepareTiles {
    interface I extends TraceEvent.Base {
      args: {
        state: {
          did_oom_on_last_assign: boolean;
          global_state: {
            hard_memory_limit_in_bytes: number;
            memory_limit_policy: string;
            num_resources_limit: number;
            soft_memory_limit_in_bytes: number;
            tree_priority: string;
          };
          tile_count: number;
        };
      };
      name: 'DidPrepareTiles';
      // Denotes an event DidPrepareTiles. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DirectRenderer {
    type DrawFrame = 
      TraceEvent.DirectRenderer.DrawFrame.X;
  
    type DrawRenderPass = 
      TraceEvent.DirectRenderer.DrawRenderPass.X;
  
    namespace DrawFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DirectRenderer::DrawFrame';
        // Denotes the end of the event DrawFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRenderPass {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DirectRenderer::DrawRenderPass';
        // Denotes the end of the event DrawRenderPass.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Discardable_memory {
    namespace Mojom {
      type DiscardableSharedMemoryManager = 
        TraceEvent.Discardable_memory.Mojom.DiscardableSharedMemoryManager.X;
    
      namespace DiscardableSharedMemoryManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'discardable_memory.mojom.DiscardableSharedMemoryManager';
          // Denotes the end of the event DiscardableSharedMemoryManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace DiscardableImageMap {
    type Generate = 
      TraceEvent.DiscardableImageMap.Generate.X;
  
    namespace Generate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DiscardableImageMap::Generate';
        // Denotes the end of the event Generate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DiskUsage {
    interface C extends TraceEvent.Base {
      args: {
        value: number;
      };
      name: 'DiskUsage';
      // Denotes a counter for the event DiskUsage.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Display {
    type DrawAndSwap = 
      TraceEvent.Display.DrawAndSwap.X;
  
    type FrameDisplayed = 
      TraceEvent.Display.FrameDisplayed.I;
  
    type Resize = 
      TraceEvent.Display.Resize.X;
  
    type SetSurfaceId = 
      TraceEvent.Display.SetSurfaceId.X;
  
    type SetVisible = 
      TraceEvent.Display.SetVisible.X;
  
    namespace DrawAndSwap {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::DrawAndSwap';
        // Denotes the end of the event DrawAndSwap.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FrameDisplayed {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'Display::FrameDisplayed';
        // Denotes an event FrameDisplayed. There are no begining/ending phases.
        ph: 'I';
        s: string;
      }
    }
  
    namespace Resize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::Resize';
        // Denotes the end of the event Resize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSurfaceId {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::SetSurfaceId';
        // Denotes the end of the event SetSurfaceId.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface X extends TraceEvent.Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'Display::SetVisible';
        // Denotes the end of the event SetVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayCALayerTree {
    type GotCAContextFrame = 
      TraceEvent.DisplayCALayerTree.GotCAContextFrame.X;
  
    namespace GotCAContextFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayCALayerTree::GotCAContextFrame';
        // Denotes the end of the event GotCAContextFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayDamageTracker {
    type HasPendingSurfaces = 
      TraceEvent.DisplayDamageTracker.HasPendingSurfaces.I;
  
    type SetNewRootSurface = 
      TraceEvent.DisplayDamageTracker.SetNewRootSurface.X;
  
    type SetRootFrameMissing = 
      TraceEvent.DisplayDamageTracker.SetRootFrameMissing.X;
  
    type SurfaceDamaged = 
      TraceEvent.DisplayDamageTracker.SurfaceDamaged.X;
  
    type SurfaceDamageExpected = 
      TraceEvent.DisplayDamageTracker.SurfaceDamageExpected.X;
  
    type SurfaceDestroyed = 
      TraceEvent.DisplayDamageTracker.SurfaceDestroyed.X;
  
    namespace HasPendingSurfaces {
      interface I extends TraceEvent.Base {
        args: {
          has_pending_surfaces: boolean;
          pending_surface_id?: string;
        };
        name: 'DisplayDamageTracker::HasPendingSurfaces';
        // Denotes an event HasPendingSurfaces. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNewRootSurface {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayDamageTracker::SetNewRootSurface';
        // Denotes the end of the event SetNewRootSurface.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetRootFrameMissing {
      interface X extends TraceEvent.Base {
        args: {
          missing: boolean;
        };
        // Duration.
        dur: number;
        name: 'DisplayDamageTracker::SetRootFrameMissing';
        // Denotes the end of the event SetRootFrameMissing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SurfaceDamaged {
      interface X extends TraceEvent.Base {
        args: {
          surface_id: string;
        };
        // Duration.
        dur: number;
        name: 'DisplayDamageTracker::SurfaceDamaged';
        // Denotes the end of the event SurfaceDamaged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SurfaceDamageExpected {
      interface X extends TraceEvent.Base {
        args: {
          surface_id: string;
        };
        // Duration.
        dur: number;
        name: 'DisplayDamageTracker::SurfaceDamageExpected';
        // Denotes the end of the event SurfaceDamageExpected.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SurfaceDestroyed {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayDamageTracker::SurfaceDestroyed';
        // Denotes the end of the event SurfaceDestroyed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayLinkMac {
    type DisplayLinkCallback = 
      TraceEvent.DisplayLinkMac.DisplayLinkCallback.X;
  
    type UpdateVSyncParameters = 
      TraceEvent.DisplayLinkMac.UpdateVSyncParameters.X;
  
    namespace DisplayLinkCallback {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayLinkMac::DisplayLinkCallback';
        // Denotes the end of the event DisplayLinkCallback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateVSyncParameters {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayLinkMac::UpdateVSyncParameters';
        // Denotes the end of the event UpdateVSyncParameters.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayResourceProvider {
    type DeleteResourceInternal = 
      TraceEvent.DisplayResourceProvider.DeleteResourceInternal.X;
  
    namespace DeleteResourceInternal {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayResourceProvider::DeleteResourceInternal';
        // Denotes the end of the event DeleteResourceInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayScheduler {
    type BeginFrame = 
      TraceEvent.DisplayScheduler.BeginFrame.X;
  
    type DrawAndSwap = 
      TraceEvent.DisplayScheduler.DrawAndSwap.X;
  
    type OnBeginFrameDeadline = 
      TraceEvent.DisplayScheduler.OnBeginFrameDeadline.X;
  
    type Pending_swaps = 
      TraceEvent.DisplayScheduler.Pending_swaps.F |
      TraceEvent.DisplayScheduler.Pending_swaps.S;
  
    type ScheduleBeginFrameDeadline = 
      TraceEvent.DisplayScheduler.ScheduleBeginFrameDeadline.X;
  
    namespace BeginFrame {
      interface X extends TraceEvent.Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
          now: number;
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::BeginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawAndSwap {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::DrawAndSwap';
        // Denotes the end of the event DrawAndSwap.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnBeginFrameDeadline {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::OnBeginFrameDeadline';
        // Denotes the end of the event OnBeginFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Pending_swaps {
      interface F extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'DisplayScheduler:pending_swaps';
        // Denotes the ending of the async event Pending_swaps.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'DisplayScheduler:pending_swaps';
        // Denotes the beginning of the async event Pending_swaps.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleBeginFrameDeadline {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::ScheduleBeginFrameDeadline';
        // Denotes the end of the event ScheduleBeginFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DNS_TRANSACTION_ATTEMPT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_ATTEMPT';
      // Denotes the ending of the nestable async flow event DNS_TRANSACTION_ATTEMPT.
      ph: 'n';
      scope: string;
    }
  }

  namespace DNS_TRANSACTION_QUERY {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          net_error?: number;
          qname: string;
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_QUERY';
      // Denotes the beginning of the nestable async flow event DNS_TRANSACTION_QUERY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'DNS_TRANSACTION_QUERY';
      // Denotes a step into the nestable async flow event DNS_TRANSACTION_QUERY.
      ph: 'e';
      scope: string;
    }
  }

  namespace DNS_TRANSACTION_RESPONSE {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          answer_count: number;
          rcode: number;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_RESPONSE';
      // Denotes the ending of the nestable async flow event DNS_TRANSACTION_RESPONSE.
      ph: 'n';
      scope: string;
    }
  }

  namespace DNS_TRANSACTION {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          hostname: string;
          net_error?: number;
          query_type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION';
      // Denotes the beginning of the nestable async flow event DNS_TRANSACTION.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'DNS_TRANSACTION';
      // Denotes a step into the nestable async flow event DNS_TRANSACTION.
      ph: 'e';
      scope: string;
    }
  }

  namespace Document {
    type RebuildLayoutTree = 
      TraceEvent.Document.RebuildLayoutTree.X;
  
    type RecalcStyle = 
      TraceEvent.Document.RecalcStyle.X;
  
    type SetURL = 
      TraceEvent.Document.SetURL.X;
  
    type Shutdown = 
      TraceEvent.Document.Shutdown.X;
  
    type UpdateActiveStyle = 
      TraceEvent.Document.UpdateActiveStyle.X;
  
    type UpdateStyle = 
      TraceEvent.Document.UpdateStyle.X;
  
    type UpdateStyleInvalidationIfNeeded = 
      TraceEvent.Document.UpdateStyleInvalidationIfNeeded.X;
  
    namespace RebuildLayoutTree {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::rebuildLayoutTree';
        // Denotes the end of the event RebuildLayoutTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RecalcStyle {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::recalcStyle';
        // Denotes the end of the event RecalcStyle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetURL {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'Document::SetURL';
        // Denotes the end of the event SetURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Shutdown {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::shutdown';
        // Denotes the end of the event Shutdown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateActiveStyle {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::updateActiveStyle';
        // Denotes the end of the event UpdateActiveStyle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStyle {
      interface X extends TraceEvent.Base {
        args: {
          counters: {
            baseStylesUsed: number;
            customPropertiesApplied: number;
            elementsStyled: number;
            independentInheritedStylesPropagated: number;
            matchedPropertyApply: number;
            matchedPropertyCacheAdded: number;
            matchedPropertyCacheHit: number;
            matchedPropertyCacheInheritedHit: number;
            pseudoElementsStyled: number;
            rulesFastRejected: number;
            rulesMatched: number;
            rulesRejected: number;
            stylesAnimated: number;
            stylesChanged: number;
            stylesUnchanged: number;
          };
          resolverAccessCount: number;
        };
        // Duration.
        dur: number;
        name: 'Document::updateStyle';
        // Denotes the end of the event UpdateStyle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStyleInvalidationIfNeeded {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::updateStyleInvalidationIfNeeded';
        // Denotes the end of the event UpdateStyleInvalidationIfNeeded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DocumentLoader {
    type BodyDataReceived = 
      TraceEvent.DocumentLoader.BodyDataReceived.X;
  
    type BodyLoadingFinished = 
      TraceEvent.DocumentLoader.BodyLoadingFinished.X;
  
    type CommitData = 
      TraceEvent.DocumentLoader.CommitData.X;
  
    type HandleData = 
      TraceEvent.DocumentLoader.HandleData.X;
  
    namespace BodyDataReceived {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DocumentLoader::BodyDataReceived';
        // Denotes the end of the event BodyDataReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BodyLoadingFinished {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DocumentLoader::BodyLoadingFinished';
        // Denotes the end of the event BodyLoadingFinished.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitData {
      interface X extends TraceEvent.Base {
        args: {
          length: number;
        };
        // Duration.
        dur: number;
        name: 'DocumentLoader::CommitData';
        // Denotes the end of the event CommitData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleData {
      interface X extends TraceEvent.Base {
        args: {
          length: number;
        };
        // Duration.
        dur: number;
        name: 'DocumentLoader::HandleData';
        // Denotes the end of the event HandleData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DocumentProvider {
    type Start = 
      TraceEvent.DocumentProvider.Start.X;
  
    type Stop = 
      TraceEvent.DocumentProvider.Stop.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DocumentProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Stop {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DocumentProvider::Stop';
        // Denotes the end of the event Stop.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DocumentStatisticsCollector {
    type CollectStatistics = 
      TraceEvent.DocumentStatisticsCollector.CollectStatistics.X;
  
    namespace CollectStatistics {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DocumentStatisticsCollector::collectStatistics';
        // Denotes the end of the event CollectStatistics.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Dom_distiller {
    namespace Mojom {
      type DistillabilityService = 
        TraceEvent.Dom_distiller.Mojom.DistillabilityService.X;
    
      namespace DistillabilityService {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'dom_distiller.mojom.DistillabilityService';
          // Denotes the end of the event DistillabilityService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace DomComplete {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'domComplete';
      // Denotes a mark of the event DomComplete.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace DOMContentLoaded {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'DOM Content Loaded';
      // Denotes the beginning of the nestable async flow event DOMContentLoaded.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'DOM Content Loaded';
      // Denotes a step into the nestable async flow event DOMContentLoaded.
      ph: 'e';
    }
  }

  namespace DomContentLoadedEventEnd {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'domContentLoadedEventEnd';
      // Denotes a mark of the event DomContentLoadedEventEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace DomContentLoadedEventStart {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'domContentLoadedEventStart';
      // Denotes a mark of the event DomContentLoadedEventStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace DomInteractive {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'domInteractive';
      // Denotes a mark of the event DomInteractive.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace DomLoading {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'domLoading';
      // Denotes a mark of the event DomLoading.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace DomReady {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'domReady';
      // Denotes a mark of the event DomReady.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DomTime {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'domTime';
      // Denotes the beginning of the nestable async flow event DomTime.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'domTime';
      // Denotes a step into the nestable async flow event DomTime.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace DOMWindow {
    type DoPostMessage = 
      TraceEvent.DOMWindow.DoPostMessage.X;
  
    namespace DoPostMessage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DOMWindow::DoPostMessage';
        // Denotes the end of the event DoPostMessage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Draw_property_utils {
    type ComputeDrawPropertiesOfVisibleLayers = 
      TraceEvent.Draw_property_utils.ComputeDrawPropertiesOfVisibleLayers.X;
  
    type FindLayersThatNeedUpdates = 
      TraceEvent.Draw_property_utils.FindLayersThatNeedUpdates.X;
  
    namespace ComputeDrawPropertiesOfVisibleLayers {
      interface X extends TraceEvent.Base {
        args: {
          visible_layers: number;
        };
        // Duration.
        dur: number;
        name: 'draw_property_utils::ComputeDrawPropertiesOfVisibleLayers';
        // Denotes the end of the event ComputeDrawPropertiesOfVisibleLayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FindLayersThatNeedUpdates {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'draw_property_utils::FindLayersThatNeedUpdates';
        // Denotes the end of the event FindLayersThatNeedUpdates.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DrawFrame {
    interface I extends TraceEvent.Base {
      args: {
        frameSeqId: number;
        layerTreeId: number;
      };
      name: 'DrawFrame';
      // Denotes an event DrawFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DrawLayers {
    type FrameViewerTracing = 
      TraceEvent.DrawLayers.FrameViewerTracing.X;
  
    namespace FrameViewerTracing {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DrawLayers.FrameViewerTracing';
        // Denotes the end of the event FrameViewerTracing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DrawLazyPixelRef {
    interface I extends TraceEvent.Base {
      args: {
        LazyPixelRef: number;
      };
      name: 'Draw LazyPixelRef';
      // Denotes an event DrawLazyPixelRef. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Drawskipped {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Draw skipped.';
      // Denotes an event Drawskipped. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DroppedFrame {
    interface I extends TraceEvent.Base {
      args: {
        frameSeqId: number;
        hasPartialUpdate: boolean;
        layerTreeId: number;
      };
      name: 'DroppedFrame';
      // Denotes an event DroppedFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace EarlyOut_DeferCommit_InsideBeginMainFrame {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'EarlyOut_DeferCommit_InsideBeginMainFrame';
      // Denotes an event EarlyOut_DeferCommit_InsideBeginMainFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EarlyOut_NoDamage {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'EarlyOut_NoDamage';
      // Denotes an event EarlyOut_NoDamage. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EarlyOut_NoUpdates {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'EarlyOut_NoUpdates';
      // Denotes an event EarlyOut_NoUpdates. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EditingUtility {
    type NextCandidateAlgorithm = 
      TraceEvent.EditingUtility.NextCandidateAlgorithm.X;
  
    type PreviousCandidateAlgorithm = 
      TraceEvent.EditingUtility.PreviousCandidateAlgorithm.X;
  
    namespace NextCandidateAlgorithm {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EditingUtility::nextCandidateAlgorithm';
        // Denotes the end of the event NextCandidateAlgorithm.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PreviousCandidateAlgorithm {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EditingUtility::previousCandidateAlgorithm';
        // Denotes the end of the event PreviousCandidateAlgorithm.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ElementAnimations {
    type SetRunState = 
      TraceEvent.ElementAnimations.SetRunState.I;
  
    namespace SetRunState {
      interface I extends TraceEvent.Base {
        args: {
          Name: string;
          State: string;
        };
        name: 'ElementAnimations::SetRunState';
        // Denotes an event SetRunState. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace EndActivateToSubmitCompositorFrame {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'EndActivateToSubmitCompositorFrame';
      // Denotes the beginning of the nestable async flow event EndActivateToSubmitCompositorFrame.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'EndActivateToSubmitCompositorFrame';
      // Denotes a step into the nestable async flow event EndActivateToSubmitCompositorFrame.
      ph: 'e';
      scope?: string;
    }
  }

  namespace EndCommitToActivation {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'EndCommitToActivation';
      // Denotes the beginning of the nestable async flow event EndCommitToActivation.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'EndCommitToActivation';
      // Denotes a step into the nestable async flow event EndCommitToActivation.
      ph: 'e';
      scope?: string;
    }
  }

  namespace EndofTrace {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'End of Trace';
      // Denotes the beginning of the nestable async flow event EndofTrace.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'End of Trace';
      // Denotes a step into the nestable async flow event EndofTrace.
      ph: 'e';
    }
  }

  namespace Entiredisplaydamaged {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Entire display damaged';
      // Denotes an event Entiredisplaydamaged. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EvaluateScript {
    interface X extends TraceEvent.Base {
      args: {
        data?: {
          columnNumber: number;
          frame: string;
          lineNumber: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'EvaluateScript';
      // Denotes the end of the event EvaluateScript.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EventDispatch {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          type: string;
        };
      };
      // Duration.
      dur?: number;
      name: 'EventDispatch';
      // Denotes the end of the event EventDispatch.
      ph: 'X';
      tdur?: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EventHandler {
    type HandleMouseLeaveEvent = 
      TraceEvent.EventHandler.HandleMouseLeaveEvent.X;
  
    type HandleMouseMoveEvent = 
      TraceEvent.EventHandler.HandleMouseMoveEvent.X;
  
    type HandleMousePressEvent = 
      TraceEvent.EventHandler.HandleMousePressEvent.X;
  
    type HandleMouseReleaseEvent = 
      TraceEvent.EventHandler.HandleMouseReleaseEvent.X;
  
    type HitTestResultAtLocation = 
      TraceEvent.EventHandler.HitTestResultAtLocation.X;
  
    namespace HandleMouseLeaveEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMouseLeaveEvent';
        // Denotes the end of the event HandleMouseLeaveEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseMoveEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMouseMoveEvent';
        // Denotes the end of the event HandleMouseMoveEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMousePressEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMousePressEvent';
        // Denotes the end of the event HandleMousePressEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseReleaseEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMouseReleaseEvent';
        // Denotes the end of the event HandleMouseReleaseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HitTestResultAtLocation {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::HitTestResultAtLocation';
        // Denotes the end of the event HitTestResultAtLocation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace EventLatency {
    interface b extends TraceEvent.Base {
      args: {
        event: string;
      };
      id2: {
        local: string;
      };
      name: 'EventLatency';
      // Denotes the beginning of the nestable async flow event EventLatency.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'EventLatency';
      // Denotes a step into the nestable async flow event EventLatency.
      ph: 'e';
      scope: string;
    }
  }

  namespace ExtensionHostMsg_AddFilteredListener {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_AddFilteredListener';
      // Denotes the end of the event ExtensionHostMsg_AddFilteredListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_AddLazyListener {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_AddLazyListener';
      // Denotes the end of the event ExtensionHostMsg_AddLazyListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_AddListener {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_AddListener';
      // Denotes the end of the event ExtensionHostMsg_AddListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_CloseMessagePort {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_CloseMessagePort';
      // Denotes the end of the event ExtensionHostMsg_CloseMessagePort.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_EventAck {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_EventAck';
      // Denotes the end of the event ExtensionHostMsg_EventAck.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_ExecuteCodeFinished {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_ExecuteCodeFinished';
      // Denotes the end of the event ExtensionHostMsg_ExecuteCodeFinished.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_GetMessageBundle {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_GetMessageBundle';
      // Denotes the end of the event ExtensionHostMsg_GetMessageBundle.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_OpenChannelToExtension {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_OpenChannelToExtension';
      // Denotes the end of the event ExtensionHostMsg_OpenChannelToExtension.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_OpenChannelToTab {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_OpenChannelToTab';
      // Denotes the end of the event ExtensionHostMsg_OpenChannelToTab.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_OpenMessagePort {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_OpenMessagePort';
      // Denotes the end of the event ExtensionHostMsg_OpenMessagePort.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_PostMessage {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_PostMessage';
      // Denotes the end of the event ExtensionHostMsg_PostMessage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_RemoveFilteredListener {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_RemoveFilteredListener';
      // Denotes the end of the event ExtensionHostMsg_RemoveFilteredListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_RemoveListener {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_RemoveListener';
      // Denotes the end of the event ExtensionHostMsg_RemoveListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_Request {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_Request';
      // Denotes the end of the event ExtensionHostMsg_Request.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_ActivateExtension {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_ActivateExtension';
      // Denotes the end of the event ExtensionMsg_ActivateExtension.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DeliverMessage {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DeliverMessage';
      // Denotes the end of the event ExtensionMsg_DeliverMessage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DispatchEvent {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DispatchEvent';
      // Denotes the end of the event ExtensionMsg_DispatchEvent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DispatchOnConnect {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DispatchOnConnect';
      // Denotes the end of the event ExtensionMsg_DispatchOnConnect.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DispatchOnDisconnect {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DispatchOnDisconnect';
      // Denotes the end of the event ExtensionMsg_DispatchOnDisconnect.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_ExecuteCode {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_ExecuteCode';
      // Denotes the end of the event ExtensionMsg_ExecuteCode.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_Loaded {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_Loaded';
      // Denotes the end of the event ExtensionMsg_Loaded.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_NotifyRenderViewType {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_NotifyRenderViewType';
      // Denotes the end of the event ExtensionMsg_NotifyRenderViewType.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_Response {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_Response';
      // Denotes the end of the event ExtensionMsg_Response.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetScriptingAllowlist {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetScriptingAllowlist';
      // Denotes the end of the event ExtensionMsg_SetScriptingAllowlist.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetSessionInfo {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetSessionInfo';
      // Denotes the end of the event ExtensionMsg_SetSessionInfo.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetSystemFont {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetSystemFont';
      // Denotes the end of the event ExtensionMsg_SetSystemFont.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetTabId {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetTabId';
      // Denotes the end of the event ExtensionMsg_SetTabId.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_UpdateBrowserWindowId {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_UpdateBrowserWindowId';
      // Denotes the end of the event ExtensionMsg_UpdateBrowserWindowId.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_UpdateDefaultPolicyHostRestrictions {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_UpdateDefaultPolicyHostRestrictions';
      // Denotes the end of the event ExtensionMsg_UpdateDefaultPolicyHostRestrictions.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_UpdateUserScripts {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_UpdateUserScripts';
      // Denotes the end of the event ExtensionMsg_UpdateUserScripts.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_ValidateMessagePort {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_ValidateMessagePort';
      // Denotes the end of the event ExtensionMsg_ValidateMessagePort.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_WatchPages {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_WatchPages';
      // Denotes the end of the event ExtensionMsg_WatchPages.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Extensions {
    namespace FeatureProvider {
      type FeatureProviderStatic = 
        TraceEvent.Extensions.FeatureProvider.FeatureProviderStatic.X;
    
      namespace FeatureProviderStatic {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'extensions::FeatureProvider::FeatureProviderStatic';
          // Denotes the end of the event FeatureProviderStatic.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ExternalBeginFrameSource {
    type OnBeginFrame = 
      TraceEvent.ExternalBeginFrameSource.OnBeginFrame.X;
  
    namespace OnBeginFrame {
      interface X extends TraceEvent.Base {
        args: {
          frame_time: number;
          interval: number;
        };
        // Duration.
        dur: number;
        name: 'ExternalBeginFrameSource::OnBeginFrame';
        // Denotes the end of the event OnBeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FaveReady_mark {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'faveReady_mark';
      // Denotes a mark of the event FaveReady_mark.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FaveReady {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'faveReady';
      // Denotes the beginning of the nestable async flow event FaveReady.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'faveReady';
      // Denotes a step into the nestable async flow event FaveReady.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FaviconBackend {
    type CloneFaviconMappingsForPages = 
      TraceEvent.FaviconBackend.CloneFaviconMappingsForPages.X;
  
    type GetFaviconsForURL = 
      TraceEvent.FaviconBackend.GetFaviconsForURL.X;
  
    namespace CloneFaviconMappingsForPages {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconBackend::CloneFaviconMappingsForPages';
        // Denotes the end of the event CloneFaviconMappingsForPages.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetFaviconsForURL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconBackend::GetFaviconsForURL';
        // Denotes the end of the event GetFaviconsForURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FaviconServiceImpl {
    type GetFaviconForPageURL = 
      TraceEvent.FaviconServiceImpl.GetFaviconForPageURL.X;
  
    type GetFaviconImageForPageURL = 
      TraceEvent.FaviconServiceImpl.GetFaviconImageForPageURL.X;
  
    type RunFaviconImageCallbackWithBitmapResults = 
      TraceEvent.FaviconServiceImpl.RunFaviconImageCallbackWithBitmapResults.X;
  
    namespace GetFaviconForPageURL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconServiceImpl::GetFaviconForPageURL';
        // Denotes the end of the event GetFaviconForPageURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetFaviconImageForPageURL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconServiceImpl::GetFaviconImageForPageURL';
        // Denotes the end of the event GetFaviconImageForPageURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunFaviconImageCallbackWithBitmapResults {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconServiceImpl::RunFaviconImageCallbackWithBitmapResults';
        // Denotes the end of the event RunFaviconImageCallbackWithBitmapResults.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FaviconUtil {
    type SelectFaviconFramesFromPNGs = 
      TraceEvent.FaviconUtil.SelectFaviconFramesFromPNGs.X;
  
    type SelectFaviconFramesFromPNGsWithoutResizing = 
      TraceEvent.FaviconUtil.SelectFaviconFramesFromPNGsWithoutResizing.X;
  
    namespace SelectFaviconFramesFromPNGs {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconUtil::SelectFaviconFramesFromPNGs';
        // Denotes the end of the event SelectFaviconFramesFromPNGs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SelectFaviconFramesFromPNGsWithoutResizing {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconUtil::SelectFaviconFramesFromPNGsWithoutResizing';
        // Denotes the end of the event SelectFaviconFramesFromPNGsWithoutResizing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FetchStart {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'fetchStart';
      // Denotes a mark of the event FetchStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FireAnimationFrame {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          id: number;
        };
      };
      // Duration.
      dur: number;
      name: 'FireAnimationFrame';
      // Denotes the end of the event FireAnimationFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FireIdleCallback {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          allottedMilliseconds: number;
          frame: string;
          id: number;
          timedOut: boolean;
        };
      };
      // Duration.
      dur: number;
      name: 'FireIdleCallback';
      // Denotes the end of the event FireIdleCallback.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstContentfulPaint {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'First Contentful Paint';
      // Denotes the beginning of the nestable async flow event FirstContentfulPaint.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'First Contentful Paint';
      // Denotes a step into the nestable async flow event FirstContentfulPaint.
      ph: 'e';
    }
  
    interface I extends TraceEvent.Base {
      args: {
        frame?: string;
      };
      name: 'firstContentfulPaint';
      // Denotes an event FirstContentfulPaint. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface R extends TraceEvent.Base {
      args: {
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstContentfulPaint';
      // Denotes a mark of the event FirstContentfulPaint.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FirstImagePaint {
    interface R extends TraceEvent.Base {
      args: {
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstImagePaint';
      // Denotes a mark of the event FirstImagePaint.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FirstInputDelay {
    namespace AllFrames {
      type UMA = 
        TraceEvent.FirstInputDelay.AllFrames.UMA.R;
    
      namespace UMA {
        interface R extends TraceEvent.Base {
          args: {
            data: {
              firstInputDelayInMilliseconds: number;
              navStartToFirstInputTimestampInMilliseconds: number;
            };
          };
          name: 'FirstInputDelay::AllFrames::UMA';
          // Denotes a mark of the event UMA.
          ph: 'R';
        }
      }
    }
  }

  namespace FirstLayout {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'firstLayout';
      // Denotes a mark of the event FirstLayout.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstMeaningfulPaint {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'First Meaningful Paint';
      // Denotes the beginning of the nestable async flow event FirstMeaningfulPaint.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'First Meaningful Paint';
      // Denotes a step into the nestable async flow event FirstMeaningfulPaint.
      ph: 'e';
    }
  
    interface R extends TraceEvent.Base {
      args: {
        afterUserInput?: number;
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstMeaningfulPaint';
      // Denotes a mark of the event FirstMeaningfulPaint.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FirstMeaningfulPaintCandidate {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstMeaningfulPaintCandidate';
      // Denotes a mark of the event FirstMeaningfulPaintCandidate.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FirstPaint {
    interface I extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'firstPaint';
      // Denotes an event FirstPaint. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface R extends TraceEvent.Base {
      args: {
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstPaint';
      // Denotes a mark of the event FirstPaint.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace FirstTextPaint {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'firstTextPaint';
      // Denotes a mark of the event FirstTextPaint.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstVisualChange {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'First Visual Change';
      // Denotes the beginning of the nestable async flow event FirstVisualChange.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'First Visual Change';
      // Denotes a step into the nestable async flow event FirstVisualChange.
      ph: 'e';
    }
  }

  namespace FlingBooster {
    type Reset = 
      TraceEvent.FlingBooster.Reset.X;
  
    namespace Reset {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FlingBooster::Reset';
        // Denotes the end of the event Reset.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FontCache {
    type GetFontPlatformData = 
      TraceEvent.FontCache.GetFontPlatformData.X;
  
    type PurgeFallbackListShaperCache = 
      TraceEvent.FontCache.PurgeFallbackListShaperCache.X;
  
    namespace GetFontPlatformData {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FontCache::GetFontPlatformData';
        // Denotes the end of the event GetFontPlatformData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PurgeFallbackListShaperCache {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FontCache::PurgeFallbackListShaperCache';
        // Denotes the end of the event PurgeFallbackListShaperCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FooterEnd {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'footerEnd';
      // Denotes a mark of the event FooterEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FooterStart {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'footerStart';
      // Denotes a mark of the event FooterStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FooterTime {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'footerTime';
      // Denotes the beginning of the nestable async flow event FooterTime.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'footerTime';
      // Denotes a step into the nestable async flow event FooterTime.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace Frame_deferrable_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'frame_deferrable_tq';
      // Denotes the end of the event Frame_deferrable_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_loading_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'frame_loading_tq';
      // Denotes the end of the event Frame_loading_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_pausable_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'frame_pausable_tq';
      // Denotes the end of the event Frame_pausable_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_throttleable_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'frame_throttleable_tq';
      // Denotes the end of the event Frame_throttleable_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_unpausable_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'frame_unpausable_tq';
      // Denotes the end of the event Frame_unpausable_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Frame ';
      // Denotes the beginning of the nestable async flow event Frame.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Frame ';
      // Denotes a step into the nestable async flow event Frame.
      ph: 'e';
      scope: string;
    }
  }

  namespace FrameBlameContext {
    interface LP extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'FrameBlameContext';
      // Denotes entering a context of the event FrameBlameContext.
      ph: '(';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface RP extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'FrameBlameContext';
      // Denotes leaving a context of the event FrameBlameContext.
      ph: ')';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameCommittedInBrowser {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          name: string;
          parent?: string;
          processId: number;
          url: string;
        };
      };
      name: 'FrameCommittedInBrowser';
      // Denotes an event FrameCommittedInBrowser. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameDeletedInBrowser {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
        };
      };
      name: 'FrameDeletedInBrowser';
      // Denotes an event FrameDeletedInBrowser. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_CreateChildFrame {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_CreateChildFrame';
      // Denotes the end of the event FrameHostMsg_CreateChildFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_Unload_ACK {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_Unload_ACK';
      // Denotes the end of the event FrameHostMsg_Unload_ACK.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameLoader {
    type StartNavigation = 
      TraceEvent.FrameLoader.StartNavigation.X;
  
    namespace StartNavigation {
      interface X extends TraceEvent.Base {
        args: {
          load_type: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'FrameLoader::StartNavigation';
        // Denotes the end of the event StartNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface D extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'FrameLoader';
      // Denotes a delete object of the event FrameLoader.
      ph: 'D';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface N extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'FrameLoader';
      // Denotes a create object of the event FrameLoader.
      ph: 'N';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends TraceEvent.Base {
      args: {
        snapshot: {
          documentLoaderURL: string;
          frame: {
            id_ref: string;
          };
          isLoadingMainFrame: boolean;
          isOutermostMainFrame?: boolean;
        };
      };
      id2: {
        local: string;
      };
      name: 'FrameLoader';
      // Denotes a snapshot object of the event FrameLoader.
      ph: 'O';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FramePresented {
    interface R extends TraceEvent.Base {
      args: {
        environment: string;
      };
      name: 'FramePresented';
      // Denotes a mark of the event FramePresented.
      ph: 'R';
    }
  }

  namespace FrameRateDecider {
    type SetPreferredInterval = 
      TraceEvent.FrameRateDecider.SetPreferredInterval.I;
  
    type UpdatePreferredFrameIntervalIfNeedednotenoughframesinkstotoggle = 
      TraceEvent.FrameRateDecider.UpdatePreferredFrameIntervalIfNeedednotenoughframesinkstotoggle.I;
  
    namespace SetPreferredInterval {
      interface I extends TraceEvent.Base {
        args: {
          new_preferred_interval: number;
        };
        name: 'FrameRateDecider::SetPreferredInterval';
        // Denotes an event SetPreferredInterval. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdatePreferredFrameIntervalIfNeedednotenoughframesinkstotoggle {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'FrameRateDecider::UpdatePreferredFrameIntervalIfNeeded - not enough frame sinks to toggle';
        // Denotes an event UpdatePreferredFrameIntervalIfNeedednotenoughframesinkstotoggle. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FrameRequestCallbackCollection {
    type ExecuteFrameCallbacks = 
      TraceEvent.FrameRequestCallbackCollection.ExecuteFrameCallbacks.X;
  
    namespace ExecuteFrameCallbacks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameRequestCallbackCollection::ExecuteFrameCallbacks';
        // Denotes the end of the event ExecuteFrameCallbacks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FrameSequenceTracker {
    interface b extends TraceEvent.Base {
      args: {
        args: {
          'impl-frames-expected': number;
          'impl-frames-ontime': number;
          'impl-frames-produced': number;
        };
        checkerboard: number;
        name: string;
      };
      id2: {
        local: string;
      };
      name: 'FrameSequenceTracker';
      // Denotes the beginning of the nestable async flow event FrameSequenceTracker.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'FrameSequenceTracker';
      // Denotes a step into the nestable async flow event FrameSequenceTracker.
      ph: 'e';
      scope: string;
    }
  }

  namespace FrameStartedLoading {
    interface I extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'FrameStartedLoading';
      // Denotes an event FrameStartedLoading. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameTreeNode {
    type DidStartLoading = 
      TraceEvent.FrameTreeNode.DidStartLoading.X;
  
    type DidStopLoading = 
      TraceEvent.FrameTreeNode.DidStopLoading.X;
  
    namespace DidStartLoading {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
          'to different document': boolean;
        };
        // Duration.
        dur: number;
        name: 'FrameTreeNode::DidStartLoading';
        // Denotes the end of the event DidStartLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStopLoading {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'FrameTreeNode::DidStopLoading';
        // Denotes the end of the event DidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface N extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'FrameTreeNode';
      // Denotes a create object of the event FrameTreeNode.
      ph: 'N';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends TraceEvent.Base {
      args: {
        snapshot: {
          parent?: {
            id_ref: string;
            scope: string;
          };
          renderFrame?: {
            id_ref: string;
            pid_ref: number;
            scope: string;
          };
          url?: string;
        };
      };
      id: string;
      name: 'FrameTreeNode';
      // Denotes a snapshot object of the event FrameTreeNode.
      ph: 'O';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameView {
    type Layout = 
      TraceEvent.FrameView.Layout.X;
  
    type PerformLayout = 
      TraceEvent.FrameView.PerformLayout.B |
      TraceEvent.FrameView.PerformLayout.E;
  
    type PerformPostLayoutTasks = 
      TraceEvent.FrameView.PerformPostLayoutTasks.X;
  
    type PerformPreLayoutTasks = 
      TraceEvent.FrameView.PerformPreLayoutTasks.X;
  
    namespace Layout {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameView::layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformLayout {
      interface B extends TraceEvent.Base {
        args: {
          contentsHeightBeforeLayout: number;
        };
        name: 'FrameView::performLayout';
        // Denotes the beginning of the event PerformLayout.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
          counters: {
            LayoutAnalyzerStackMaximumDepth?: number;
            LayoutBlockHeightChanged?: number;
            LayoutBlockSizeChanged?: number;
            LayoutBlockSizeDidNotChange?: number;
            LayoutBlockWidthChanged?: number;
            LayoutObjectsThatAreFloating?: number;
            LayoutObjectsThatAreOutOfFlowPositioned?: number;
            LayoutObjectsThatAreTableCells?: number;
            LayoutObjectsThatHadNeverHadLayout?: number;
            LayoutObjectsThatHaveALayer?: number;
            LayoutObjectsThatNeedLayoutForThemselves?: number;
            TotalLayoutObjectsThatWereLaidOut?: number;
            approximateBlankCharacterCount: number;
            contentsHeightAfterLayout: number;
            frame: string;
            host: string;
            visibleHeight: number;
          };
        };
        name: 'FrameView::performLayout';
        // Denotes the ending of the event PerformLayout.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPostLayoutTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameView::performPostLayoutTasks';
        // Denotes the end of the event PerformPostLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPreLayoutTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameView::performPreLayoutTasks';
        // Denotes the end of the event PerformPreLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FunctionCall {
    interface B extends TraceEvent.Base {
      args: {
        data: {
          columnNumber?: number;
          frame: string;
          functionName: string;
          lineNumber: number;
          scriptId: string;
          url: string;
        };
      };
      name: 'FunctionCall';
      // Denotes the beginning of the event FunctionCall.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
      
      };
      name: 'FunctionCall';
      // Denotes the ending of the event FunctionCall.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        data: {
          columnNumber: number;
          frame?: string;
          functionName: string;
          lineNumber: number;
          scriptId: string;
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'FunctionCall';
      // Denotes the end of the event FunctionCall.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GestureProvider {
    type InitGestureDetectors = 
      TraceEvent.GestureProvider.InitGestureDetectors.X;
  
    type OnTouchEvent = 
      TraceEvent.GestureProvider.OnTouchEvent.X;
  
    namespace InitGestureDetectors {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GestureProvider::InitGestureDetectors';
        // Denotes the end of the event InitGestureDetectors.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnTouchEvent {
      interface X extends TraceEvent.Base {
        args: {
          action: string;
        };
        // Duration.
        dur: number;
        name: 'GestureProvider::OnTouchEvent';
        // Denotes the end of the event OnTouchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GetAccessToken {
    interface b extends TraceEvent.Base {
      args: {
        account: string;
      };
      id2: {
        local: string;
      };
      name: 'GetAccessToken';
      // Denotes the beginning of the nestable async flow event GetAccessToken.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'GetAccessToken';
      // Denotes a step into the nestable async flow event GetAccessToken.
      ph: 'e';
      scope: string;
    }
  }

  namespace GLContext {
    type BackpressureFenceCreate = 
      TraceEvent.GLContext.BackpressureFenceCreate.X;
  
    type BackpressureFenceWait = 
      TraceEvent.GLContext.BackpressureFenceWait.X;
  
    type FlushForDriverCrashWorkaround = 
      TraceEvent.GLContext.FlushForDriverCrashWorkaround.X;
  
    namespace BackpressureFenceCreate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContext::BackpressureFenceCreate';
        // Denotes the end of the event BackpressureFenceCreate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BackpressureFenceWait {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContext::BackpressureFenceWait';
        // Denotes the end of the event BackpressureFenceWait.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushForDriverCrashWorkaround {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContext::FlushForDriverCrashWorkaround';
        // Denotes the end of the event FlushForDriverCrashWorkaround.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLContextCGL {
    type MakeCurrent = 
      TraceEvent.GLContextCGL.MakeCurrent.X;
  
    namespace MakeCurrent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContextCGL::MakeCurrent';
        // Denotes the end of the event MakeCurrent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2 {
    type Finish = 
      TraceEvent.GLES2.Finish.X;
  
    type GetShaderPrecisionFormat = 
      TraceEvent.GLES2.GetShaderPrecisionFormat.X;
  
    type PostSubBufferCHROMIUM = 
      TraceEvent.GLES2.PostSubBufferCHROMIUM.X;
  
    type ReadPixels = 
      TraceEvent.GLES2.ReadPixels.X;
  
    namespace Finish {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::Finish';
        // Denotes the end of the event Finish.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetShaderPrecisionFormat {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::GetShaderPrecisionFormat';
        // Denotes the end of the event GetShaderPrecisionFormat.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PostSubBufferCHROMIUM {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2::PostSubBufferCHROMIUM';
        // Denotes the end of the event PostSubBufferCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadPixels {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::ReadPixels';
        // Denotes the end of the event ReadPixels.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2CommandBufferStub {
    type Initialize = 
      TraceEvent.GLES2CommandBufferStub.Initialize.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2CommandBufferStub::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2DecoderImpl {
    type DoCompileShader = 
      TraceEvent.GLES2DecoderImpl.DoCompileShader.X;
  
    type DoCreateAndTexStorage2DSharedImageCHROMIUM = 
      TraceEvent.GLES2DecoderImpl.DoCreateAndTexStorage2DSharedImageCHROMIUM.X;
  
    type DoLinkProgram = 
      TraceEvent.GLES2DecoderImpl.DoLinkProgram.X;
  
    type DoTexStorage2D = 
      TraceEvent.GLES2DecoderImpl.DoTexStorage2D.X;
  
    type DoTexStorage2DImageCHROMIUM = 
      TraceEvent.GLES2DecoderImpl.DoTexStorage2DImageCHROMIUM.X;
  
    type FinishReadPixels = 
      TraceEvent.GLES2DecoderImpl.FinishReadPixels.X;
  
    type HandlePostSubBufferCHROMIUM = 
      TraceEvent.GLES2DecoderImpl.HandlePostSubBufferCHROMIUM.B |
      TraceEvent.GLES2DecoderImpl.HandlePostSubBufferCHROMIUM.X;
  
    type HandleReadPixels = 
      TraceEvent.GLES2DecoderImpl.HandleReadPixels.X;
  
    type Initialize = 
      TraceEvent.GLES2DecoderImpl.Initialize.X;
  
    type InitializeShaderTranslator = 
      TraceEvent.GLES2DecoderImpl.InitializeShaderTranslator.X;
  
    type RestoreState = 
      TraceEvent.GLES2DecoderImpl.RestoreState.X;
  
    namespace DoCompileShader {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoCompileShader';
        // Denotes the end of the event DoCompileShader.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCreateAndTexStorage2DSharedImageCHROMIUM {
      interface X extends TraceEvent.Base {
        args: {
          context: string;
          mailbox_0_: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoCreateAndTexStorage2DSharedImageCHROMIUM';
        // Denotes the end of the event DoCreateAndTexStorage2DSharedImageCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoLinkProgram {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoLinkProgram';
        // Denotes the end of the event DoLinkProgram.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTexStorage2D {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoTexStorage2D';
        // Denotes the end of the event DoTexStorage2D.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTexStorage2DImageCHROMIUM {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoTexStorage2DImageCHROMIUM';
        // Denotes the end of the event DoTexStorage2DImageCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishReadPixels {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::FinishReadPixels';
        // Denotes the end of the event FinishReadPixels.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandlePostSubBufferCHROMIUM {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'GLES2DecoderImpl::HandlePostSubBufferCHROMIUM';
        // Denotes the beginning of the event HandlePostSubBufferCHROMIUM.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::HandlePostSubBufferCHROMIUM';
        // Denotes the end of the event HandlePostSubBufferCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleReadPixels {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::HandleReadPixels';
        // Denotes the end of the event HandleReadPixels.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeShaderTranslator {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::InitializeShaderTranslator';
        // Denotes the end of the event InitializeShaderTranslator.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RestoreState {
      interface X extends TraceEvent.Base {
        args: {
          context: string;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::RestoreState';
        // Denotes the end of the event RestoreState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2Implementation {
    type Initialize = 
      TraceEvent.GLES2Implementation.Initialize.X;
  
    type SetAggressivelyFreeResources = 
      TraceEvent.GLES2Implementation.SetAggressivelyFreeResources.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2Implementation::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetAggressivelyFreeResources {
      interface X extends TraceEvent.Base {
        args: {
          aggressively_free_resources: boolean;
        };
        // Duration.
        dur: number;
        name: 'GLES2Implementation::SetAggressivelyFreeResources';
        // Denotes the end of the event SetAggressivelyFreeResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLFence {
    type HasCompleted = 
      TraceEvent.GLFence.HasCompleted.X;
  
    namespace HasCompleted {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLFence::HasCompleted';
        // Denotes the end of the event HasCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLImageIOSurface {
    type BindTexImage = 
      TraceEvent.GLImageIOSurface.BindTexImage.X;
  
    namespace BindTexImage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLImageIOSurface::BindTexImage';
        // Denotes the end of the event BindTexImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GlobalFirstContentfulPaint {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'GlobalFirstContentfulPaint';
      // Denotes an event GlobalFirstContentfulPaint. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace GLRenderer {
    type BeginDrawingFrame = 
      TraceEvent.GLRenderer.BeginDrawingFrame.X;
  
    type InitializeSharedObjects = 
      TraceEvent.GLRenderer.InitializeSharedObjects.X;
  
    type SwapBuffers = 
      TraceEvent.GLRenderer.SwapBuffers.X;
  
    namespace BeginDrawingFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLRenderer::BeginDrawingFrame';
        // Denotes the end of the event BeginDrawingFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeSharedObjects {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLRenderer::InitializeSharedObjects';
        // Denotes the end of the event InitializeSharedObjects.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SwapBuffers {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLRenderer::SwapBuffers';
        // Denotes the end of the event SwapBuffers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GlResizeChromium {
    interface X extends TraceEvent.Base {
      args: {
        height: number;
        width: number;
      };
      // Duration.
      dur: number;
      name: 'glResizeChromium';
      // Denotes the end of the event GlResizeChromium.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Goog_123_3_1_end {
    interface R extends TraceEvent.Base {
      args: {
      
      };
      name: 'goog_123_3_1_end';
      // Denotes a mark of the event Goog_123_3_1_end.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Goog_123_3_1_start {
    interface R extends TraceEvent.Base {
      args: {
      
      };
      name: 'goog_123_3_1_start';
      // Denotes a mark of the event Goog_123_3_1_start.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Goog_123_3_1 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'goog_123_3_1';
      // Denotes the beginning of the nestable async flow event Goog_123_3_1.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'goog_123_3_1';
      // Denotes a step into the nestable async flow event Goog_123_3_1.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Gpu {
    type EstablishGpuChannelSync = 
      TraceEvent.Gpu.EstablishGpuChannelSync.X;
  
    namespace EstablishGpuChannelSync {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Gpu::EstablishGpuChannelSync';
        // Denotes the end of the event EstablishGpuChannelSync.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuChannel {
    type OnCreateCommandBuffer = 
      TraceEvent.GpuChannel.OnCreateCommandBuffer.X;
  
    type OnDestroyCommandBuffer = 
      TraceEvent.GpuChannel.OnDestroyCommandBuffer.X;
  
    namespace OnCreateCommandBuffer {
      interface X extends TraceEvent.Base {
        args: {
          offscreen: boolean;
          route_id: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannel::OnCreateCommandBuffer';
        // Denotes the end of the event OnCreateCommandBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDestroyCommandBuffer {
      interface X extends TraceEvent.Base {
        args: {
          route_id: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannel::OnDestroyCommandBuffer';
        // Denotes the end of the event OnDestroyCommandBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuChannelHost {
    type CreateViewCommandBuffer = 
      TraceEvent.GpuChannelHost.CreateViewCommandBuffer.X;
  
    type Send = 
      TraceEvent.GpuChannelHost.Send.X;
  
    namespace CreateViewCommandBuffer {
      interface X extends TraceEvent.Base {
        args: {
          surface_handle: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannelHost::CreateViewCommandBuffer';
        // Denotes the end of the event CreateViewCommandBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Send {
      interface X extends TraceEvent.Base {
        args: {
          chrome_legacy_ipc: {
            message_class: string;
            message_line: number;
          };
        };
        // Duration.
        dur: number;
        name: 'GpuChannelHost::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuChannelMsg_CreateCommandBuffer {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateCommandBuffer';
      // Denotes the end of the event GpuChannelMsg_CreateCommandBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_CreateGMBSharedImage {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateGMBSharedImage';
      // Denotes the end of the event GpuChannelMsg_CreateGMBSharedImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_CreateSharedImage {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateSharedImage';
      // Denotes the end of the event GpuChannelMsg_CreateSharedImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_CreateSharedImageWithData {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateSharedImageWithData';
      // Denotes the end of the event GpuChannelMsg_CreateSharedImageWithData.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_DestroyCommandBuffer {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_DestroyCommandBuffer';
      // Denotes the end of the event GpuChannelMsg_DestroyCommandBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_DestroySharedImage {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_DestroySharedImage';
      // Denotes the end of the event GpuChannelMsg_DestroySharedImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_RegisterSharedImageUploadBuffer {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_RegisterSharedImageUploadBuffer';
      // Denotes the end of the event GpuChannelMsg_RegisterSharedImageUploadBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_AsyncFlush {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_AsyncFlush';
      // Denotes the end of the event GpuCommandBufferMsg_AsyncFlush.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_DestroyTransferBuffer {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_DestroyTransferBuffer';
      // Denotes the end of the event GpuCommandBufferMsg_DestroyTransferBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_RegisterTransferBuffer {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_RegisterTransferBuffer';
      // Denotes the end of the event GpuCommandBufferMsg_RegisterTransferBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_SetGetBuffer {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_SetGetBuffer';
      // Denotes the end of the event GpuCommandBufferMsg_SetGetBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_WaitForGetOffsetInRange {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_WaitForGetOffsetInRange';
      // Denotes the end of the event GpuCommandBufferMsg_WaitForGetOffsetInRange.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuHostImpl {
    type CreateChannelCache = 
      TraceEvent.GpuHostImpl.CreateChannelCache.X;
  
    type EstablishGpuChannel = 
      TraceEvent.GpuHostImpl.EstablishGpuChannel.X;
  
    type OnChannelEstablished = 
      TraceEvent.GpuHostImpl.OnChannelEstablished.X;
  
    type StoreShaderToDisk = 
      TraceEvent.GpuHostImpl.StoreShaderToDisk.X;
  
    namespace CreateChannelCache {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::CreateChannelCache';
        // Denotes the end of the event CreateChannelCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EstablishGpuChannel {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::EstablishGpuChannel';
        // Denotes the end of the event EstablishGpuChannel.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnChannelEstablished {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::OnChannelEstablished';
        // Denotes the end of the event OnChannelEstablished.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StoreShaderToDisk {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::StoreShaderToDisk';
        // Denotes the end of the event StoreShaderToDisk.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuImageDecodeCache {
    type DecodeImage = 
      TraceEvent.GpuImageDecodeCache.DecodeImage.X;
  
    type UploadImage = 
      TraceEvent.GpuImageDecodeCache.UploadImage.X;
  
    namespace DecodeImage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::DecodeImage';
        // Denotes the end of the event DecodeImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UploadImage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::UploadImage';
        // Denotes the end of the event UploadImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuImageDecodeTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.GpuImageDecodeTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends TraceEvent.Base {
        args: {
          mode: string;
          source_prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuRasterBuffer {
    type Playback = 
      TraceEvent.GpuRasterBuffer.Playback.X;
  
    namespace Playback {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuRasterBuffer::Playback';
        // Denotes the end of the event Playback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GPUTask {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          renderer_pid: number;
          used_bytes: number;
        };
      };
      // Duration.
      dur: number;
      name: 'GPUTask';
      // Denotes the end of the event GPUTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Graphics {
    namespace Pipeline {
      type DrawAndSwap = 
        TraceEvent.Graphics.Pipeline.DrawAndSwap.F |
        TraceEvent.Graphics.Pipeline.DrawAndSwap.S |
        TraceEvent.Graphics.Pipeline.DrawAndSwap.T;
    
      namespace DrawAndSwap {
        interface F extends TraceEvent.Base {
          args: {
            status?: string;
          };
          id: string;
          name: 'Graphics.Pipeline.DrawAndSwap';
          // Denotes the ending of the async event DrawAndSwap.
          ph: 'F';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts?: number;
        }
      
        interface S extends TraceEvent.Base {
          args: {
          
          };
          id: string;
          name: 'Graphics.Pipeline.DrawAndSwap';
          // Denotes the beginning of the async event DrawAndSwap.
          ph: 'S';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface T extends TraceEvent.Base {
          args: {
            step: string;
          };
          id: string;
          name: 'Graphics.Pipeline.DrawAndSwap';
          // Denotes a step into the async event DrawAndSwap.
          ph: 'T';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts?: number;
        }
      }
    
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'Graphics.Pipeline';
        // Denotes the ending of the async flow event Pipeline.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'Graphics.Pipeline';
        // Denotes the beginning of the async flow event Pipeline.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
          FrameSinkId?: string;
          display_trace?: number;
          step: string;
        };
        // Duration.
        dur: number;
        name: 'Graphics.Pipeline';
        // Denotes the end of the event Pipeline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GraphicsLayer {
    type PaintContents = 
      TraceEvent.GraphicsLayer.PaintContents.X;
  
    namespace PaintContents {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GraphicsLayer::PaintContents';
        // Denotes the end of the event PaintContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GraphicsLayerTreeBuilder {
    type Rebuild = 
      TraceEvent.GraphicsLayerTreeBuilder.Rebuild.X;
  
    namespace Rebuild {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GraphicsLayerTreeBuilder::rebuild';
        // Denotes the end of the event Rebuild.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GraphicsLayerUpdater {
    type Update = 
      TraceEvent.GraphicsLayerUpdater.Update.X;
  
    namespace Update {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GraphicsLayerUpdater::update';
        // Denotes the end of the event Update.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrShaderCache {
    type Load = 
      TraceEvent.GrShaderCache.Load.X;
  
    type Store = 
      TraceEvent.GrShaderCache.Store.X;
  
    namespace Load {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrShaderCache::load';
        // Denotes the end of the event Load.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Store {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrShaderCache::store';
        // Denotes the end of the event Store.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HandleMouseMove {
    interface X extends TraceEvent.Base {
      args: {
        x: number;
        y: number;
      };
      // Duration.
      dur: number;
      name: 'HandleMouseMove';
      // Denotes the end of the event HandleMouseMove.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HeadEnd {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'headEnd';
      // Denotes a mark of the event HeadEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HeadTime {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'headTime';
      // Denotes the beginning of the nestable async flow event HeadTime.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'headTime';
      // Denotes a step into the nestable async flow event HeadTime.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace HistoryBackend {
    type AddPage = 
      TraceEvent.HistoryBackend.AddPage.X;
  
    type AddPagesWithDetails = 
      TraceEvent.HistoryBackend.AddPagesWithDetails.X;
  
    type CloneFaviconMappingsForPages = 
      TraceEvent.HistoryBackend.CloneFaviconMappingsForPages.X;
  
    type ProcessDBTask = 
      TraceEvent.HistoryBackend.ProcessDBTask.X;
  
    type SetPageTitle = 
      TraceEvent.HistoryBackend.SetPageTitle.X;
  
    namespace AddPage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryBackend::AddPage';
        // Denotes the end of the event AddPage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AddPagesWithDetails {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryBackend::AddPagesWithDetails';
        // Denotes the end of the event AddPagesWithDetails.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CloneFaviconMappingsForPages {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryBackend::CloneFaviconMappingsForPages';
        // Denotes the end of the event CloneFaviconMappingsForPages.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProcessDBTask {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryBackend::ProcessDBTask';
        // Denotes the end of the event ProcessDBTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetPageTitle {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryBackend::SetPageTitle';
        // Denotes the end of the event SetPageTitle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryQuickProvider {
    type Start = 
      TraceEvent.HistoryQuickProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryQuickProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryService {
    type AddPage = 
      TraceEvent.HistoryService.AddPage.X;
  
    type CloneFaviconMappingsForPages = 
      TraceEvent.HistoryService.CloneFaviconMappingsForPages.X;
  
    type GetFaviconsForURL = 
      TraceEvent.HistoryService.GetFaviconsForURL.X;
  
    type ScheduleDBTask = 
      TraceEvent.HistoryService.ScheduleDBTask.X;
  
    type ScheduleTask = 
      TraceEvent.HistoryService.ScheduleTask.X;
  
    type SetPageTitle = 
      TraceEvent.HistoryService.SetPageTitle.X;
  
    namespace AddPage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::AddPage';
        // Denotes the end of the event AddPage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CloneFaviconMappingsForPages {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::CloneFaviconMappingsForPages';
        // Denotes the end of the event CloneFaviconMappingsForPages.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetFaviconsForURL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::GetFaviconsForURL';
        // Denotes the end of the event GetFaviconsForURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleDBTask {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::ScheduleDBTask';
        // Denotes the end of the event ScheduleDBTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTask {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::ScheduleTask';
        // Denotes the end of the event ScheduleTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetPageTitle {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::SetPageTitle';
        // Denotes the end of the event SetPageTitle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryURLProvider {
    type QueryComplete = 
      TraceEvent.HistoryURLProvider.QueryComplete.X;
  
    type Start = 
      TraceEvent.HistoryURLProvider.Start.X;
  
    namespace QueryComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryURLProvider::QueryComplete';
        // Denotes the end of the event QueryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryURLProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HitTest {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'HitTest';
      // Denotes the beginning of the event HitTest.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        endData: {
          nodeId: number;
          nodeName: string;
          rectilinear: boolean;
          x: number;
          y: number;
        };
      };
      name: 'HitTest';
      // Denotes the ending of the event HitTest.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        endData: {
          move?: boolean;
          nodeId: number;
          nodeName: string;
          rectilinear: boolean;
          x: number;
          y: number;
        };
      };
      // Duration.
      dur: number;
      name: 'HitTest';
      // Denotes the end of the event HitTest.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_ATTEMPT_FINISHED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          attempt_number: number;
          net_error: number;
          os_error: number;
          os_error_string: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_ATTEMPT_FINISHED';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_ATTEMPT_FINISHED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_ATTEMPT_STARTED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          attempt_number: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_ATTEMPT_STARTED';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_ATTEMPT_STARTED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_CACHE_HIT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          addresses: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13'?: string;
          }[];
          expiration: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_CACHE_HIT';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_CACHE_HIT.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_CREATE_JOB {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_CREATE_JOB';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_CREATE_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_DNS_TASK {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          addresses?: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10'?: string;
            '11'?: string;
            '12'?: string;
            '13'?: string;
            '14'?: {
            
            };
          }[];
          expiration: string;
          net_error?: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_DNS_TASK';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_DNS_TASK.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_DNS_TASK';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_DNS_TASK.
      ph: 'e';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          cached: boolean;
          ipv6_available: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB_ATTACH {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB_ATTACH';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_JOB_ATTACH.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          priority: string;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB_STARTED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB_STARTED';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_JOB_STARTED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          host: string;
          net_error?: number;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_JOB.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_JOB.
      ph: 'e';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_PROC_TASK {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          net_error: number;
          os_error: number;
          os_error_string: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_PROC_TASK';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_PROC_TASK.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_PROC_TASK';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_PROC_TASK.
      ph: 'e';
      scope: string;
    }
  }

  namespace HOST_RESOLVER_IMPL_REQUEST {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          allow_cached_response: boolean;
          dns_query_type: number;
          host: string;
          is_speculative: boolean;
          net_error?: number;
          network_isolation_key: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_REQUEST';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_REQUEST.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_REQUEST';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_REQUEST.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTMLDocumentParser {
    type Append = 
      TraceEvent.HTMLDocumentParser.Append.X;
  
    type AppendBytes = 
      TraceEvent.HTMLDocumentParser.AppendBytes.X;
  
    type AttemptToEnd = 
      TraceEvent.HTMLDocumentParser.AttemptToEnd.X;
  
    type DocumentElementAvailable = 
      TraceEvent.HTMLDocumentParser.DocumentElementAvailable.X;
  
    type EndIfDelayed = 
      TraceEvent.HTMLDocumentParser.EndIfDelayed.X;
  
    type EnqueueTokenizedChunk = 
      TraceEvent.HTMLDocumentParser.EnqueueTokenizedChunk.X;
  
    type ExecuteScriptsWaitingForResources = 
      TraceEvent.HTMLDocumentParser.ExecuteScriptsWaitingForResources.X;
  
    type FetchQueuedPreloads = 
      TraceEvent.HTMLDocumentParser.FetchQueuedPreloads.X;
  
    type Flush = 
      TraceEvent.HTMLDocumentParser.Flush.X;
  
    type Insert = 
      TraceEvent.HTMLDocumentParser.Insert.X;
  
    type NotifyScriptLoaded = 
      TraceEvent.HTMLDocumentParser.NotifyScriptLoaded.X;
  
    type PrepareToStopParsing = 
      TraceEvent.HTMLDocumentParser.PrepareToStopParsing.X;
  
    type ProcessTokenizedChunkFromBackgroundParser = 
      TraceEvent.HTMLDocumentParser.ProcessTokenizedChunkFromBackgroundParser.X;
  
    type PumpTokenizer = 
      TraceEvent.HTMLDocumentParser.PumpTokenizer.X;
  
    type PumpTokenizerIfPossible = 
      TraceEvent.HTMLDocumentParser.PumpTokenizerIfPossible.X;
  
    type ResumeParsingAfterPause = 
      TraceEvent.HTMLDocumentParser.ResumeParsingAfterPause.X;
  
    type RunScriptsForPausedTreeBuilder = 
      TraceEvent.HTMLDocumentParser.RunScriptsForPausedTreeBuilder.X;
  
    type StartBackgroundParser = 
      TraceEvent.HTMLDocumentParser.StartBackgroundParser.X;
  
    namespace Append {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
          size: number;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::append';
        // Denotes the end of the event Append.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AppendBytes {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
          size: number;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::appendBytes';
        // Denotes the end of the event AppendBytes.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AttemptToEnd {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::AttemptToEnd';
        // Denotes the end of the event AttemptToEnd.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DocumentElementAvailable {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::DocumentElementAvailable';
        // Denotes the end of the event DocumentElementAvailable.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EndIfDelayed {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::EndIfDelayed';
        // Denotes the end of the event EndIfDelayed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EnqueueTokenizedChunk {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::EnqueueTokenizedChunk';
        // Denotes the end of the event EnqueueTokenizedChunk.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForResources {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::ExecuteScriptsWaitingForResources';
        // Denotes the end of the event ExecuteScriptsWaitingForResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FetchQueuedPreloads {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::FetchQueuedPreloads';
        // Denotes the end of the event FetchQueuedPreloads.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Flush {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Insert {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
          source_length: number;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::insert';
        // Denotes the end of the event Insert.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyScriptLoaded {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::NotifyScriptLoaded';
        // Denotes the end of the event NotifyScriptLoaded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PrepareToStopParsing {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::PrepareToStopParsing';
        // Denotes the end of the event PrepareToStopParsing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProcessTokenizedChunkFromBackgroundParser {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::processTokenizedChunkFromBackgroundParser';
        // Denotes the end of the event ProcessTokenizedChunkFromBackgroundParser.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PumpTokenizer {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
          should_complete: boolean;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::PumpTokenizer';
        // Denotes the end of the event PumpTokenizer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PumpTokenizerIfPossible {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::PumpTokenizerIfPossible';
        // Denotes the end of the event PumpTokenizerIfPossible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ResumeParsingAfterPause {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::ResumeParsingAfterPause';
        // Denotes the end of the event ResumeParsingAfterPause.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunScriptsForPausedTreeBuilder {
      interface X extends TraceEvent.Base {
        args: {
          parser: string;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::RunScriptsForPausedTreeBuilder';
        // Denotes the end of the event RunScriptsForPausedTreeBuilder.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StartBackgroundParser {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::StartBackgroundParser';
        // Denotes the end of the event StartBackgroundParser.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLFrameOwnerElement {
    type LoadOrRedirectSubframe = 
      TraceEvent.HTMLFrameOwnerElement.LoadOrRedirectSubframe.X;
  
    namespace LoadOrRedirectSubframe {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLFrameOwnerElement::LoadOrRedirectSubframe';
        // Denotes the end of the event LoadOrRedirectSubframe.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLParserScriptRunner {
    type Execute = 
      TraceEvent.HTMLParserScriptRunner.Execute.X;
  
    type ExecuteScriptsWaitingForLoad = 
      TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForLoad.X;
  
    type ExecuteScriptsWaitingForParsing = 
      TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForParsing.X;
  
    type ExecuteScriptsWaitingForResources = 
      TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForResources.X;
  
    namespace Execute {
      interface X extends TraceEvent.Base {
        args: {
          data: {
            columnNumber: number;
            frame: string;
            lineNumber: number;
          };
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::execute';
        // Denotes the end of the event Execute.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForLoad {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::executeScriptsWaitingForLoad';
        // Denotes the end of the event ExecuteScriptsWaitingForLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForParsing {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::executeScriptsWaitingForParsing';
        // Denotes the end of the event ExecuteScriptsWaitingForParsing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForResources {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::executeScriptsWaitingForResources';
        // Denotes the end of the event ExecuteScriptsWaitingForResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLParserScriptRunnerExecuteScript {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'HTMLParserScriptRunner ExecuteScript';
      // Denotes the end of the event HTMLParserScriptRunnerExecuteScript.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTMLSelectElement {
    type SelectOption = 
      TraceEvent.HTMLSelectElement.SelectOption.X;
  
    namespace SelectOption {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLSelectElement::selectOption';
        // Denotes the end of the event SelectOption.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTTP_CACHE_ADD_TO_ENTRY {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_ADD_TO_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_ADD_TO_ENTRY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_ADD_TO_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_ADD_TO_ENTRY.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_CALLER_REQUEST_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16'?: {
            
            };
            '17'?: {
            
            };
            '18'?: {
            
            };
            '19'?: {
            
            };
            '20'?: {
            
            };
            '21'?: {
            
            };
            '22'?: {
            
            };
            '23'?: {
            
            };
            '24'?: {
            
            };
            '25'?: {
            
            };
            '26'?: {
            
            };
            '27'?: {
            
            };
            '28'?: {
            
            };
            '29'?: {
            
            };
            '30'?: {
            
            };
            '31'?: {
            
            };
            '32'?: {
            
            };
            '33'?: {
            
            };
            '34'?: {
            
            };
            '35'?: {
            
            };
            '36'?: {
            
            };
            '37'?: {
            
            };
            '38'?: {
            
            };
            '39'?: {
            
            };
            '40'?: {
            
            };
            '41'?: {
            
            };
            '42'?: {
            
            };
            '43'?: {
            
            };
            '44'?: {
            
            };
            '45'?: {
            
            };
            '46'?: {
            
            };
            '47'?: {
            
            };
            '48'?: {
            
            };
            '49'?: {
            
            };
            '50'?: {
            
            };
            '51'?: {
            
            };
            '52'?: {
            
            };
            '53'?: {
            
            };
            '54'?: {
            
            };
            '55'?: {
            
            };
            '56'?: {
            
            };
            '57'?: {
            
            };
            '58'?: {
            
            };
            '59'?: {
            
            };
            '60'?: {
            
            };
            '61'?: {
            
            };
            '62'?: {
            
            };
            '63'?: {
            
            };
            '64'?: {
            
            };
            '65'?: {
            
            };
            '66'?: {
            
            };
            '67'?: {
            
            };
            '68'?: {
            
            };
            '69'?: {
            
            };
            '70'?: {
            
            };
            '71'?: {
            
            };
            '72'?: {
            
            };
            '73'?: {
            
            };
            '74'?: {
            
            };
            '75'?: {
            
            };
            '76'?: {
            
            };
            '77'?: {
            
            };
            '78'?: {
            
            };
            '79'?: {
            
            };
            '80'?: {
            
            };
            '81'?: {
            
            };
            '82'?: {
            
            };
            '83'?: {
            
            };
            '84'?: {
            
            };
            '85'?: {
            
            };
            '86'?: {
            
            };
            '87'?: {
            
            };
            '88'?: {
            
            };
            '89'?: {
            
            };
            '90'?: {
            
            };
            '91'?: {
            
            };
            '92'?: {
            
            };
            '93'?: {
            
            };
            '94'?: {
            
            };
            '95'?: {
            
            };
            '96'?: {
            
            };
            '97'?: {
            
            };
            '98'?: {
            
            };
            '99'?: {
            
            };
            '100'?: {
            
            };
            '101'?: {
            
            };
            '102'?: {
            
            };
            '103'?: {
            
            };
            '104'?: {
            
            };
            '105'?: {
            
            };
            '106'?: {
            
            };
            '107'?: {
            
            };
            '108'?: {
            
            };
            '109'?: {
            
            };
            '110'?: {
            
            };
            '111'?: {
            
            };
            '112'?: {
            
            };
            '113'?: {
            
            };
            '114'?: {
            
            };
            '115'?: {
            
            };
            '116'?: {
            
            };
            '117'?: {
            
            };
            '118'?: {
            
            };
            '119'?: {
            
            };
            '120'?: {
            
            };
            '121'?: {
            
            };
            '122'?: {
            
            };
            '123'?: {
            
            };
            '124'?: {
            
            };
            '125'?: {
            
            };
            '126'?: {
            
            };
            '127'?: {
            
            };
            '128'?: {
            
            };
            '129'?: {
            
            };
            '130'?: {
            
            };
            '131'?: {
            
            };
          }[];
          line: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_CALLER_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_CACHE_CALLER_REQUEST_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_CACHE_CREATE_ENTRY {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_CREATE_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_CREATE_ENTRY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_CREATE_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_CREATE_ENTRY.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_DOOM_ENTRY {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_DOOM_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_DOOM_ENTRY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_DOOM_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_DOOM_ENTRY.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_GET_BACKEND {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_GET_BACKEND';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_GET_BACKEND.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_GET_BACKEND';
      // Denotes a step into the nestable async flow event HTTP_CACHE_GET_BACKEND.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_OPEN_OR_CREATE_ENTRY {
    interface b extends TraceEvent.Base {
      args: {
        params?: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_OPEN_OR_CREATE_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_OPEN_OR_CREATE_ENTRY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_OPEN_OR_CREATE_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_OPEN_OR_CREATE_ENTRY.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_READ_DATA {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_READ_DATA';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_READ_DATA.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_READ_DATA';
      // Denotes a step into the nestable async flow event HTTP_CACHE_READ_DATA.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_READ_INFO {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_READ_INFO';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_READ_INFO.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_READ_INFO';
      // Denotes a step into the nestable async flow event HTTP_CACHE_READ_INFO.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_WRITE_DATA {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_DATA';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_WRITE_DATA.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_DATA';
      // Denotes a step into the nestable async flow event HTTP_CACHE_WRITE_DATA.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_CACHE_WRITE_INFO {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_INFO';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_WRITE_INFO.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_INFO';
      // Denotes a step into the nestable async flow event HTTP_CACHE_WRITE_INFO.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_BOUND_TO_REQUEST {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_BOUND_TO_REQUEST';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_BOUND_TO_REQUEST.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          alt_svc: string;
          is_broken: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER_BOUND {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER_BOUND';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER_BOUND.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          proxy_server: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          is_preconnect: boolean;
          url: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB_CONTROLLER.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_DELAYED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delay: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_DELAYED';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_DELAYED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_INIT_CONNECTION {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_INIT_CONNECTION';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB_INIT_CONNECTION.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_STREAM_JOB_INIT_CONNECTION';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB_INIT_CONNECTION.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_THROTTLED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_THROTTLED';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_THROTTLED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB_WAITING {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          should_wait: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_WAITING';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB_WAITING.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_STREAM_JOB_WAITING';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB_WAITING.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_STREAM_JOB {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          expect_spdy: boolean;
          original_url: string;
          priority: string;
          source_dependency: {
            id: number;
            type: number;
          };
          url: string;
          using_quic: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_STREAM_JOB';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_STREAM_REQUEST_BOUND_TO_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_BOUND_TO_JOB';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_BOUND_TO_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_REQUEST_PROTO {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          proto: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_PROTO';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_PROTO.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_REQUEST_STARTED_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_STARTED_JOB';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_STARTED_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_STREAM_REQUEST {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_REQUEST.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST';
      // Denotes a step into the nestable async flow event HTTP_STREAM_REQUEST.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
            '13'?: {
            
            };
            '14'?: {
            
            };
            '15'?: {
            
            };
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: string;
          }[];
          quic_priority: number;
          quic_stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_TRANSACTION_READ_BODY {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_BODY';
      // Denotes the beginning of the nestable async flow event HTTP_TRANSACTION_READ_BODY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_BODY';
      // Denotes a step into the nestable async flow event HTTP_TRANSACTION_READ_BODY.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_TRANSACTION_READ_HEADERS {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_HEADERS';
      // Denotes the beginning of the nestable async flow event HTTP_TRANSACTION_READ_HEADERS.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_HEADERS';
      // Denotes a step into the nestable async flow event HTTP_TRANSACTION_READ_HEADERS.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP_TRANSACTION_READ_RESPONSE_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_RESPONSE_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_READ_RESPONSE_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP_TRANSACTION_SEND_REQUEST {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_SEND_REQUEST';
      // Denotes the beginning of the nestable async flow event HTTP_TRANSACTION_SEND_REQUEST.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'HTTP_TRANSACTION_SEND_REQUEST';
      // Denotes a step into the nestable async flow event HTTP_TRANSACTION_SEND_REQUEST.
      ph: 'e';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_CLOSE {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          description: string;
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_CLOSE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_CLOSE.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_INITIALIZED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          protocol: string;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_INITIALIZED';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_INITIALIZED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_PING {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          is_ack: boolean;
          type: string;
          unique_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_PING';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_PING.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_POOL_REMOVE_SESSION {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_REMOVE_SESSION';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_REMOVE_SESSION.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_DATA {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          size: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_DATA';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_DATA.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_GOAWAY {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          active_streams: number;
          debug_data: string;
          error_code: string;
          last_accepted_stream_id: number;
          unclaimed_streams: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_GOAWAY';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_GOAWAY.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_RST_STREAM {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          error_code: string;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_RST_STREAM';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_RST_STREAM.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_SETTING {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          id: string;
          value: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_SETTING';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_SETTING.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_SETTINGS_ACK {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_SETTINGS_ACK';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_SETTINGS_ACK.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_SETTINGS {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_SETTINGS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_SETTINGS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_RECV_WINDOW_UPDATE {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_WINDOW_UPDATE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_WINDOW_UPDATE.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_SEND_DATA {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          size: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_DATA';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_DATA.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_SEND_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          exclusive: boolean;
          fin: boolean;
          has_priority: boolean;
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
            '13'?: {
            
            };
            '14'?: {
            
            };
            '15'?: {
            
            };
          }[];
          parent_stream_id: number;
          source_dependency: {
            id: number;
            type: number;
          };
          stream_id: number;
          weight: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_SEND_RST_STREAM {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          description: string;
          error_code: string;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_RST_STREAM';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_RST_STREAM.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_SEND_SETTINGS_ACK {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_SETTINGS_ACK';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_SETTINGS_ACK.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_SEND_SETTINGS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          settings: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
            '30': string;
            '31': string;
            '32': string;
            '33': string;
            '34': string;
            '35': string;
            '36': string;
            '37': string;
            '38': string;
            '39': string;
            '40': string;
            '41': string;
            '42': string;
            '43': string;
            '44': string;
            '45': string;
            '46': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_SETTINGS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_SETTINGS.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_SEND_WINDOW_UPDATE {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_WINDOW_UPDATE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_WINDOW_UPDATE.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_UPDATE_RECV_WINDOW {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_UPDATE_RECV_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_UPDATE_RECV_WINDOW.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_UPDATE_SEND_WINDOW {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_UPDATE_SEND_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_UPDATE_SEND_WINDOW.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta_window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_SESSION {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          host: string;
          proxy: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION';
      // Denotes the beginning of the nestable async flow event HTTP2_SESSION.
      ph: 'b';
      scope: string;
    }
  }

  namespace HTTP2_STREAM_SEND_PRIORITY {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          exclusive: boolean;
          parent_stream_id: number;
          stream_id: number;
          weight: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_STREAM_SEND_PRIORITY';
      // Denotes the ending of the nestable async flow event HTTP2_STREAM_SEND_PRIORITY.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_STREAM_UPDATE_RECV_WINDOW {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_STREAM_UPDATE_RECV_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_STREAM_UPDATE_RECV_WINDOW.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP2_STREAM_UPDATE_SEND_WINDOW {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_STREAM_UPDATE_SEND_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_STREAM_UPDATE_SEND_WINDOW.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_DATA_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          payload_length: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_DATA_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event HTTP3_DATA_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_DATA_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          payload_length: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_DATA_SENT';
      // Denotes the ending of the nestable async flow event HTTP3_DATA_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_HEADERS_DECODED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_HEADERS_DECODED';
      // Denotes the ending of the nestable async flow event HTTP3_HEADERS_DECODED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_HEADERS_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          compressed_headers_length: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_HEADERS_RECEIVED';
      // Denotes the ending of the nestable async flow event HTTP3_HEADERS_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_HEADERS_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: string;
          }[];
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_HEADERS_SENT';
      // Denotes the ending of the nestable async flow event HTTP3_HEADERS_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_LOCAL_CONTROL_STREAM_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_LOCAL_CONTROL_STREAM_CREATED';
      // Denotes the ending of the nestable async flow event HTTP3_LOCAL_CONTROL_STREAM_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_LOCAL_QPACK_DECODER_STREAM_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_LOCAL_QPACK_DECODER_STREAM_CREATED';
      // Denotes the ending of the nestable async flow event HTTP3_LOCAL_QPACK_DECODER_STREAM_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_LOCAL_QPACK_ENCODER_STREAM_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_LOCAL_QPACK_ENCODER_STREAM_CREATED';
      // Denotes the ending of the nestable async flow event HTTP3_LOCAL_QPACK_ENCODER_STREAM_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_PEER_CONTROL_STREAM_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_PEER_CONTROL_STREAM_CREATED';
      // Denotes the ending of the nestable async flow event HTTP3_PEER_CONTROL_STREAM_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_PEER_QPACK_DECODER_STREAM_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_PEER_QPACK_DECODER_STREAM_CREATED';
      // Denotes the ending of the nestable async flow event HTTP3_PEER_QPACK_DECODER_STREAM_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_PEER_QPACK_ENCODER_STREAM_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_PEER_QPACK_ENCODER_STREAM_CREATED';
      // Denotes the ending of the nestable async flow event HTTP3_PEER_QPACK_ENCODER_STREAM_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_PRIORITY_UPDATE_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          prioritized_element_id: number;
          priority_field_value: string;
          type: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_PRIORITY_UPDATE_SENT';
      // Denotes the ending of the nestable async flow event HTTP3_PRIORITY_UPDATE_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_SETTINGS_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          SETTINGS_MAX_FIELD_SECTION_SIZE: number;
          SETTINGS_QPACK_BLOCKED_STREAMS: number;
          SETTINGS_QPACK_MAX_TABLE_CAPACITY: number;
          'UNSUPPORTED_SETTINGS_TYPE(115423308277)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(131819807352)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(132819573782)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(2176246068)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(65737390878)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(9609361805)'?: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_SETTINGS_RECEIVED';
      // Denotes the ending of the nestable async flow event HTTP3_SETTINGS_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_SETTINGS_RESUMED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          SETTINGS_MAX_FIELD_SECTION_SIZE: number;
          SETTINGS_QPACK_BLOCKED_STREAMS: number;
          SETTINGS_QPACK_MAX_TABLE_CAPACITY: number;
          'UNSUPPORTED_SETTINGS_TYPE(116133154554)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(131116017049)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(14673266737)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(61598295957)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(72303403569)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(84364194315)'?: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_SETTINGS_RESUMED';
      // Denotes the ending of the nestable async flow event HTTP3_SETTINGS_RESUMED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_SETTINGS_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          SETTINGS_MAX_FIELD_SECTION_SIZE: number;
          SETTINGS_QPACK_BLOCKED_STREAMS: number;
          SETTINGS_QPACK_MAX_TABLE_CAPACITY: number;
          'UNSUPPORTED_SETTINGS_TYPE(25258330166)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(5485934377)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(61451233166)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(68299164941)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(81172851389)'?: number;
          'UNSUPPORTED_SETTINGS_TYPE(94042103876)'?: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_SETTINGS_SENT';
      // Denotes the ending of the nestable async flow event HTTP3_SETTINGS_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace HTTP3_UNKNOWN_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          frame_type: number;
          payload_length: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP3_UNKNOWN_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event HTTP3_UNKNOWN_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace HttpCacheTransaction {
    type DoAddToEntry = 
      TraceEvent.HttpCacheTransaction.DoAddToEntry.X;
  
    type DoAddToEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoAddToEntryComplete.X;
  
    type DoCacheDispatchValidation = 
      TraceEvent.HttpCacheTransaction.DoCacheDispatchValidation.X;
  
    type DoCacheReadData = 
      TraceEvent.HttpCacheTransaction.DoCacheReadData.X;
  
    type DoCacheReadDataComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheReadDataComplete.X;
  
    type DoCacheReadResponse = 
      TraceEvent.HttpCacheTransaction.DoCacheReadResponse.X;
  
    type DoCacheReadResponseComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheReadResponseComplete.X;
  
    type DoCacheWriteResponse = 
      TraceEvent.HttpCacheTransaction.DoCacheWriteResponse.X;
  
    type DoCacheWriteResponseComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheWriteResponseComplete.X;
  
    type DoCacheWriteUpdatedResponse = 
      TraceEvent.HttpCacheTransaction.DoCacheWriteUpdatedResponse.X;
  
    type DoCacheWriteUpdatedResponseComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheWriteUpdatedResponseComplete.X;
  
    type DoCreateEntry = 
      TraceEvent.HttpCacheTransaction.DoCreateEntry.X;
  
    type DoCreateEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoCreateEntryComplete.X;
  
    type DoDoomEntry = 
      TraceEvent.HttpCacheTransaction.DoDoomEntry.X;
  
    type DoDoomEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoDoomEntryComplete.X;
  
    type DoInitEntry = 
      TraceEvent.HttpCacheTransaction.DoInitEntry.X;
  
    type DoNetworkRead = 
      TraceEvent.HttpCacheTransaction.DoNetworkRead.X;
  
    type DoNetworkReadCacheWrite = 
      TraceEvent.HttpCacheTransaction.DoNetworkReadCacheWrite.X;
  
    type DoNetworkReadCacheWriteComplete = 
      TraceEvent.HttpCacheTransaction.DoNetworkReadCacheWriteComplete.X;
  
    type DoNetworkReadComplete = 
      TraceEvent.HttpCacheTransaction.DoNetworkReadComplete.X;
  
    type DoOpenOrCreateEntry = 
      TraceEvent.HttpCacheTransaction.DoOpenOrCreateEntry.X;
  
    type DoOpenOrCreateEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoOpenOrCreateEntryComplete.X;
  
    type DoOverwriteCachedResponse = 
      TraceEvent.HttpCacheTransaction.DoOverwriteCachedResponse.X;
  
    type DoSendRequest = 
      TraceEvent.HttpCacheTransaction.DoSendRequest.X;
  
    type DoSendRequestComplete = 
      TraceEvent.HttpCacheTransaction.DoSendRequestComplete.X;
  
    type DoSuccessfulSendRequest = 
      TraceEvent.HttpCacheTransaction.DoSuccessfulSendRequest.X;
  
    type DoTruncateCachedData = 
      TraceEvent.HttpCacheTransaction.DoTruncateCachedData.X;
  
    type DoTruncateCachedMetadata = 
      TraceEvent.HttpCacheTransaction.DoTruncateCachedMetadata.X;
  
    type DoTruncateCachedMetadataComplete = 
      TraceEvent.HttpCacheTransaction.DoTruncateCachedMetadataComplete.X;
  
    type DoUpdateCachedResponse = 
      TraceEvent.HttpCacheTransaction.DoUpdateCachedResponse.X;
  
    type DoUpdateCachedResponseComplete = 
      TraceEvent.HttpCacheTransaction.DoUpdateCachedResponseComplete.X;
  
    type Transaction = 
      TraceEvent.HttpCacheTransaction.Transaction.X;
  
    namespace DoAddToEntry {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoAddToEntry';
        // Denotes the end of the event DoAddToEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoAddToEntryComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoAddToEntryComplete';
        // Denotes the end of the event DoAddToEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheDispatchValidation {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheDispatchValidation';
        // Denotes the end of the event DoCacheDispatchValidation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadData {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadData';
        // Denotes the end of the event DoCacheReadData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadDataComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadDataComplete';
        // Denotes the end of the event DoCacheReadDataComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadResponse';
        // Denotes the end of the event DoCacheReadResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadResponseComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadResponseComplete';
        // Denotes the end of the event DoCacheReadResponseComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheWriteResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheWriteResponse';
        // Denotes the end of the event DoCacheWriteResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheWriteResponseComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheWriteResponseComplete';
        // Denotes the end of the event DoCacheWriteResponseComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheWriteUpdatedResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheWriteUpdatedResponse';
        // Denotes the end of the event DoCacheWriteUpdatedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheWriteUpdatedResponseComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheWriteUpdatedResponseComplete';
        // Denotes the end of the event DoCacheWriteUpdatedResponseComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCreateEntry {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCreateEntry';
        // Denotes the end of the event DoCreateEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCreateEntryComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCreateEntryComplete';
        // Denotes the end of the event DoCreateEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoDoomEntry {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoDoomEntry';
        // Denotes the end of the event DoDoomEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoDoomEntryComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoDoomEntryComplete';
        // Denotes the end of the event DoDoomEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoInitEntry {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoInitEntry';
        // Denotes the end of the event DoInitEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkRead {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkRead';
        // Denotes the end of the event DoNetworkRead.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkReadCacheWrite {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkReadCacheWrite';
        // Denotes the end of the event DoNetworkReadCacheWrite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkReadCacheWriteComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkReadCacheWriteComplete';
        // Denotes the end of the event DoNetworkReadCacheWriteComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkReadComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkReadComplete';
        // Denotes the end of the event DoNetworkReadComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoOpenOrCreateEntry {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoOpenOrCreateEntry';
        // Denotes the end of the event DoOpenOrCreateEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoOpenOrCreateEntryComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoOpenOrCreateEntryComplete';
        // Denotes the end of the event DoOpenOrCreateEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoOverwriteCachedResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoOverwriteCachedResponse';
        // Denotes the end of the event DoOverwriteCachedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSendRequest {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoSendRequest';
        // Denotes the end of the event DoSendRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSendRequestComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoSendRequestComplete';
        // Denotes the end of the event DoSendRequestComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSuccessfulSendRequest {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoSuccessfulSendRequest';
        // Denotes the end of the event DoSuccessfulSendRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTruncateCachedData {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoTruncateCachedData';
        // Denotes the end of the event DoTruncateCachedData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTruncateCachedMetadata {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoTruncateCachedMetadata';
        // Denotes the end of the event DoTruncateCachedMetadata.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTruncateCachedMetadataComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoTruncateCachedMetadataComplete';
        // Denotes the end of the event DoTruncateCachedMetadataComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoUpdateCachedResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoUpdateCachedResponse';
        // Denotes the end of the event DoUpdateCachedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoUpdateCachedResponseComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoUpdateCachedResponseComplete';
        // Denotes the end of the event DoUpdateCachedResponseComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Transaction {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::Transaction';
        // Denotes the end of the event Transaction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace IdentityGetAuthTokenFunction {
    interface b extends TraceEvent.Base {
      args: {
        extension: string;
      };
      id2: {
        local: string;
      };
      name: 'IdentityGetAuthTokenFunction';
      // Denotes the beginning of the nestable async flow event IdentityGetAuthTokenFunction.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'IdentityGetAuthTokenFunction';
      // Denotes a step into the nestable async flow event IdentityGetAuthTokenFunction.
      ph: 'e';
      scope: string;
    }
  }

  namespace IdentityMintRequestQueue {
    interface b extends TraceEvent.Base {
      args: {
        completed: string;
        type: number;
      };
      id2: {
        local: string;
      };
      name: 'IdentityMintRequestQueue';
      // Denotes the beginning of the nestable async flow event IdentityMintRequestQueue.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'IdentityMintRequestQueue';
      // Denotes a step into the nestable async flow event IdentityMintRequestQueue.
      ph: 'e';
      scope: string;
    }
  }

  namespace Idle_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'idle_tq';
      // Denotes the end of the event Idle_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ImageAnimationController {
    type AnimateImagesForSyncTree = 
      TraceEvent.ImageAnimationController.AnimateImagesForSyncTree.X;
  
    type WillActivate = 
      TraceEvent.ImageAnimationController.WillActivate.X;
  
    namespace AnimateImagesForSyncTree {
      interface X extends TraceEvent.Base {
        args: {
          frame_time_from_now: number;
        };
        // Duration.
        dur: number;
        name: 'ImageAnimationController::AnimateImagesForSyncTree';
        // Denotes the end of the event AnimateImagesForSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvalidationScheduler {
      type RequestBeginFrame = 
        TraceEvent.ImageAnimationController.InvalidationScheduler.RequestBeginFrame.X;
    
      type RequestInvalidation = 
        TraceEvent.ImageAnimationController.InvalidationScheduler.RequestInvalidation.X;
    
      namespace RequestBeginFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ImageAnimationController::InvalidationScheduler::RequestBeginFrame';
          // Denotes the end of the event RequestBeginFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RequestInvalidation {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ImageAnimationController::InvalidationScheduler::RequestInvalidation';
          // Denotes the end of the event RequestInvalidation.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace WillActivate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageAnimationController::WillActivate';
        // Denotes the end of the event WillActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageDecoder {
    type DecodeFrameBufferAtIndex = 
      TraceEvent.ImageDecoder.DecodeFrameBufferAtIndex.X;
  
    namespace DecodeFrameBufferAtIndex {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageDecoder::DecodeFrameBufferAtIndex';
        // Denotes the end of the event DecodeFrameBufferAtIndex.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageDecodeTask {
    interface B extends TraceEvent.Base {
      args: {
        pixelRefId: number;
      };
      name: 'ImageDecodeTask';
      // Denotes the beginning of the event ImageDecodeTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
      
      };
      name: 'ImageDecodeTask';
      // Denotes the ending of the event ImageDecodeTask.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        pixelRefId: number;
      };
      // Duration.
      dur: number;
      name: 'ImageDecodeTask';
      // Denotes the end of the event ImageDecodeTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ImageFrameGenerator {
    type Decode = 
      TraceEvent.ImageFrameGenerator.Decode.X;
  
    type DecodeAndScale = 
      TraceEvent.ImageFrameGenerator.DecodeAndScale.X;
  
    type DecodeToYUV = 
      TraceEvent.ImageFrameGenerator.DecodeToYUV.X;
  
    type GetYUVAInfo = 
      TraceEvent.ImageFrameGenerator.GetYUVAInfo.X;
  
    namespace Decode {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageFrameGenerator::decode';
        // Denotes the end of the event Decode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DecodeAndScale {
      interface X extends TraceEvent.Base {
        args: {
          generator: string;
        };
        // Duration.
        dur: number;
        name: 'ImageFrameGenerator::decodeAndScale';
        // Denotes the end of the event DecodeAndScale.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DecodeToYUV {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageFrameGenerator::decodeToYUV';
        // Denotes the end of the event DecodeToYUV.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetYUVAInfo {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'ImageFrameGenerator::GetYUVAInfo';
        // Denotes the end of the event GetYUVAInfo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageResourceContent {
    type UpdateImage = 
      TraceEvent.ImageResourceContent.UpdateImage.X;
  
    namespace UpdateImage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageResourceContent::updateImage';
        // Denotes the end of the event UpdateImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageTransportSurfaceOverlayMac {
    type ApplyBackpressure = 
      TraceEvent.ImageTransportSurfaceOverlayMac.ApplyBackpressure.X;
  
    type SwapBuffersInternal = 
      TraceEvent.ImageTransportSurfaceOverlayMac.SwapBuffersInternal.B |
      TraceEvent.ImageTransportSurfaceOverlayMac.SwapBuffersInternal.X;
  
    namespace ApplyBackpressure {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageTransportSurfaceOverlayMac::ApplyBackpressure';
        // Denotes the end of the event ApplyBackpressure.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SwapBuffersInternal {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'ImageTransportSurfaceOverlayMac::SwapBuffersInternal';
        // Denotes the beginning of the event SwapBuffersInternal.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageTransportSurfaceOverlayMac::SwapBuffersInternal';
        // Denotes the end of the event SwapBuffersInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageUploadTask {
    interface X extends TraceEvent.Base {
      args: {
        pixelRefId: number;
      };
      // Duration.
      dur: number;
      name: 'ImageUploadTask';
      // Denotes the end of the event ImageUploadTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ImageUploadTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.ImageUploadTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends TraceEvent.Base {
        args: {
          mode: string;
          source_prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'ImageUploadTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImplementationBase {
    type Initialize = 
      TraceEvent.ImplementationBase.Initialize.X;
  
    type WaitForCmd = 
      TraceEvent.ImplementationBase.WaitForCmd.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImplementationBase::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitForCmd {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImplementationBase::WaitForCmd';
        // Denotes the end of the event WaitForCmd.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace InitializeMojoIPCChannel {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'InitializeMojoIPCChannel';
      // Denotes the end of the event InitializeMojoIPCChannel.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Initializing {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'Initializing';
      // Denotes the beginning of the nestable async flow event Initializing.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'Initializing';
      // Denotes a step into the nestable async flow event Initializing.
      ph: 'e';
      scope: string;
    }
  }

  namespace InProcessCommandBuffer {
    type Flush = 
      TraceEvent.InProcessCommandBuffer.Flush.X;
  
    type FlushOnGpuThread = 
      TraceEvent.InProcessCommandBuffer.FlushOnGpuThread.B |
      TraceEvent.InProcessCommandBuffer.FlushOnGpuThread.X;
  
    type Initialize = 
      TraceEvent.InProcessCommandBuffer.Initialize.X;
  
    type InitializeOnGpuThread = 
      TraceEvent.InProcessCommandBuffer.InitializeOnGpuThread.X;
  
    namespace Flush {
      interface X extends TraceEvent.Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushOnGpuThread {
      interface B extends TraceEvent.Base {
        args: {
          put_offset: number;
        };
        name: 'InProcessCommandBuffer::FlushOnGpuThread';
        // Denotes the beginning of the event FlushOnGpuThread.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::FlushOnGpuThread';
        // Denotes the end of the event FlushOnGpuThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeOnGpuThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::InitializeOnGpuThread';
        // Denotes the end of the event InitializeOnGpuThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Input_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'input_tq';
      // Denotes the end of the event Input_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InputEventSentBlocking {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'InputEventSentBlocking';
      // Denotes an event InputEventSentBlocking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InputLatency {
    type KeyUp = 
      TraceEvent.InputLatency.KeyUp.b |
      TraceEvent.InputLatency.KeyUp.e;
  
    type MouseDown = 
      TraceEvent.InputLatency.MouseDown.b |
      TraceEvent.InputLatency.MouseDown.e;
  
    type MouseLeave = 
      TraceEvent.InputLatency.MouseLeave.b |
      TraceEvent.InputLatency.MouseLeave.e;
  
    type MouseMove = 
      TraceEvent.InputLatency.MouseMove.b |
      TraceEvent.InputLatency.MouseMove.e;
  
    type MouseUp = 
      TraceEvent.InputLatency.MouseUp.b;
  
    type RawKeyDown = 
      TraceEvent.InputLatency.RawKeyDown.b |
      TraceEvent.InputLatency.RawKeyDown.e;
  
    namespace KeyUp {
      interface b extends TraceEvent.Base {
        args: {
          chrome_latency_info: {
            component_info: {
              component_type: string;
              time_us: number;
            }[];
            is_coalesced: boolean;
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::KeyUp';
        // Denotes the beginning of the nestable async flow event KeyUp.
        ph: 'b';
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::KeyUp';
        // Denotes a step into the nestable async flow event KeyUp.
        ph: 'e';
      }
    }
  
    namespace MouseDown {
      interface b extends TraceEvent.Base {
        args: {
          chrome_latency_info: {
            component_info: {
              component_type: string;
              time_us: number;
            }[];
            is_coalesced: boolean;
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::MouseDown';
        // Denotes the beginning of the nestable async flow event MouseDown.
        ph: 'b';
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::MouseDown';
        // Denotes a step into the nestable async flow event MouseDown.
        ph: 'e';
      }
    }
  
    namespace MouseLeave {
      interface b extends TraceEvent.Base {
        args: {
          chrome_latency_info: {
            component_info: {
              component_type: string;
              time_us: number;
            }[];
            is_coalesced: boolean;
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::MouseLeave';
        // Denotes the beginning of the nestable async flow event MouseLeave.
        ph: 'b';
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::MouseLeave';
        // Denotes a step into the nestable async flow event MouseLeave.
        ph: 'e';
      }
    }
  
    namespace MouseMove {
      interface b extends TraceEvent.Base {
        args: {
          chrome_latency_info: {
            component_info: {
              component_type: string;
              time_us: number;
            }[];
            is_coalesced: boolean;
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::MouseMove';
        // Denotes the beginning of the nestable async flow event MouseMove.
        ph: 'b';
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::MouseMove';
        // Denotes a step into the nestable async flow event MouseMove.
        ph: 'e';
      }
    }
  
    namespace MouseUp {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::MouseUp';
        // Denotes the beginning of the nestable async flow event MouseUp.
        ph: 'b';
      }
    }
  
    namespace RawKeyDown {
      interface b extends TraceEvent.Base {
        args: {
          chrome_latency_info: {
            component_info: {
              component_type: string;
              time_us: number;
            }[];
            is_coalesced: boolean;
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::RawKeyDown';
        // Denotes the beginning of the nestable async flow event RawKeyDown.
        ph: 'b';
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::RawKeyDown';
        // Denotes a step into the nestable async flow event RawKeyDown.
        ph: 'e';
      }
    }
  }

  namespace InputRouterImpl {
    type FilterAndSendWebInputEvent = 
      TraceEvent.InputRouterImpl.FilterAndSendWebInputEvent.X;
  
    type KeboardEventHandled = 
      TraceEvent.InputRouterImpl.KeboardEventHandled.X;
  
    type MouseEventHandled = 
      TraceEvent.InputRouterImpl.MouseEventHandled.X;
  
    type OnHasTouchEventHandlers = 
      TraceEvent.InputRouterImpl.OnHasTouchEventHandlers.X;
  
    namespace FilterAndSendWebInputEvent {
      interface X extends TraceEvent.Base {
        args: {
          type: string;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::FilterAndSendWebInputEvent';
        // Denotes the end of the event FilterAndSendWebInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace KeboardEventHandled {
      interface X extends TraceEvent.Base {
        args: {
          ack: string;
          type: string;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::KeboardEventHandled';
        // Denotes the end of the event KeboardEventHandled.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MouseEventHandled {
      interface X extends TraceEvent.Base {
        args: {
          ack: string;
          type: string;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::MouseEventHandled';
        // Denotes the end of the event MouseEventHandled.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnHasTouchEventHandlers {
      interface X extends TraceEvent.Base {
        args: {
          has_handlers: boolean;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::OnHasTouchEventHandlers';
        // Denotes the end of the event OnHasTouchEventHandlers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace InstallConditionalFeatures {
    interface X extends TraceEvent.Base {
      args: {
        IsMainFrame: boolean;
        IsOutermostMainFrame?: boolean;
      };
      // Duration.
      dur: number;
      name: 'InstallConditionalFeatures';
      // Denotes the end of the event InstallConditionalFeatures.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InteractiveTime {
    interface R extends TraceEvent.Base {
      args: {
        args: {
          had_user_input_before_interactive: boolean;
          total_blocking_time_ms: number;
        };
        frame: string;
      };
      name: 'InteractiveTime';
      // Denotes a mark of the event InteractiveTime.
      ph: 'R';
    }
  }

  namespace IntersectionObserverController {
    type ComputeIntersections = 
      TraceEvent.IntersectionObserverController.ComputeIntersections.X;
  
    namespace ComputeIntersections {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'IntersectionObserverController::computeIntersections';
        // Denotes the end of the event ComputeIntersections.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace InvalidateLayout {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          nodeId?: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'InvalidateLayout';
      // Denotes an event InvalidateLayout. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Io_thread_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'io_thread_tq';
      // Denotes the end of the event Io_thread_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Io_user_blocking_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'io_user_blocking_tq';
      // Denotes the end of the event Io_user_blocking_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace IPCChannel {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'IPC Channel';
      // Denotes the end of the event IPCChannel.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace IteratingoverWebContentsObservers {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'Iterating over WebContentsObservers';
      // Denotes the end of the event IteratingoverWebContentsObservers.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Jank {
    interface b extends TraceEvent.Base {
      args: {
        'thread-type': string;
        'tracker-type': string;
      };
      id2: {
        local: string;
      };
      name: 'Jank';
      // Denotes the beginning of the nestable async flow event Jank.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Jank';
      // Denotes a step into the nestable async flow event Jank.
      ph: 'e';
      scope: string;
    }
  }

  namespace Job {
    type WaitForParticipationOpportunity = 
      TraceEvent.Job.WaitForParticipationOpportunity.X;
  
    namespace WaitForParticipationOpportunity {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Job.WaitForParticipationOpportunity';
        // Denotes the end of the event WaitForParticipationOpportunity.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace KeyedServiceFactory {
    type GetServiceForContext = 
      TraceEvent.KeyedServiceFactory.GetServiceForContext.X;
  
    namespace GetServiceForContext {
      interface X extends TraceEvent.Base {
        args: {
          chrome_keyed_service: {
            name: string;
          };
        };
        // Duration.
        dur: number;
        name: 'KeyedServiceFactory::GetServiceForContext';
        // Denotes the end of the event GetServiceForContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace KeyframeModel {
    interface b extends TraceEvent.Base {
      args: {
        Name: string;
      };
      id2: {
        local: string;
      };
      name: 'KeyframeModel';
      // Denotes the beginning of the nestable async flow event KeyframeModel.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'KeyframeModel';
      // Denotes a step into the nestable async flow event KeyframeModel.
      ph: 'e';
      scope: string;
    }
  }

  namespace KeyWindow {
    interface I extends TraceEvent.Base {
      args: {
        KeyWin: number;
      };
      name: 'KeyWindow';
      // Denotes an event KeyWindow. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace KeywordProvider {
    type Start = 
      TraceEvent.KeywordProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'KeywordProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LargestContentfulPaint {
    type Candidate = 
      TraceEvent.LargestContentfulPaint.Candidate.R;
  
    namespace Candidate {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            candidateIndex: number;
            isMainFrame: boolean;
            isOutermostMainFrame?: boolean;
            navigationId: string;
            nodeId: number;
            size: number;
            type: string;
          };
          frame: string;
        };
        name: 'largestContentfulPaint::Candidate';
        // Denotes a mark of the event Candidate.
        ph: 'R';
        s?: string;
      }
    }
  }

  namespace LargestImagePaint {
    type Candidate = 
      TraceEvent.LargestImagePaint.Candidate.R;
  
    type NoCandidate = 
      TraceEvent.LargestImagePaint.NoCandidate.X;
  
    namespace Candidate {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            DOMNodeId: number;
            candidateIndex: number;
            frame_height?: number;
            frame_width?: number;
            frame_x?: number;
            frame_y?: number;
            imageUrl: string;
            isEmbeddedFrame?: boolean;
            isMainFrame: boolean;
            isOOPIF?: boolean;
            isOutermostMainFrame?: boolean;
            root_height?: number;
            root_width?: number;
            root_x?: number;
            root_y?: number;
            size: number;
          };
          frame: string;
        };
        name: 'LargestImagePaint::Candidate';
        // Denotes a mark of the event Candidate.
        ph: 'R';
        s?: string;
      }
    }
  
    namespace NoCandidate {
      interface X extends TraceEvent.Base {
        args: {
          data: {
            candidateIndex: number;
            isEmbeddedFrame?: boolean;
            isMainFrame: boolean;
            isOOPIF?: boolean;
            isOutermostMainFrame?: boolean;
          };
          frame: string;
        };
        // Duration.
        dur: number;
        name: 'LargestImagePaint::NoCandidate';
        // Denotes the end of the event NoCandidate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LargestTextPaint {
    type Candidate = 
      TraceEvent.LargestTextPaint.Candidate.R;
  
    namespace Candidate {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            DOMNodeId: number;
            candidateIndex: number;
            frame_height?: number;
            frame_width?: number;
            frame_x?: number;
            frame_y?: number;
            isEmbeddedFrame?: boolean;
            isMainFrame: boolean;
            isOOPIF?: boolean;
            isOutermostMainFrame?: boolean;
            root_height?: number;
            root_width?: number;
            root_x?: number;
            root_y?: number;
            size: number;
          };
          frame: string;
        };
        name: 'LargestTextPaint::Candidate';
        // Denotes a mark of the event Candidate.
        ph: 'R';
        s?: string;
      }
    }
  }

  namespace LargeUIJank {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Large UI Jank';
      // Denotes the beginning of the nestable async flow event LargeUIJank.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Large UI Jank';
      // Denotes a step into the nestable async flow event LargeUIJank.
      ph: 'e';
      scope: string;
    }
  }

  namespace LatencyInfo {
    type Flow = 
      TraceEvent.LatencyInfo.Flow.f |
      TraceEvent.LatencyInfo.Flow.s |
      TraceEvent.LatencyInfo.Flow.X;
  
    namespace Flow {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'LatencyInfo.Flow';
        // Denotes the ending of the async flow event Flow.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'LatencyInfo.Flow';
        // Denotes the beginning of the async flow event Flow.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
          chrome_latency_info?: {
            frame_tree_node_id?: number;
            step?: string;
            trace_id: number;
          };
          step?: string;
        };
        bind_id?: string;
        // Duration.
        dur: number;
        flowPhase?: string;
        flow_in?: boolean;
        flow_out?: boolean;
        id?: string;
        name: 'LatencyInfo.Flow';
        // Denotes the end of the event Flow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LaunchProcess {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'LaunchProcess';
      // Denotes the end of the event LaunchProcess.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Layer {
    type PaintContentsToDisplayList = 
      TraceEvent.Layer.PaintContentsToDisplayList.X;
  
    namespace PaintContentsToDisplayList {
      interface X extends TraceEvent.Base {
        args: {
          name: string;
        };
        // Duration.
        dur: number;
        name: 'Layer::PaintContentsToDisplayList';
        // Denotes the end of the event PaintContentsToDisplayList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayerAnimator {
    type Step = 
      TraceEvent.LayerAnimator.Step.X;
  
    namespace Step {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerAnimator::Step';
        // Denotes the end of the event Step.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayerId {
    interface D extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'layerId';
      // Denotes a delete object of the event LayerId.
      ph: 'D';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface N extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'layerId';
      // Denotes a create object of the event LayerId.
      ph: 'N';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayerTreeHost {
    type ApplyCompositorChanges = 
      TraceEvent.LayerTreeHost.ApplyCompositorChanges.X;
  
    type DidLoseLayerTreeFrameSink = 
      TraceEvent.LayerTreeHost.DidLoseLayerTreeFrameSink.X;
  
    type DoUpdateLayers = 
      TraceEvent.LayerTreeHost.DoUpdateLayers.X;
  
    type FinishCommitOnImplThread = 
      TraceEvent.LayerTreeHost.FinishCommitOnImplThread.X;
  
    type InitializeForReal = 
      TraceEvent.LayerTreeHost.InitializeForReal.X;
  
    type LayerTreeHost = 
      TraceEvent.LayerTreeHost.LayerTreeHost.X;
  
    type PushProperties = 
      TraceEvent.LayerTreeHost.PushProperties.X;
  
    type SetLayerTreeFrameSink = 
      TraceEvent.LayerTreeHost.SetLayerTreeFrameSink.X;
  
    namespace AnimationHost {
      type PushProperties = 
        TraceEvent.LayerTreeHost.AnimationHost.PushProperties.X;
    
      namespace PushProperties {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'LayerTreeHost::AnimationHost::PushProperties';
          // Denotes the end of the event PushProperties.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace ApplyCompositorChanges {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::ApplyCompositorChanges';
        // Denotes the end of the event ApplyCompositorChanges.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidLoseLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::DidLoseLayerTreeFrameSink';
        // Denotes the end of the event DidLoseLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoUpdateLayers {
      interface X extends TraceEvent.Base {
        args: {
          source_frame_number: number;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::DoUpdateLayers';
        // Denotes the end of the event DoUpdateLayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishCommitOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::FinishCommitOnImplThread';
        // Denotes the end of the event FinishCommitOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeForReal {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::InitializeForReal';
        // Denotes the end of the event InitializeForReal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayerTreeHost {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::~LayerTreeHost';
        // Denotes the end of the event LayerTreeHost.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushProperties {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::PushProperties';
        // Denotes the end of the event PushProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::SetLayerTreeFrameSink';
        // Denotes the end of the event SetLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateLayers {
      type BuildPropertyTrees = 
        TraceEvent.LayerTreeHost.UpdateLayers.BuildPropertyTrees.X;
    
      namespace BuildPropertyTrees {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'LayerTreeHost::UpdateLayers::BuildPropertyTrees';
          // Denotes the end of the event BuildPropertyTrees.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace LayerTreeHostImpl {
    type ActivateSyncTree = 
      TraceEvent.LayerTreeHostImpl.ActivateSyncTree.X;
  
    type BeginCommit = 
      TraceEvent.LayerTreeHostImpl.BeginCommit.X;
  
    type BuildHitTestData = 
      TraceEvent.LayerTreeHostImpl.BuildHitTestData.X;
  
    type CanDrawemptyviewport = 
      TraceEvent.LayerTreeHostImpl.CanDrawemptyviewport.I;
  
    type CanDrawnorootlayer = 
      TraceEvent.LayerTreeHostImpl.CanDrawnorootlayer.I;
  
    type CanDrawUIresourcesevictednotrecreated = 
      TraceEvent.LayerTreeHostImpl.CanDrawUIresourcesevictednotrecreated.I;
  
    type CommitComplete = 
      TraceEvent.LayerTreeHostImpl.CommitComplete.X;
  
    type InitializeFrameSink = 
      TraceEvent.LayerTreeHostImpl.InitializeFrameSink.X;
  
    type LayerTreeHostImpl = 
      TraceEvent.LayerTreeHostImpl.LayerTreeHostImpl.X;
  
    type NotifyTileStateChanged = 
      TraceEvent.LayerTreeHostImpl.NotifyTileStateChanged.X;
  
    type PrepareToDraw = 
      TraceEvent.LayerTreeHostImpl.PrepareToDraw.X;
  
    type ReleaseLayerTreeFrameSink = 
      TraceEvent.LayerTreeHostImpl.ReleaseLayerTreeFrameSink.X;
  
    type SetVisible = 
      TraceEvent.LayerTreeHostImpl.SetVisible.b |
      TraceEvent.LayerTreeHostImpl.SetVisible.e;
  
    namespace ActivateSyncTree {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::ActivateSyncTree()';
        // Denotes the end of the event ActivateSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginCommit {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::BeginCommit';
        // Denotes the end of the event BeginCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildHitTestData {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::BuildHitTestData';
        // Denotes the end of the event BuildHitTestData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CalculateRenderPasses {
      type EmptyDamageRect = 
        TraceEvent.LayerTreeHostImpl.CalculateRenderPasses.EmptyDamageRect.X;
    
      namespace EmptyDamageRect {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'LayerTreeHostImpl::CalculateRenderPasses::EmptyDamageRect';
          // Denotes the end of the event EmptyDamageRect.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
          RequiresHighResToDraw: boolean;
          draw_result: number;
          'missing tiles': number;
          'render_surface_list_size()': number;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::CalculateRenderPasses';
        // Denotes the end of the event CalculateRenderPasses.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CanDrawemptyviewport {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'LayerTreeHostImpl::CanDraw empty viewport';
        // Denotes an event CanDrawemptyviewport. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CanDrawnorootlayer {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'LayerTreeHostImpl::CanDraw no root layer';
        // Denotes an event CanDrawnorootlayer. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CanDrawUIresourcesevictednotrecreated {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'LayerTreeHostImpl::CanDraw UI resources evicted not recreated';
        // Denotes an event CanDrawUIresourcesevictednotrecreated. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::CommitComplete';
        // Denotes the end of the event CommitComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::InitializeFrameSink';
        // Denotes the end of the event InitializeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayerTreeHostImpl {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::~LayerTreeHostImpl()';
        // Denotes the end of the event LayerTreeHostImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyTileStateChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::NotifyTileStateChanged';
        // Denotes the end of the event NotifyTileStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PrepareToDraw {
      interface X extends TraceEvent.Base {
        args: {
          SourceFrameNumber: number;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::PrepareToDraw';
        // Denotes the end of the event PrepareToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReleaseLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::ReleaseLayerTreeFrameSink';
        // Denotes the end of the event ReleaseLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface b extends TraceEvent.Base {
        args: {
          LayerTreeHostImpl: string;
        };
        id2: {
          local: string;
        };
        name: 'LayerTreeHostImpl::SetVisible';
        // Denotes the beginning of the nestable async flow event SetVisible.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'LayerTreeHostImpl::SetVisible';
        // Denotes a step into the nestable async flow event SetVisible.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace LayerTreeImpl {
    type InvalidateRegionForImages = 
      TraceEvent.LayerTreeImpl.InvalidateRegionForImages.X;
  
    type PushPropertiesTo = 
      TraceEvent.LayerTreeImpl.PushPropertiesTo.X;
  
    type PushPropertyTreesTo = 
      TraceEvent.LayerTreeImpl.PushPropertyTreesTo.X;
  
    namespace InvalidateRegionForImages {
      interface X extends TraceEvent.Base {
        args: {
          counts: string;
          total_layer_count: number;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::InvalidateRegionForImages';
        // Denotes the end of the event InvalidateRegionForImages.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushPropertiesTo {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::PushPropertiesTo';
        // Denotes the end of the event PushPropertiesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushPropertyTreesTo {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::PushPropertyTreesTo';
        // Denotes the end of the event PushPropertyTreesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateDrawProperties {
      type CalculateDrawProperties = 
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.CalculateDrawProperties.X;
    
      type Occlusion = 
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.Occlusion.X;
    
      type UpdateTiles = 
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.UpdateTiles.X;
    
      namespace CalculateDrawProperties {
        interface X extends TraceEvent.Base {
          args: {
            IsActive: boolean;
            SourceFrameNumber: number;
          };
          // Duration.
          dur: number;
          name: 'LayerTreeImpl::UpdateDrawProperties::CalculateDrawProperties';
          // Denotes the end of the event CalculateDrawProperties.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Occlusion {
        interface X extends TraceEvent.Base {
          args: {
            IsActive: boolean;
            SourceFrameNumber: number;
          };
          // Duration.
          dur: number;
          name: 'LayerTreeImpl::UpdateDrawProperties::Occlusion';
          // Denotes the end of the event Occlusion.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace UpdateTiles {
        interface X extends TraceEvent.Base {
          args: {
            IsActive: boolean;
            SourceFrameNumber: number;
            layers_updated_count: number;
          };
          // Duration.
          dur: number;
          name: 'LayerTreeImpl::UpdateDrawProperties::UpdateTiles';
          // Denotes the end of the event UpdateTiles.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::UpdateDrawProperties';
        // Denotes the end of the event UpdateDrawProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Layout {
    interface B extends TraceEvent.Base {
      args: {
        beginData: {
          dirtyObjects: number;
          frame: string;
          partialLayout: boolean;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          totalObjects: number;
        };
      };
      name: 'Layout';
      // Denotes the beginning of the event Layout.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        endData: {
          root: {
          
          }[];
          rootNode: number;
        };
      };
      name: 'Layout';
      // Denotes the ending of the event Layout.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        beginData: {
          dirtyObjects: number;
          frame: string;
          partialLayout: boolean;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          totalObjects: number;
        };
        endData: {
          layoutRoots?: {
            depth: number;
            nodeId: number;
            quads: {
              '0': number;
              '1': number;
              '2': number;
              '3': number;
              '4': number;
              '5': number;
              '6': number;
              '7': number;
            }[];
          }[];
          root?: {
          
          }[];
          rootNode?: number;
        };
      };
      // Duration.
      dur: number;
      name: 'Layout';
      // Denotes the end of the event Layout.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayoutObject {
    type InvalidateSubtreeForFontUpdates = 
      TraceEvent.LayoutObject.InvalidateSubtreeForFontUpdates.X;
  
    namespace InvalidateSubtreeForFontUpdates {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayoutObject::InvalidateSubtreeForFontUpdates';
        // Denotes the end of the event InvalidateSubtreeForFontUpdates.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayoutShift {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          cumulative_score: number;
          frame_max_distance: number;
          had_recent_input: boolean;
          impacted_nodes: {
            new_rect: {
            
            }[];
            node_id: number;
            old_rect: {
            
            }[];
          }[];
          is_main_frame: boolean;
          last_input_timestamp?: number;
          overall_max_distance: number;
          region_rects: {
            '0': number;
            '1': number;
            '2': number;
            '3': number;
          }[];
          score: number;
          weighted_score_delta?: number;
        };
        frame: string;
      };
      name: 'LayoutShift';
      // Denotes an event LayoutShift. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayoutView {
    type CommitPendingSelection = 
      TraceEvent.LayoutView.CommitPendingSelection.X;
  
    namespace CommitPendingSelection {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayoutView::commitPendingSelection';
        // Denotes the end of the event CommitPendingSelection.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LoadAnyStartablePendingRequests {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'LoadAnyStartablePendingRequests';
      // Denotes the end of the event LoadAnyStartablePendingRequests.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEndeventUtils {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'loadEndeventUtils';
      // Denotes a mark of the event LoadEndeventUtils.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEndpixelQueue {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'loadEndpixelQueue';
      // Denotes a mark of the event LoadEndpixelQueue.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEventEnd {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'loadEventEnd';
      // Denotes a mark of the event LoadEventEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace LoadEventStart {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'loadEventStart';
      // Denotes a mark of the event LoadEventStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace LoadFinished {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'LoadFinished';
      // Denotes an event LoadFinished. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace LoadStarteventUtils {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'loadStarteventUtils';
      // Denotes a mark of the event LoadStarteventUtils.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadStartpixelQueue {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'loadStartpixelQueue';
      // Denotes a mark of the event LoadStartpixelQueue.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LocalDOMWindow {
    type DispatchMessageEventWithOriginCheck = 
      TraceEvent.LocalDOMWindow.DispatchMessageEventWithOriginCheck.X;
  
    namespace DispatchMessageEventWithOriginCheck {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalDOMWindow::DispatchMessageEventWithOriginCheck';
        // Denotes the end of the event DispatchMessageEventWithOriginCheck.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LocalFrameView {
    type DidFinishLifecycleUpdate = 
      TraceEvent.LocalFrameView.DidFinishLifecycleUpdate.X;
  
    type Layout = 
      TraceEvent.LocalFrameView.Layout.X;
  
    type NotifyResizeObservers = 
      TraceEvent.LocalFrameView.NotifyResizeObservers.X;
  
    type PerformLayout = 
      TraceEvent.LocalFrameView.PerformLayout.X;
  
    type PerformPostLayoutTasks = 
      TraceEvent.LocalFrameView.PerformPostLayoutTasks.X;
  
    type PerformPreLayoutTasks = 
      TraceEvent.LocalFrameView.PerformPreLayoutTasks.X;
  
    type PropagateFrameRects = 
      TraceEvent.LocalFrameView.PropagateFrameRects.X;
  
    type PushPaintArtifactToCompositor = 
      TraceEvent.LocalFrameView.PushPaintArtifactToCompositor.X;
  
    type RunAccessibilityLifecyclePhase = 
      TraceEvent.LocalFrameView.RunAccessibilityLifecyclePhase.X;
  
    type RunCompositingAssignmentsLifecyclePhase = 
      TraceEvent.LocalFrameView.RunCompositingAssignmentsLifecyclePhase.X;
  
    type RunCompositingInputsLifecyclePhase = 
      TraceEvent.LocalFrameView.RunCompositingInputsLifecyclePhase.X;
  
    type RunPaintLifecyclePhase = 
      TraceEvent.LocalFrameView.RunPaintLifecyclePhase.X;
  
    type RunPrePaintLifecyclePhase = 
      TraceEvent.LocalFrameView.RunPrePaintLifecyclePhase.X;
  
    type RunStyleAndLayoutLifecyclePhases = 
      TraceEvent.LocalFrameView.RunStyleAndLayoutLifecyclePhases.X;
  
    type UpdateLifecyclePhasesstartoflifecycletasks = 
      TraceEvent.LocalFrameView.UpdateLifecyclePhasesstartoflifecycletasks.X;
  
    type UpdateStyleAndLayoutIfNeededRecursive = 
      TraceEvent.LocalFrameView.UpdateStyleAndLayoutIfNeededRecursive.X;
  
    type UpdateViewportIntersectionsForSubtree = 
      TraceEvent.LocalFrameView.UpdateViewportIntersectionsForSubtree.X;
  
    type WillStartLifecycleUpdate = 
      TraceEvent.LocalFrameView.WillStartLifecycleUpdate.X;
  
    namespace DidFinishLifecycleUpdate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::DidFinishLifecycleUpdate';
        // Denotes the end of the event DidFinishLifecycleUpdate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Layout {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyResizeObservers {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::NotifyResizeObservers';
        // Denotes the end of the event NotifyResizeObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformLayout {
      interface X extends TraceEvent.Base {
        args: {
          contentsHeightBeforeLayout: number;
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::performLayout';
        // Denotes the end of the event PerformLayout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPostLayoutTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::performPostLayoutTasks';
        // Denotes the end of the event PerformPostLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPreLayoutTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::performPreLayoutTasks';
        // Denotes the end of the event PerformPreLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PropagateFrameRects {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::PropagateFrameRects';
        // Denotes the end of the event PropagateFrameRects.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushPaintArtifactToCompositor {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::pushPaintArtifactToCompositor';
        // Denotes the end of the event PushPaintArtifactToCompositor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunAccessibilityLifecyclePhase {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunAccessibilityLifecyclePhase';
        // Denotes the end of the event RunAccessibilityLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunCompositingAssignmentsLifecyclePhase {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunCompositingAssignmentsLifecyclePhase';
        // Denotes the end of the event RunCompositingAssignmentsLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunCompositingInputsLifecyclePhase {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunCompositingInputsLifecyclePhase';
        // Denotes the end of the event RunCompositingInputsLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunPaintLifecyclePhase {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunPaintLifecyclePhase';
        // Denotes the end of the event RunPaintLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunPrePaintLifecyclePhase {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunPrePaintLifecyclePhase';
        // Denotes the end of the event RunPrePaintLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunStyleAndLayoutLifecyclePhases {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunStyleAndLayoutLifecyclePhases';
        // Denotes the end of the event RunStyleAndLayoutLifecyclePhases.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateLifecyclePhasesstartoflifecycletasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::UpdateLifecyclePhases - start of lifecycle tasks';
        // Denotes the end of the event UpdateLifecyclePhasesstartoflifecycletasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStyleAndLayoutIfNeededRecursive {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::updateStyleAndLayoutIfNeededRecursive';
        // Denotes the end of the event UpdateStyleAndLayoutIfNeededRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateViewportIntersectionsForSubtree {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::UpdateViewportIntersectionsForSubtree';
        // Denotes the end of the event UpdateViewportIntersectionsForSubtree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillStartLifecycleUpdate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::WillStartLifecycleUpdate';
        // Denotes the end of the event WillStartLifecycleUpdate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LocalHistoryZeroSuggestProvider {
    type Start = 
      TraceEvent.LocalHistoryZeroSuggestProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalHistoryZeroSuggestProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LocalWindowProxy {
    type CreateContext = 
      TraceEvent.LocalWindowProxy.CreateContext.X;
  
    type Initialize = 
      TraceEvent.LocalWindowProxy.Initialize.X;
  
    type SetupWindowPrototypeChain = 
      TraceEvent.LocalWindowProxy.SetupWindowPrototypeChain.X;
  
    type UpdateDocumentProperty = 
      TraceEvent.LocalWindowProxy.UpdateDocumentProperty.X;
  
    namespace CreateContext {
      interface X extends TraceEvent.Base {
        args: {
          IsMainFrame: boolean;
          IsOutermostMainFrame?: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::CreateContext';
        // Denotes the end of the event CreateContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
          IsMainFrame: boolean;
          IsOutermostMainFrame?: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetupWindowPrototypeChain {
      interface X extends TraceEvent.Base {
        args: {
          IsMainFrame: boolean;
          IsOutermostMainFrame?: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::SetupWindowPrototypeChain';
        // Denotes the end of the event SetupWindowPrototypeChain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateDocumentProperty {
      interface X extends TraceEvent.Base {
        args: {
          IsMainFrame: boolean;
          IsOutermostMainFrame?: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::UpdateDocumentProperty';
        // Denotes the end of the event UpdateDocumentProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LoginDatabase {
    type GetLogins = 
      TraceEvent.LoginDatabase.GetLogins.X;
  
    namespace GetLogins {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LoginDatabase::GetLogins';
        // Denotes the end of the event GetLogins.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LogMessage {
    interface I extends TraceEvent.Base {
      args: {
        track_event: {
          log_message: string;
        };
      };
      name: 'LogMessage';
      // Denotes an event LogMessage. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LongDrawInterval {
    interface F extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Long Draw Interval';
      // Denotes the ending of the async event LongDrawInterval.
      ph: 'F';
    }
  
    interface S extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Long Draw Interval';
      // Denotes the beginning of the async event LongDrawInterval.
      ph: 'S';
    }
  }

  namespace LongIdlePeriod {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'LongIdlePeriod';
      // Denotes the beginning of the nestable async flow event LongIdlePeriod.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'LongIdlePeriod';
      // Denotes a step into the nestable async flow event LongIdlePeriod.
      ph: 'e';
      scope: string;
    }
  }

  namespace LongIdlePeriodPaused {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'LongIdlePeriodPaused';
      // Denotes the beginning of the nestable async flow event LongIdlePeriodPaused.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'LongIdlePeriodPaused';
      // Denotes a step into the nestable async flow event LongIdlePeriodPaused.
      ph: 'e';
      scope: string;
    }
  }

  namespace LongTask {
    interface I extends TraceEvent.Base {
      args: {
        duration: number;
      };
      name: 'LongTask';
      // Denotes an event LongTask. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Lteu {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'lteu';
      // Denotes the beginning of the nestable async flow event Lteu.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'lteu';
      // Denotes a step into the nestable async flow event Lteu.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace Ltpq {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'ltpq';
      // Denotes the beginning of the nestable async flow event Ltpq.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ltpq';
      // Denotes a step into the nestable async flow event Ltpq.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace MainThreadEventQueue {
    type HandleEvent = 
      TraceEvent.MainThreadEventQueue.HandleEvent.X;
  
    namespace HandleEvent {
      interface X extends TraceEvent.Base {
        args: {
          dispatch_type: number;
          event_type: number;
        };
        // Duration.
        dur: number;
        name: 'MainThreadEventQueue::HandleEvent';
        // Denotes the end of the event HandleEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MainThreadSchedulerIdlePeriod {
    interface b extends TraceEvent.Base {
      args: {
        idle_period_length_ms: number;
      };
      id2: {
        local: string;
      };
      name: 'MainThreadSchedulerIdlePeriod';
      // Denotes the beginning of the nestable async flow event MainThreadSchedulerIdlePeriod.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'MainThreadSchedulerIdlePeriod';
      // Denotes a step into the nestable async flow event MainThreadSchedulerIdlePeriod.
      ph: 'e';
      scope: string;
    }
  }

  namespace MajorGC {
    interface B extends TraceEvent.Base {
      args: {
        type: string;
        usedHeapSizeBefore: number;
      };
      name: 'MajorGC';
      // Denotes the beginning of the event MajorGC.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        usedHeapSizeAfter: number;
      };
      name: 'MajorGC';
      // Denotes the ending of the event MajorGC.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        type: string;
        usedHeapSizeAfter: number;
        usedHeapSizeBefore: number;
      };
      // Duration.
      dur: number;
      name: 'MajorGC';
      // Denotes the end of the event MajorGC.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Mark_jset {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'mark_jset';
      // Denotes a mark of the event Mark_jset.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Mark_test {
    interface R extends TraceEvent.Base {
      args: {
      
      };
      name: 'mark_test';
      // Denotes a mark of the event Mark_test.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MarkAsMainFrame {
    interface I extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'markAsMainFrame';
      // Denotes an event MarkAsMainFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MarkDOMContent {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          isOutermostMainFrame?: boolean;
          page: string;
        };
      };
      name: 'MarkDOMContent';
      // Denotes an event MarkDOMContent. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MarkLoad {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          isOutermostMainFrame?: boolean;
          page: string;
        };
      };
      name: 'MarkLoad';
      // Denotes an event MarkLoad. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Measure_test {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'measure_test';
      // Denotes the beginning of the nestable async flow event Measure_test.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'measure_test';
      // Denotes a step into the nestable async flow event Measure_test.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Media_router {
    namespace Mojom {
      type MediaRouteProvider = 
        TraceEvent.Media_router.Mojom.MediaRouteProvider.X;
    
      type MediaRouter = 
        TraceEvent.Media_router.Mojom.MediaRouter.X;
    
      namespace MediaRouteProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media_router.mojom.MediaRouteProvider';
          // Denotes the end of the event MediaRouteProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace MediaRouter {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media_router.mojom.MediaRouter';
          // Denotes the end of the event MediaRouter.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Media_session {
    namespace Mojom {
      type MediaSessionObserver = 
        TraceEvent.Media_session.Mojom.MediaSessionObserver.X;
    
      namespace MediaSessionObserver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media_session.mojom.MediaSessionObserver';
          // Denotes the end of the event MediaSessionObserver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Memory_instrumentation {
    namespace Mojom {
      type CoordinatorConnector = 
        TraceEvent.Memory_instrumentation.Mojom.CoordinatorConnector.X;
    
      type CoordinatorController = 
        TraceEvent.Memory_instrumentation.Mojom.CoordinatorController.X;
    
      namespace CoordinatorConnector {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'memory_instrumentation.mojom.CoordinatorConnector';
          // Denotes the end of the event CoordinatorConnector.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CoordinatorController {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'memory_instrumentation.mojom.CoordinatorController';
          // Denotes the end of the event CoordinatorController.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Memory {
    namespace GPU {
      namespace PeakMemoryUsage {
        type AblationTimes = 
          TraceEvent.Memory.GPU.PeakMemoryUsage.AblationTimes.I;
      
        namespace AblationTimes {
          interface I extends TraceEvent.Base {
            args: {
              alloc: number;
              dealloc: number;
            };
            name: 'Memory.GPU.PeakMemoryUsage.AblationTimes';
            // Denotes an event AblationTimes. There are no begining/ending phases.
            ph: 'I';
            s: string;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  }

  namespace MemoryCache {
    type Evict = 
      TraceEvent.MemoryCache.Evict.X;
  
    type Prune = 
      TraceEvent.MemoryCache.Prune.X;
  
    namespace Evict {
      interface X extends TraceEvent.Base {
        args: {
          resource: string;
        };
        // Duration.
        dur: number;
        name: 'MemoryCache::evict';
        // Denotes the end of the event Evict.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Prune {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MemoryCache::prune()';
        // Denotes the end of the event Prune.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MemoryUsage {
    interface C extends TraceEvent.Base {
      args: {
        InFlightToDisk: number;
        TotalStorage: number;
      };
      name: 'MemoryUsage';
      // Denotes a counter for the event MemoryUsage.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MessageLoop {
    type RunTask = 
      TraceEvent.MessageLoop.RunTask.X;
  
    namespace RunTask {
      interface X extends TraceEvent.Base {
        args: {
          src_file: string;
          src_func: string;
        };
        // Duration.
        dur?: number;
        name: 'MessageLoop::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MessagePipeclosing {
    interface f extends TraceEvent.Base {
      args: {
      
      };
      bp: string;
      id: number;
      name: 'MessagePipe closing';
      // Denotes the ending of the async flow event MessagePipeclosing.
      ph: 'f';
    }
  
    interface s extends TraceEvent.Base {
      args: {
      
      };
      id: number;
      name: 'MessagePipe closing';
      // Denotes the beginning of the async flow event MessagePipeclosing.
      ph: 's';
    }
  
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'MessagePipe closing';
      // Denotes the end of the event MessagePipeclosing.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MessagePipepeerclosed {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'MessagePipe peer closed';
      // Denotes the end of the event MessagePipepeerclosed.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MessagePipeReader {
    type Receive = 
      TraceEvent.MessagePipeReader.Receive.X;
  
    type Send = 
      TraceEvent.MessagePipeReader.Send.f |
      TraceEvent.MessagePipeReader.Send.s |
      TraceEvent.MessagePipeReader.Send.X;
  
    namespace Receive {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MessagePipeReader::Receive';
        // Denotes the end of the event Receive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Send {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'MessagePipeReader::Send';
        // Denotes the ending of the async flow event Send.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'MessagePipeReader::Send';
        // Denotes the beginning of the async flow event Send.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MessagePipeReader::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MessagePort {
    type Accept = 
      TraceEvent.MessagePort.Accept.X;
  
    namespace Accept {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MessagePort::Accept';
        // Denotes the end of the event Accept.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Metrics {
    namespace Mojom {
      type CallStackProfileCollector = 
        TraceEvent.Metrics.Mojom.CallStackProfileCollector.X;
    
      namespace CallStackProfileCollector {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'metrics.mojom.CallStackProfileCollector';
          // Denotes the end of the event CallStackProfileCollector.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace MetricsWebContentsObserver {
    type MaybeActivatePageLoadTracker = 
      TraceEvent.MetricsWebContentsObserver.MaybeActivatePageLoadTracker.X;
  
    type MaybeRestorePageLoadTrackerForBackForwardCache = 
      TraceEvent.MetricsWebContentsObserver.MaybeRestorePageLoadTrackerForBackForwardCache.X;
  
    namespace MaybeActivatePageLoadTracker {
      interface X extends TraceEvent.Base {
        args: {
          navigation: {
            browser_initiated: boolean;
            frame_tree_node: {
              current_frame_host: {
                browsing_context_state: string;
                frame_tree_node_id: number;
                frame_type: string;
                lifecycle_state: string;
                origin: string;
                process: {
                  browser_context: {
                    id: string;
                  };
                  child_process_id: number;
                  id: number;
                  process_lock: string;
                };
                render_frame_host_id: {
                  process_id: number;
                  routing_id: number;
                };
                site_instance: {
                  active_rfh_count: number;
                  browsing_instance_id: number;
                  has_process: boolean;
                  is_default: boolean;
                  related_active_contents_count: number;
                  site_info: {
                    is_fenced: boolean;
                    is_guest: boolean;
                    is_sandboxed: boolean;
                    process_lock_url: string;
                    requires_origin_keyed_process: boolean;
                    site_url: string;
                  };
                  site_instance_group: {
                    active_frame_count: number;
                    process: {
                      browser_context: {
                        id: string;
                      };
                      child_process_id: number;
                      id: number;
                      process_lock: string;
                    };
                    site_instance_group_id: number;
                  };
                  site_instance_id: number;
                };
                url: string;
              };
              frame_tree_node_id: number;
              is_main_frame: boolean;
              speculative_frame_host: string;
            };
            from_begin_navigation: boolean;
            has_committed: boolean;
            is_error_page: boolean;
            is_synchronous_renderer_commit: boolean;
            navigation_id: number;
            navigation_type: string;
            net_error: number;
            reload_type: number;
            render_frame_host: {
              browsing_context_state: string;
              frame_tree_node_id: number;
              frame_type: string;
              lifecycle_state: string;
              origin: string;
              process: {
                browser_context: {
                  id: string;
                };
                child_process_id: number;
                id: number;
                process_lock: string;
              };
              render_frame_host_id: {
                process_id: number;
                routing_id: number;
              };
              site_instance: {
                active_rfh_count: number;
                browsing_instance_id: number;
                has_process: boolean;
                is_default: boolean;
                related_active_contents_count: number;
                site_info: {
                  is_fenced: boolean;
                  is_guest: boolean;
                  is_sandboxed: boolean;
                  process_lock_url: string;
                  requires_origin_keyed_process: boolean;
                  site_url: string;
                };
                site_instance_group: {
                  active_frame_count: number;
                  process: {
                    browser_context: {
                      id: string;
                    };
                    child_process_id: number;
                    id: number;
                    process_lock: string;
                  };
                  site_instance_group_id: number;
                };
                site_instance_id: number;
              };
              url: string;
            };
            state: number;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'MetricsWebContentsObserver::MaybeActivatePageLoadTracker';
        // Denotes the end of the event MaybeActivatePageLoadTracker.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MaybeRestorePageLoadTrackerForBackForwardCache {
      interface X extends TraceEvent.Base {
        args: {
          next_navigation: {
            browser_initiated: boolean;
            frame_tree_node: {
              current_frame_host: {
                browsing_context_state: string;
                frame_tree_node_id: number;
                frame_type: string;
                lifecycle_state: string;
                origin: string;
                process: {
                  browser_context: {
                    id: string;
                  };
                  child_process_id: number;
                  id: number;
                  process_lock: string;
                };
                render_frame_host_id: {
                  process_id: number;
                  routing_id: number;
                };
                site_instance: {
                  active_rfh_count: number;
                  browsing_instance_id: number;
                  has_process: boolean;
                  is_default: boolean;
                  related_active_contents_count: number;
                  site_info: {
                    is_fenced: boolean;
                    is_guest: boolean;
                    is_sandboxed: boolean;
                    process_lock_url: string;
                    requires_origin_keyed_process: boolean;
                    site_url: string;
                  };
                  site_instance_group: {
                    active_frame_count: number;
                    process: {
                      browser_context: {
                        id: string;
                      };
                      child_process_id: number;
                      id: number;
                      process_lock: string;
                    };
                    site_instance_group_id: number;
                  };
                  site_instance_id: number;
                };
                url: string;
              };
              frame_tree_node_id: number;
              is_main_frame: boolean;
              speculative_frame_host: string;
            };
            from_begin_navigation: boolean;
            has_committed: boolean;
            is_error_page: boolean;
            is_synchronous_renderer_commit: boolean;
            navigation_id: number;
            navigation_type: string;
            net_error: number;
            reload_type: number;
            render_frame_host: {
              browsing_context_state: string;
              frame_tree_node_id: number;
              frame_type: string;
              lifecycle_state: string;
              origin: string;
              process: {
                browser_context: {
                  id: string;
                };
                child_process_id: number;
                id: number;
                process_lock: string;
              };
              render_frame_host_id: {
                process_id: number;
                routing_id: number;
              };
              site_instance: {
                active_rfh_count: number;
                browsing_instance_id: number;
                has_process: boolean;
                is_default: boolean;
                related_active_contents_count: number;
                site_info: {
                  is_fenced: boolean;
                  is_guest: boolean;
                  is_sandboxed: boolean;
                  process_lock_url: string;
                  requires_origin_keyed_process: boolean;
                  site_url: string;
                };
                site_instance_group: {
                  active_frame_count: number;
                  process: {
                    browser_context: {
                      id: string;
                    };
                    child_process_id: number;
                    id: number;
                    process_lock: string;
                  };
                  site_instance_group_id: number;
                };
                site_instance_id: number;
              };
              url: string;
            };
            state: number;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'MetricsWebContentsObserver::MaybeRestorePageLoadTrackerForBackForwardCache';
        // Denotes the end of the event MaybeRestorePageLoadTrackerForBackForwardCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MinorGC {
    interface B extends TraceEvent.Base {
      args: {
        usedHeapSizeBefore: number;
      };
      name: 'MinorGC';
      // Denotes the beginning of the event MinorGC.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        usedHeapSizeAfter: number;
      };
      name: 'MinorGC';
      // Denotes the ending of the event MinorGC.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        type: string;
        usedHeapSizeAfter: number;
        usedHeapSizeBefore: number;
      };
      // Duration.
      dur: number;
      name: 'MinorGC';
      // Denotes the end of the event MinorGC.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MintTokenFlow {
    interface b extends TraceEvent.Base {
      args: {
        type: number;
      };
      id2: {
        local: string;
      };
      name: 'MintTokenFlow';
      // Denotes the beginning of the nestable async flow event MintTokenFlow.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'MintTokenFlow';
      // Denotes a step into the nestable async flow event MintTokenFlow.
      ph: 'e';
      scope: string;
    }
  }

  namespace Mojo {
    type MessageReceive = 
      TraceEvent.Mojo.MessageReceive.B |
      TraceEvent.Mojo.MessageReceive.X;
  
    type MessageSend = 
      TraceEvent.Mojo.MessageSend.f |
      TraceEvent.Mojo.MessageSend.s |
      TraceEvent.Mojo.MessageSend.X;
  
    namespace MessageReceive {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'mojo::Message Receive';
        // Denotes the beginning of the event MessageReceive.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'mojo::Message Receive';
        // Denotes the end of the event MessageReceive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MessageSend {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'mojo::Message Send';
        // Denotes the ending of the async flow event MessageSend.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'mojo::Message Send';
        // Denotes the beginning of the async flow event MessageSend.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'mojo::Message Send';
        // Denotes the end of the event MessageSend.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Mojopubliccppsystemdata_pipe_producer {
    type Cc = 
      TraceEvent.Mojopubliccppsystemdata_pipe_producer.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../mojo/public/cpp/system/data_pipe_producer.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Mojopubliccppsystemhandle_signal_tracker {
    type Cc = 
      TraceEvent.Mojopubliccppsystemhandle_signal_tracker.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../mojo/public/cpp/system/handle_signal_tracker.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MojoURLLoaderClient {
    type OnReceiveResponse = 
      TraceEvent.MojoURLLoaderClient.OnReceiveResponse.X;
  
    namespace OnReceiveResponse {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'MojoURLLoaderClient::OnReceiveResponse';
        // Denotes the end of the event OnReceiveResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Moredamageexpectedsoon {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'More damage expected soon';
      // Denotes an event Moredamageexpectedsoon. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MouseEventManager {
    type HandleMouseDraggedEvent = 
      TraceEvent.MouseEventManager.HandleMouseDraggedEvent.X;
  
    type HandleMousePressEvent = 
      TraceEvent.MouseEventManager.HandleMousePressEvent.X;
  
    namespace HandleMouseDraggedEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MouseEventManager::handleMouseDraggedEvent';
        // Denotes the end of the event HandleMouseDraggedEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMousePressEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MouseEventManager::handleMousePressEvent';
        // Denotes the end of the event HandleMousePressEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NavigationBodyLoader {
    type OnReadable = 
      TraceEvent.NavigationBodyLoader.OnReadable.X;
  
    type OnStartLoadingResponseBody = 
      TraceEvent.NavigationBodyLoader.OnStartLoadingResponseBody.X;
  
    type ReadFromDataPipe = 
      TraceEvent.NavigationBodyLoader.ReadFromDataPipe.X;
  
    type StartLoadingBody = 
      TraceEvent.NavigationBodyLoader.StartLoadingBody.X;
  
    namespace OnReadable {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationBodyLoader::OnReadable';
        // Denotes the end of the event OnReadable.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnStartLoadingResponseBody {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationBodyLoader::OnStartLoadingResponseBody';
        // Denotes the end of the event OnStartLoadingResponseBody.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadFromDataPipe {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationBodyLoader::ReadFromDataPipe';
        // Denotes the end of the event ReadFromDataPipe.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StartLoadingBody {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationBodyLoader::StartLoadingBody';
        // Denotes the end of the event StartLoadingBody.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NavigationControllerImpl {
    type LoadURLWithParams = 
      TraceEvent.NavigationControllerImpl.LoadURLWithParams.X;
  
    namespace LoadURLWithParams {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationControllerImpl::LoadURLWithParams';
        // Denotes the end of the event LoadURLWithParams.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NavigationRequest {
    interface b extends TraceEvent.Base {
      args: {
        navigation_request: {
          browser_initiated: boolean;
          frame_tree_node: number;
          from_begin_navigation: boolean;
          is_for_commit: boolean;
          navigation_id: number;
          navigation_type: number;
          reload_type: number;
          state: number;
          this: string;
          url: string;
        };
      };
      id: string;
      name: 'NavigationRequest';
      // Denotes the beginning of the nestable async flow event NavigationRequest.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'NavigationRequest';
      // Denotes a step into the nestable async flow event NavigationRequest.
      ph: 'e';
      scope: string;
    }
  }

  namespace NavigationStart {
    interface R extends TraceEvent.Base {
      args: {
        data?: {
          documentLoaderURL: string;
          isLoadingMainFrame: boolean;
          isOutermostMainFrame?: boolean;
          navigationId: string;
        };
        frame: string;
      };
      name: 'navigationStart';
      // Denotes a mark of the event NavigationStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace NavigationStartToCommit {
    interface b extends TraceEvent.Base {
      args: {
        'Initial URL': string;
        'Net Error Code': number;
        URL: string;
      };
      id2: {
        local: string;
      };
      name: 'Navigation StartToCommit';
      // Denotes the beginning of the nestable async flow event NavigationStartToCommit.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Navigation StartToCommit';
      // Denotes a step into the nestable async flow event NavigationStartToCommit.
      ph: 'e';
      scope: string;
    }
  }

  namespace NavigationThrottle {
    type WillFailRequest = 
      TraceEvent.NavigationThrottle.WillFailRequest.b |
      TraceEvent.NavigationThrottle.WillFailRequest.e;
  
    type WillProcessResponse = 
      TraceEvent.NavigationThrottle.WillProcessResponse.b |
      TraceEvent.NavigationThrottle.WillProcessResponse.e;
  
    type WillStartRequest = 
      TraceEvent.NavigationThrottle.WillStartRequest.b |
      TraceEvent.NavigationThrottle.WillStartRequest.e;
  
    namespace WillFailRequest {
      interface b extends TraceEvent.Base {
        args: {
          result: number;
          throttle: string;
        };
        id: string;
        name: 'NavigationThrottle::WillFailRequest';
        // Denotes the beginning of the nestable async flow event WillFailRequest.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'NavigationThrottle::WillFailRequest';
        // Denotes a step into the nestable async flow event WillFailRequest.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace WillProcessResponse {
      interface b extends TraceEvent.Base {
        args: {
          result: number;
          throttle: string;
        };
        id: string;
        name: 'NavigationThrottle::WillProcessResponse';
        // Denotes the beginning of the nestable async flow event WillProcessResponse.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'NavigationThrottle::WillProcessResponse';
        // Denotes a step into the nestable async flow event WillProcessResponse.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace WillStartRequest {
      interface b extends TraceEvent.Base {
        args: {
          result: number;
          throttle: string;
        };
        id: string;
        name: 'NavigationThrottle::WillStartRequest';
        // Denotes the beginning of the nestable async flow event WillStartRequest.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'NavigationThrottle::WillStartRequest';
        // Denotes a step into the nestable async flow event WillStartRequest.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace NavigationtimeToResponseStarted {
    interface F extends TraceEvent.Base {
      args: {
        '&NavigationURLLoaderImpl': string;
        success: boolean;
      };
      id2: {
        local: string;
      };
      name: 'Navigation timeToResponseStarted';
      // Denotes the ending of the async event NavigationtimeToResponseStarted.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
        'FrameTreeNode id': number;
      };
      id2: {
        local: string;
      };
      name: 'Navigation timeToResponseStarted';
      // Denotes the beginning of the async event NavigationtimeToResponseStarted.
      ph: 'S';
    }
  }

  namespace NavigationTimingnavigationStart {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'NavigationTiming navigationStart';
      // Denotes an event NavigationTimingnavigationStart. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace Navigator {
    type Navigate = 
      TraceEvent.Navigator.Navigate.X;
  
    namespace Navigate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Navigator::Navigate';
        // Denotes the end of the event Navigate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NavStartToExperimentalLargestContentfulPaint {
    namespace Candidate {
      namespace AllFrames {
        type UKM = 
          TraceEvent.NavStartToExperimentalLargestContentfulPaint.Candidate.AllFrames.UKM.I;
      
        namespace UKM {
          interface I extends TraceEvent.Base {
            args: {
              data: {
                durationInMilliseconds: number;
                inMainFrame: boolean;
                size: number;
                type: string;
              };
              main_frame_tree_node_id: number;
            };
            name: 'NavStartToExperimentalLargestContentfulPaint::Candidate::AllFrames::UKM';
            // Denotes an event UKM. There are no begining/ending phases.
            ph: 'I';
            s: string;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  
    namespace Invalidate {
      namespace AllFrames {
        type UKM = 
          TraceEvent.NavStartToExperimentalLargestContentfulPaint.Invalidate.AllFrames.UKM.I;
      
        namespace UKM {
          interface I extends TraceEvent.Base {
            args: {
              main_frame_tree_node_id: number;
            };
            name: 'NavStartToExperimentalLargestContentfulPaint::Invalidate::AllFrames::UKM';
            // Denotes an event UKM. There are no begining/ending phases.
            ph: 'I';
            s: string;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  }

  namespace NavStartToLargestContentfulPaint {
    namespace Candidate {
      namespace AllFrames {
        type UKM = 
          TraceEvent.NavStartToLargestContentfulPaint.Candidate.AllFrames.UKM.I;
      
        namespace UKM {
          interface I extends TraceEvent.Base {
            args: {
              data: {
                durationInMilliseconds: number;
                inMainFrame: boolean;
                isAnimated?: boolean;
                size: number;
                type: string;
              };
              main_frame_tree_node_id: number;
            };
            name: 'NavStartToLargestContentfulPaint::Candidate::AllFrames::UKM';
            // Denotes an event UKM. There are no begining/ending phases.
            ph: 'I';
            s: string;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  
    namespace Invalidate {
      namespace AllFrames {
        type UKM = 
          TraceEvent.NavStartToLargestContentfulPaint.Invalidate.AllFrames.UKM.I;
      
        namespace UKM {
          interface I extends TraceEvent.Base {
            args: {
              main_frame_tree_node_id: number;
            };
            name: 'NavStartToLargestContentfulPaint::Invalidate::AllFrames::UKM';
            // Denotes an event UKM. There are no begining/ending phases.
            ph: 'I';
            s: string;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  }

  namespace NeedsBeginFrameChanged {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          needsBeginFrame: number;
        };
        layerTreeId: number;
      };
      name: 'NeedsBeginFrameChanged';
      // Denotes an event NeedsBeginFrameChanged. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NeedsBeginFrames {
    interface F extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'NeedsBeginFrames';
      // Denotes the ending of the async event NeedsBeginFrames.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'NeedsBeginFrames';
      // Denotes the beginning of the async event NeedsBeginFrames.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NeedsTickAnimations {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'NeedsTickAnimations';
      // Denotes an event NeedsTickAnimations. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NETWORK_DELEGATE_BEFORE_START_TRANSACTION {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_START_TRANSACTION';
      // Denotes the beginning of the nestable async flow event NETWORK_DELEGATE_BEFORE_START_TRANSACTION.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_START_TRANSACTION';
      // Denotes a step into the nestable async flow event NETWORK_DELEGATE_BEFORE_START_TRANSACTION.
      ph: 'e';
      scope: string;
    }
  }

  namespace NETWORK_DELEGATE_BEFORE_URL_REQUEST {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_URL_REQUEST';
      // Denotes the beginning of the nestable async flow event NETWORK_DELEGATE_BEFORE_URL_REQUEST.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_URL_REQUEST';
      // Denotes a step into the nestable async flow event NETWORK_DELEGATE_BEFORE_URL_REQUEST.
      ph: 'e';
      scope: string;
    }
  }

  namespace NETWORK_DELEGATE_HEADERS_RECEIVED {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_HEADERS_RECEIVED';
      // Denotes the beginning of the nestable async flow event NETWORK_DELEGATE_HEADERS_RECEIVED.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'NETWORK_DELEGATE_HEADERS_RECEIVED';
      // Denotes a step into the nestable async flow event NETWORK_DELEGATE_HEADERS_RECEIVED.
      ph: 'e';
      scope: string;
    }
  }

  namespace Network_hints {
    namespace Mojom {
      type NetworkHintsHandler = 
        TraceEvent.Network_hints.Mojom.NetworkHintsHandler.X;
    
      namespace NetworkHintsHandler {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network_hints.mojom.NetworkHintsHandler';
          // Denotes the end of the event NetworkHintsHandler.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace NETWORK_QUALITY_CHANGED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          downstream_throughput_kbps: number;
          effective_connection_type: string;
          http_rtt_ms: number;
          transport_rtt_ms: number;
        };
        source_type: string;
      };
      id: string;
      name: 'NETWORK_QUALITY_CHANGED';
      // Denotes the ending of the nestable async flow event NETWORK_QUALITY_CHANGED.
      ph: 'n';
      scope: string;
    }
  }

  namespace Network {
    namespace Mojom {
      type CookieAccessObserver = 
        TraceEvent.Network.Mojom.CookieAccessObserver.X;
    
      type CookieChangeListener = 
        TraceEvent.Network.Mojom.CookieChangeListener.X;
    
      type CookieManager = 
        TraceEvent.Network.Mojom.CookieManager.X;
    
      type CrossOriginEmbedderPolicyReporter = 
        TraceEvent.Network.Mojom.CrossOriginEmbedderPolicyReporter.X;
    
      type NetworkContext = 
        TraceEvent.Network.Mojom.NetworkContext.X;
    
      type NetworkContextClient = 
        TraceEvent.Network.Mojom.NetworkContextClient.X;
    
      type NetworkQualityEstimatorManagerClient = 
        TraceEvent.Network.Mojom.NetworkQualityEstimatorManagerClient.X;
    
      type NetworkServiceClient = 
        TraceEvent.Network.Mojom.NetworkServiceClient.X;
    
      type ProxyConfigPollerClient = 
        TraceEvent.Network.Mojom.ProxyConfigPollerClient.X;
    
      type ProxyLookupClient = 
        TraceEvent.Network.Mojom.ProxyLookupClient.X;
    
      type ResolveHostClient = 
        TraceEvent.Network.Mojom.ResolveHostClient.X;
    
      type RestrictedCookieManager = 
        TraceEvent.Network.Mojom.RestrictedCookieManager.X;
    
      type TrustedHeaderClient = 
        TraceEvent.Network.Mojom.TrustedHeaderClient.X;
    
      type TrustedURLLoaderHeaderClient = 
        TraceEvent.Network.Mojom.TrustedURLLoaderHeaderClient.X;
    
      type URLLoader = 
        TraceEvent.Network.Mojom.URLLoader.X;
    
      type URLLoaderClient = 
        TraceEvent.Network.Mojom.URLLoaderClient.X;
    
      type URLLoaderFactory = 
        TraceEvent.Network.Mojom.URLLoaderFactory.X;
    
      namespace CookieAccessObserver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.CookieAccessObserver';
          // Denotes the end of the event CookieAccessObserver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CookieChangeListener {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.CookieChangeListener';
          // Denotes the end of the event CookieChangeListener.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CookieManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.CookieManager';
          // Denotes the end of the event CookieManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CrossOriginEmbedderPolicyReporter {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.CrossOriginEmbedderPolicyReporter';
          // Denotes the end of the event CrossOriginEmbedderPolicyReporter.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkContext {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkContext';
          // Denotes the end of the event NetworkContext.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkContextClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkContextClient';
          // Denotes the end of the event NetworkContextClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkQualityEstimatorManagerClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkQualityEstimatorManagerClient';
          // Denotes the end of the event NetworkQualityEstimatorManagerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkServiceClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkServiceClient';
          // Denotes the end of the event NetworkServiceClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProxyConfigPollerClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.ProxyConfigPollerClient';
          // Denotes the end of the event ProxyConfigPollerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProxyLookupClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.ProxyLookupClient';
          // Denotes the end of the event ProxyLookupClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ResolveHostClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.ResolveHostClient';
          // Denotes the end of the event ResolveHostClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RestrictedCookieManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.RestrictedCookieManager';
          // Denotes the end of the event RestrictedCookieManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TrustedHeaderClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.TrustedHeaderClient';
          // Denotes the end of the event TrustedHeaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TrustedURLLoaderHeaderClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.TrustedURLLoaderHeaderClient';
          // Denotes the end of the event TrustedURLLoaderHeaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace URLLoader {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.URLLoader';
          // Denotes the end of the event URLLoader.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace URLLoaderClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.URLLoaderClient';
          // Denotes the end of the event URLLoaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace URLLoaderFactory {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.URLLoaderFactory';
          // Denotes the end of the event URLLoaderFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace URLLoader {
      type SendResponseToClient = 
        TraceEvent.Network.URLLoader.SendResponseToClient.X;
    
      namespace SendResponseToClient {
        interface X extends TraceEvent.Base {
          args: {
            url: string;
          };
          // Duration.
          dur: number;
          name: 'network::URLLoader::SendResponseToClient';
          // Denotes the end of the event SendResponseToClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace NGInlineNode {
    type ShapeText = 
      TraceEvent.NGInlineNode.ShapeText.X;
  
    namespace ShapeText {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NGInlineNode::ShapeText';
        // Denotes the end of the event ShapeText.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Nodamageyet {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'No damage yet';
      // Denotes an event Nodamageyet. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Node {
    type MarkSubtreeNeedsStyleRecalcForFontUpdates = 
      TraceEvent.Node.MarkSubtreeNeedsStyleRecalcForFontUpdates.X;
  
    type UpdateDistribution = 
      TraceEvent.Node.UpdateDistribution.X;
  
    namespace MarkSubtreeNeedsStyleRecalcForFontUpdates {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Node::MarkSubtreeNeedsStyleRecalcForFontUpdates';
        // Denotes the end of the event MarkSubtreeNeedsStyleRecalcForFontUpdates.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateDistribution {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Node::updateDistribution';
        // Denotes the end of the event UpdateDistribution.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Non_waking_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'non_waking_tq';
      // Denotes the end of the event Non_waking_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NSWindow {
    type PerformKeyEquivalent = 
      TraceEvent.NSWindow.PerformKeyEquivalent.X;
  
    type SendEvent = 
      TraceEvent.NSWindow.SendEvent.X;
  
    namespace PerformKeyEquivalent {
      interface X extends TraceEvent.Base {
        args: {
          WindowNum: number;
        };
        // Duration.
        dur: number;
        name: 'NSWindow::performKeyEquivalent';
        // Denotes the end of the event PerformKeyEquivalent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendEvent {
      interface X extends TraceEvent.Base {
        args: {
          WindowNum: number;
        };
        // Duration.
        dur: number;
        name: 'NSWindow::sendEvent';
        // Denotes the end of the event SendEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Num_cpus {
    interface M extends TraceEvent.Base {
      args: {
        number: number;
      };
      name: 'num_cpus';
      // Denotes metadata for the event Num_cpus.
      ph: 'M';
    }
  }

  namespace Obmark0c_search {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-c_search';
      // Denotes a mark of the event Obmark0c_search.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0odbMB_120 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-odb-MB_12-0';
      // Denotes a mark of the event Obmark0odbMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0odbTR_11 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-odb-TR_1-1';
      // Denotes a mark of the event Obmark0odbTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0renderMB_120 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-render-MB_12-0';
      // Denotes a mark of the event Obmark0renderMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0renderTR_11 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-render-TR_1-1';
      // Denotes a mark of the event Obmark0renderTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0start {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-start';
      // Denotes a mark of the event Obmark0start.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1c_foundMB_120 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-c_found-MB_12-0';
      // Denotes a mark of the event Obmark1c_foundMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1c_foundTR_11 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-c_found-TR_1-1';
      // Denotes a mark of the event Obmark1c_foundTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1odb_rMB_120 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-odb_r-MB_12-0';
      // Denotes a mark of the event Obmark1odb_rMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1odb_rTR_11 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-odb_r-TR_1-1';
      // Denotes a mark of the event Obmark1odb_rTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1renderedMB_120 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-rendered-MB_12-0';
      // Denotes a mark of the event Obmark1renderedMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1renderedTR_11 {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-rendered-TR_1-1';
      // Denotes a mark of the event Obmark1renderedTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasurec_foundMB_120 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-MB_12-0';
      // Denotes the beginning of the nestable async flow event Obmeasurec_foundMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-MB_12-0';
      // Denotes a step into the nestable async flow event Obmeasurec_foundMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasurec_foundTR_11 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-TR_1-1';
      // Denotes the beginning of the nestable async flow event Obmeasurec_foundTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-TR_1-1';
      // Denotes a step into the nestable async flow event Obmeasurec_foundTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasureodb_rMB_120 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-MB_12-0';
      // Denotes the beginning of the nestable async flow event Obmeasureodb_rMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-MB_12-0';
      // Denotes a step into the nestable async flow event Obmeasureodb_rMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasureodb_rTR_11 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-TR_1-1';
      // Denotes the beginning of the nestable async flow event Obmeasureodb_rTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-TR_1-1';
      // Denotes a step into the nestable async flow event Obmeasureodb_rTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasureodbMB_120 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-MB_12-0';
      // Denotes the beginning of the nestable async flow event ObmeasureodbMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-MB_12-0';
      // Denotes a step into the nestable async flow event ObmeasureodbMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasureodbTR_11 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-TR_1-1';
      // Denotes the beginning of the nestable async flow event ObmeasureodbTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-TR_1-1';
      // Denotes a step into the nestable async flow event ObmeasureodbTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasurerenderedMB_120 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-MB_12-0';
      // Denotes the beginning of the nestable async flow event ObmeasurerenderedMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-MB_12-0';
      // Denotes a step into the nestable async flow event ObmeasurerenderedMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasurerenderedTR_11 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-TR_1-1';
      // Denotes the beginning of the nestable async flow event ObmeasurerenderedTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-TR_1-1';
      // Denotes a step into the nestable async flow event ObmeasurerenderedTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OnDeviceHeadProvider {
    type Start = 
      TraceEvent.OnDeviceHeadProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'OnDeviceHeadProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Onetapvideo {
    type EmbedRequest = 
      TraceEvent.Onetapvideo.EmbedRequest.R;
  
    type PlayerReady = 
      TraceEvent.Onetapvideo.PlayerReady.R;
  
    namespace EmbedRequest {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: 'one-tap-video::embedRequest';
        // Denotes a mark of the event EmbedRequest.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PlayerReady {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: 'one-tap-video::playerReady';
        // Denotes a mark of the event PlayerReady.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace OnLoad {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'On Load';
      // Denotes the beginning of the nestable async flow event OnLoad.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'On Load';
      // Denotes a step into the nestable async flow event OnLoad.
      ph: 'e';
    }
  }

  namespace OnMintTokenSuccess {
    interface n extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'OnMintTokenSuccess';
      // Denotes the ending of the nestable async flow event OnMintTokenSuccess.
      ph: 'n';
      scope: string;
    }
  }

  namespace OnRequestFailed {
    interface b extends TraceEvent.Base {
      args: {
        error: number;
      };
      id: string;
      name: 'OnRequestFailed';
      // Denotes the beginning of the nestable async flow event OnRequestFailed.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'OnRequestFailed';
      // Denotes a step into the nestable async flow event OnRequestFailed.
      ph: 'e';
      scope: string;
    }
  }

  namespace OnResponseStarted {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'OnResponseStarted';
      // Denotes the beginning of the nestable async flow event OnResponseStarted.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'OnResponseStarted';
      // Denotes a step into the nestable async flow event OnResponseStarted.
      ph: 'e';
      scope: string;
    }
  }

  namespace Optimizely {
    type BlockBegin = 
      TraceEvent.Optimizely.BlockBegin.R;
  
    namespace BlockBegin {
      interface R extends TraceEvent.Base {
        args: {
          data: {
            navigationId: string;
            startTime?: number;
          };
        };
        name: 'optimizely:blockBegin';
        // Denotes a mark of the event BlockBegin.
        ph: 'R';
        s?: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace OptimizelyEnd {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'optimizelyEnd';
      // Denotes a mark of the event OptimizelyEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OptimizelyStart {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'optimizelyStart';
      // Denotes a mark of the event OptimizelyStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OptimizelyTime {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'optimizelyTime';
      // Denotes the beginning of the nestable async flow event OptimizelyTime.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'optimizelyTime';
      // Denotes a step into the nestable async flow event OptimizelyTime.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace OverlayInterstitialAdDetector {
    type MaybeFireDetection = 
      TraceEvent.OverlayInterstitialAdDetector.MaybeFireDetection.X;
  
    namespace MaybeFireDetection {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'OverlayInterstitialAdDetector::MaybeFireDetection';
        // Denotes the end of the event MaybeFireDetection.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace OverlayProcessorMac {
    type ProcessForOverlays = 
      TraceEvent.OverlayProcessorMac.ProcessForOverlays.X;
  
    namespace ProcessForOverlays {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'OverlayProcessorMac::ProcessForOverlays';
        // Denotes the end of the event ProcessForOverlays.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Page_load_metrics {
    namespace Mojom {
      type PageLoadMetrics = 
        TraceEvent.Page_load_metrics.Mojom.PageLoadMetrics.X;
    
      namespace PageLoadMetrics {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'page_load_metrics.mojom.PageLoadMetrics';
          // Denotes the end of the event PageLoadMetrics.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace PageAnimator {
    type ServiceScriptedAnimations = 
      TraceEvent.PageAnimator.ServiceScriptedAnimations.X;
  
    namespace ServiceScriptedAnimations {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageAnimator::serviceScriptedAnimations';
        // Denotes the end of the event ServiceScriptedAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PageLoad {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'pageLoad';
      // Denotes the beginning of the nestable async flow event PageLoad.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'pageLoad';
      // Denotes a step into the nestable async flow event PageLoad.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PageMsg_SetHistoryOffsetAndLength {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PageMsg_SetHistoryOffsetAndLength';
      // Denotes the end of the event PageMsg_SetHistoryOffsetAndLength.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Paint {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          clip: {
          
          }[];
          frame: string;
          layerId: number;
        };
      };
      name: 'Paint';
      // Denotes an event Paint. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        data: {
          clip: {
          
          }[];
          frame: string;
          layerId: number;
          nodeId: number;
        };
      };
      // Duration.
      dur: number;
      name: 'Paint';
      // Denotes the end of the event Paint.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PaintArtifact {
    type AppendToWebDisplayItemList = 
      TraceEvent.PaintArtifact.AppendToWebDisplayItemList.X;
  
    type Replay = 
      TraceEvent.PaintArtifact.Replay.X;
  
    namespace AppendToWebDisplayItemList {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintArtifact::appendToWebDisplayItemList';
        // Denotes the end of the event AppendToWebDisplayItemList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Replay {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintArtifact::replay';
        // Denotes the end of the event Replay.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintArtifactCompositor {
    type Update = 
      TraceEvent.PaintArtifactCompositor.Update.X;
  
    namespace Update {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintArtifactCompositor::Update';
        // Denotes the end of the event Update.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintController {
    type CommitNewDisplayItems = 
      TraceEvent.PaintController.CommitNewDisplayItems.X;
  
    namespace CommitNewDisplayItems {
      interface X extends TraceEvent.Base {
        args: {
          current_display_list_size: number;
          num_non_cached_new_items: number;
        };
        // Duration.
        dur: number;
        name: 'PaintController::commitNewDisplayItems';
        // Denotes the end of the event CommitNewDisplayItems.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintImage {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          height?: number;
          nodeId: number;
          srcHeight?: number;
          srcWidth?: number;
          url?: string;
          width?: number;
          x?: number;
          y?: number;
        };
      };
      // Duration.
      dur: number;
      name: 'PaintImage';
      // Denotes the end of the event PaintImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PaintLayer {
    type UpdateDescendantDependentFlags = 
      TraceEvent.PaintLayer.UpdateDescendantDependentFlags.X;
  
    type UpdateLayerPositionsAfterLayout = 
      TraceEvent.PaintLayer.UpdateLayerPositionsAfterLayout.X;
  
    namespace UpdateDescendantDependentFlags {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintLayer::UpdateDescendantDependentFlags';
        // Denotes the end of the event UpdateDescendantDependentFlags.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateLayerPositionsAfterLayout {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintLayer::updateLayerPositionsAfterLayout';
        // Denotes the end of the event UpdateLayerPositionsAfterLayout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintLayerCompositor {
    type UpdateAssignmentsIfNeededRecursive = 
      TraceEvent.PaintLayerCompositor.UpdateAssignmentsIfNeededRecursive.X;
  
    type UpdateInputsIfNeededRecursive = 
      TraceEvent.PaintLayerCompositor.UpdateInputsIfNeededRecursive.X;
  
    namespace UpdateAssignmentsIfNeededRecursive {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintLayerCompositor::UpdateAssignmentsIfNeededRecursive';
        // Denotes the end of the event UpdateAssignmentsIfNeededRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateInputsIfNeededRecursive {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintLayerCompositor::UpdateInputsIfNeededRecursive';
        // Denotes the end of the event UpdateInputsIfNeededRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintNonDefaultBackgroundColor {
    interface R extends TraceEvent.Base {
      args: {
      
      };
      name: 'paintNonDefaultBackgroundColor';
      // Denotes a mark of the event PaintNonDefaultBackgroundColor.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PaintTimingVisualizer {
    type LayoutObjectPainted = 
      TraceEvent.PaintTimingVisualizer.LayoutObjectPainted.I;
  
    type Viewport = 
      TraceEvent.PaintTimingVisualizer.Viewport.I;
  
    namespace LayoutObjectPainted {
      interface I extends TraceEvent.Base {
        args: {
          data: {
            dom_node_id: number;
            frame: string;
            image_url?: string;
            is_aggregation_text?: boolean;
            is_image?: boolean;
            is_image_loaded?: boolean;
            is_in_main_frame: boolean;
            is_in_outermost_main_frame?: boolean;
            is_svg: boolean;
            object_name: string;
            rect: {
            
            }[];
          };
        };
        name: 'PaintTimingVisualizer::LayoutObjectPainted';
        // Denotes an event LayoutObjectPainted. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Viewport {
      interface I extends TraceEvent.Base {
        args: {
          data: {
            viewport_rect: {
            
            }[];
          };
        };
        name: 'PaintTimingVisualizer::Viewport';
        // Denotes an event Viewport. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ParkableStringImpl {
    type CompressInBackground = 
      TraceEvent.ParkableStringImpl.CompressInBackground.X;
  
    type Unpark = 
      TraceEvent.ParkableStringImpl.Unpark.X;
  
    namespace CompressInBackground {
      interface X extends TraceEvent.Base {
        args: {
          size: number;
        };
        // Duration.
        dur: number;
        name: 'ParkableStringImpl::CompressInBackground';
        // Denotes the end of the event CompressInBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Unpark {
      interface X extends TraceEvent.Base {
        args: {
          size: number;
        };
        // Duration.
        dur: number;
        name: 'ParkableStringImpl::Unpark';
        // Denotes the end of the event Unpark.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ParkableStringManager {
    type AgeStringsAndPark = 
      TraceEvent.ParkableStringManager.AgeStringsAndPark.X;
  
    namespace AgeStringsAndPark {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ParkableStringManager::AgeStringsAndPark';
        // Denotes the end of the event AgeStringsAndPark.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ParseAuthorStyleSheet {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          styleSheetUrl: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ParseAuthorStyleSheet';
      // Denotes the end of the event ParseAuthorStyleSheet.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ParseHTML {
    interface B extends TraceEvent.Base {
      args: {
        beginData: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          startLine: number;
          url: string;
        };
      };
      name: 'ParseHTML';
      // Denotes the beginning of the event ParseHTML.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        endData: {
          endLine: number;
        };
      };
      name: 'ParseHTML';
      // Denotes the ending of the event ParseHTML.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        beginData: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          startLine: number;
          url: string;
        };
        endData: {
          endLine: number;
        };
      };
      // Duration.
      dur: number;
      name: 'ParseHTML';
      // Denotes the end of the event ParseHTML.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PartitionAllocMemoryReclaimer {
    type Reclaim = 
      TraceEvent.PartitionAllocMemoryReclaimer.Reclaim.X;
  
    namespace Reclaim {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PartitionAllocMemoryReclaimer::Reclaim()';
        // Denotes the end of the event Reclaim.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PasswordStore {
    type GetLogins = 
      TraceEvent.PasswordStore.GetLogins.b |
      TraceEvent.PasswordStore.GetLogins.e;
  
    namespace GetLogins {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'PasswordStore::GetLogins';
        // Denotes the beginning of the nestable async flow event GetLogins.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'PasswordStore::GetLogins';
        // Denotes a step into the nestable async flow event GetLogins.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace PeakMemoryTracking {
    interface F extends TraceEvent.Base {
      args: {
        end_sources: {
          difference: {
            TOTAL: number;
          };
          source_difference: {
            COMMAND_BUFFER: number;
            SHARED_CONTEXT_STATE: number;
            SHARED_IMAGE_STUB: number;
            SKIA: number;
            UNKNOWN: number;
          };
          source_totals: {
            COMMAND_BUFFER: number;
            SHARED_CONTEXT_STATE: number;
            SHARED_IMAGE_STUB: number;
            SKIA: number;
            UNKNOWN: number;
          };
        };
        peak: number;
      };
      id: string;
      name: 'PeakMemoryTracking';
      // Denotes the ending of the async event PeakMemoryTracking.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
        start: number;
        start_sources: {
          COMMAND_BUFFER: number;
          SHARED_CONTEXT_STATE: number;
          SHARED_IMAGE_STUB: number;
          SKIA: number;
          UNKNOWN: number;
        };
      };
      id: string;
      name: 'PeakMemoryTracking';
      // Denotes the beginning of the async event PeakMemoryTracking.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends TraceEvent.Base {
      args: {
        peak: number;
        step: string;
      };
      id: string;
      name: 'PeakMemoryTracking';
      // Denotes a step into the async event PeakMemoryTracking.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PendingAnimations {
    type NotifyCompositorAnimationStarted = 
      TraceEvent.PendingAnimations.NotifyCompositorAnimationStarted.X;
  
    namespace NotifyCompositorAnimationStarted {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PendingAnimations::notifyCompositorAnimationStarted';
        // Denotes the end of the event NotifyCompositorAnimationStarted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PendingScript {
    type ExecuteScriptBlock = 
      TraceEvent.PendingScript.ExecuteScriptBlock.X;
  
    namespace ExecuteScriptBlock {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PendingScript::ExecuteScriptBlock';
        // Denotes the end of the event ExecuteScriptBlock.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PendingTree {
    type Waiting = 
      TraceEvent.PendingTree.Waiting.b |
      TraceEvent.PendingTree.Waiting.e;
  
    namespace Waiting {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'PendingTree:waiting';
        // Denotes the beginning of the nestable async flow event Waiting.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'PendingTree:waiting';
        // Denotes a step into the nestable async flow event Waiting.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace Performance_manager {
    namespace Mojom {
      type DocumentCoordinationUnit = 
        TraceEvent.Performance_manager.Mojom.DocumentCoordinationUnit.X;
    
      type ProcessCoordinationUnit = 
        TraceEvent.Performance_manager.Mojom.ProcessCoordinationUnit.X;
    
      namespace DocumentCoordinationUnit {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'performance_manager.mojom.DocumentCoordinationUnit';
          // Denotes the end of the event DocumentCoordinationUnit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProcessCoordinationUnit {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'performance_manager.mojom.ProcessCoordinationUnit';
          // Denotes the end of the event ProcessCoordinationUnit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace PipelineReporter {
    interface b extends TraceEvent.Base {
      args: {
        chrome_frame_reporter: {
          affects_smoothness?: boolean;
          frame_sequence: number;
          frame_source: number;
          frame_type?: string;
          has_compositor_animation?: boolean;
          has_high_latency?: boolean;
          has_main_animation?: boolean;
          has_missing_content?: boolean;
          has_smooth_input_main?: boolean;
          high_latency_contribution_stage?: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21'?: {
            
            };
            '22'?: {
            
            };
            '23'?: {
            
            };
            '24'?: {
            
            };
            '25'?: {
            
            };
            '26'?: {
            
            };
            '27'?: {
            
            };
            '28'?: {
            
            };
            '29'?: {
            
            };
            '30'?: {
            
            };
            '31'?: {
            
            };
            '32'?: {
            
            };
            '33'?: {
            
            };
            '34'?: {
            
            };
            '35'?: {
            
            };
            '36'?: {
            
            };
            '37'?: {
            
            };
            '38'?: {
            
            };
            '39'?: {
            
            };
            '40'?: {
            
            };
            '41'?: {
            
            };
            '42'?: {
            
            };
            '43'?: {
            
            };
            '44'?: {
            
            };
            '45'?: {
            
            };
            '46'?: {
            
            };
            '47'?: {
            
            };
            '48'?: {
            
            };
            '49'?: {
            
            };
            '50'?: {
            
            };
            '51'?: {
            
            };
            '52'?: {
            
            };
            '53'?: {
            
            };
            '54'?: {
            
            };
            '55'?: {
            
            };
            '56'?: {
            
            };
            '57'?: {
            
            };
            '58'?: {
            
            };
            '59'?: {
            
            };
            '60'?: {
            
            };
            '61'?: {
            
            };
            '62'?: {
            
            };
            '63'?: {
            
            };
            '64'?: {
            
            };
            '65'?: {
            
            };
            '66'?: {
            
            };
            '67'?: {
            
            };
            '68'?: {
            
            };
            '69'?: {
            
            };
            '70'?: {
            
            };
            '71'?: {
            
            };
            '72'?: {
            
            };
            '73'?: {
            
            };
            '74'?: {
            
            };
            '75'?: {
            
            };
            '76'?: {
            
            };
            '77'?: {
            
            };
            '78'?: {
            
            };
            '79'?: {
            
            };
            '80'?: {
            
            };
            '81'?: {
            
            };
            '82'?: {
            
            };
            '83'?: {
            
            };
            '84'?: {
            
            };
          }[];
          layer_tree_host_id?: number;
          scroll_state?: string;
          state: string;
        };
      };
      id2: {
        local: string;
      };
      name: 'PipelineReporter';
      // Denotes the beginning of the nestable async flow event PipelineReporter.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'PipelineReporter';
      // Denotes a step into the nestable async flow event PipelineReporter.
      ph: 'e';
    }
  }

  namespace PlatformResourceSendRequest {
    interface B extends TraceEvent.Base {
      args: {
        data: {
          id: string;
        };
      };
      name: 'PlatformResourceSendRequest';
      // Denotes the beginning of the event PlatformResourceSendRequest.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
      
      };
      name: 'PlatformResourceSendRequest';
      // Denotes the ending of the event PlatformResourceSendRequest.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PostCommit {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PostCommit';
      // Denotes the end of the event PostCommit.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PostingToCompositor {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'PostingToCompositor';
      // Denotes an event PostingToCompositor. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PreemptionAllowedStackScope {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'PreemptionAllowedStackScope';
      // Denotes the beginning of the nestable async flow event PreemptionAllowedStackScope.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'PreemptionAllowedStackScope';
      // Denotes a step into the nestable async flow event PreemptionAllowedStackScope.
      ph: 'e';
      scope: string;
    }
  }

  namespace PreloadRenderBlockingStatusChange {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          renderBlocking?: string;
          requestId: string;
          url: string;
        };
      };
      name: 'PreloadRenderBlockingStatusChange';
      // Denotes an event PreloadRenderBlockingStatusChange. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace PrePaint {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          isOutermostMainFrame: boolean;
          page: string;
        };
      };
      // Duration.
      dur: number;
      name: 'PrePaint';
      // Denotes the end of the event PrePaint.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PrerenderManagerFactory {
    type GetForProfile = 
      TraceEvent.PrerenderManagerFactory.GetForProfile.X;
  
    namespace GetForProfile {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PrerenderManagerFactory::GetForProfile';
        // Denotes the end of the event GetForProfile.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Printing {
    namespace Mojom {
      type PrintRenderFrame = 
        TraceEvent.Printing.Mojom.PrintRenderFrame.X;
    
      namespace PrintRenderFrame {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'printing.mojom.PrintRenderFrame';
          // Denotes the end of the event PrintRenderFrame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Process_labels {
    interface M extends TraceEvent.Base {
      args: {
        labels: string;
      };
      name: 'process_labels';
      // Denotes metadata for the event Process_labels.
      ph: 'M';
    }
  }

  namespace Process_name {
    interface M extends TraceEvent.Base {
      args: {
        name: string;
      };
      name: 'process_name';
      // Denotes metadata for the event Process_name.
      ph: 'M';
    }
  }

  namespace Process_sort_index {
    interface M extends TraceEvent.Base {
      args: {
        sort_index: number;
      };
      name: 'process_sort_index';
      // Denotes metadata for the event Process_sort_index.
      ph: 'M';
    }
  }

  namespace Process_uptime_seconds {
    interface M extends TraceEvent.Base {
      args: {
        uptime: number;
      };
      name: 'process_uptime_seconds';
      // Denotes metadata for the event Process_uptime_seconds.
      ph: 'M';
    }
  }

  namespace ProcessCommitResponse {
    interface X extends TraceEvent.Base {
      args: {
        type: string;
      };
      // Duration.
      dur: number;
      name: 'ProcessCommitResponse';
      // Denotes the end of the event ProcessCommitResponse.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProcessUIResourceRequestQueue {
    interface X extends TraceEvent.Base {
      args: {
        queue_size: number;
      };
      // Duration.
      dur: number;
      name: 'ProcessUIResourceRequestQueue';
      // Denotes the end of the event ProcessUIResourceRequestQueue.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProfileManager {
    type GetProfileInfoCache = 
      TraceEvent.ProfileManager.GetProfileInfoCache.X;
  
    namespace GetProfileInfoCache {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProfileManager::GetProfileInfoCache';
        // Denotes the end of the event GetProfileInfoCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ProgramBindingBase {
    type Init = 
      TraceEvent.ProgramBindingBase.Init.X;
  
    namespace Init {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProgramBindingBase::init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          pac_string: string;
        };
        source_type: string;
      };
      id: string;
      name: 'PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST';
      // Denotes the ending of the nestable async flow event PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST.
      ph: 'n';
      scope: string;
    }
  }

  namespace PROXY_RESOLUTION_SERVICE {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'PROXY_RESOLUTION_SERVICE';
      // Denotes the beginning of the nestable async flow event PROXY_RESOLUTION_SERVICE.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'PROXY_RESOLUTION_SERVICE';
      // Denotes a step into the nestable async flow event PROXY_RESOLUTION_SERVICE.
      ph: 'e';
      scope: string;
    }
  }

  namespace Proxy_resolver {
    namespace Mojom {
      type ProxyResolver = 
        TraceEvent.Proxy_resolver.Mojom.ProxyResolver.X;
    
      type ProxyResolverRequestClient = 
        TraceEvent.Proxy_resolver.Mojom.ProxyResolverRequestClient.X;
    
      namespace ProxyResolver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'proxy_resolver.mojom.ProxyResolver';
          // Denotes the end of the event ProxyResolver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProxyResolverRequestClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'proxy_resolver.mojom.ProxyResolverRequestClient';
          // Denotes the end of the event ProxyResolverRequestClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ProxyImpl {
    type BeginMainFrameAbortedOnImplThread = 
      TraceEvent.ProxyImpl.BeginMainFrameAbortedOnImplThread.X;
  
    type DidActivateSyncTreeOnImplThread = 
      TraceEvent.ProxyImpl.DidActivateSyncTreeOnImplThread.X;
  
    type DidReceiveCompositorFrameAckOnImplThread = 
      TraceEvent.ProxyImpl.DidReceiveCompositorFrameAckOnImplThread.X;
  
    type FinishGLOnImplThread = 
      TraceEvent.ProxyImpl.FinishGLOnImplThread.X;
  
    type InitializeLayerTreeFrameSinkOnImplThread = 
      TraceEvent.ProxyImpl.InitializeLayerTreeFrameSinkOnImplThread.X;
  
    type NotifyReadyToActivate = 
      TraceEvent.ProxyImpl.NotifyReadyToActivate.X;
  
    type NotifyReadyToCommitOnImpl = 
      TraceEvent.ProxyImpl.NotifyReadyToCommitOnImpl.X;
  
    type NotifyReadyToDraw = 
      TraceEvent.ProxyImpl.NotifyReadyToDraw.X;
  
    type OnCanDrawStateChanged = 
      TraceEvent.ProxyImpl.OnCanDrawStateChanged.X;
  
    type ProxyImpl = 
      TraceEvent.ProxyImpl.ProxyImpl.X;
  
    type RequestBeginMainFrameNotExpected = 
      TraceEvent.ProxyImpl.RequestBeginMainFrameNotExpected.X;
  
    type ScheduledActionActivateSyncTree = 
      TraceEvent.ProxyImpl.ScheduledActionActivateSyncTree.X;
  
    type ScheduledActionBeginLayerTreeFrameSinkCreation = 
      TraceEvent.ProxyImpl.ScheduledActionBeginLayerTreeFrameSinkCreation.X;
  
    type ScheduledActionCommit = 
      TraceEvent.ProxyImpl.ScheduledActionCommit.X;
  
    type ScheduledActionDraw = 
      TraceEvent.ProxyImpl.ScheduledActionDraw.X;
  
    type ScheduledActionPerformImplSideInvalidation = 
      TraceEvent.ProxyImpl.ScheduledActionPerformImplSideInvalidation.X;
  
    type ScheduledActionPrepareTiles = 
      TraceEvent.ProxyImpl.ScheduledActionPrepareTiles.X;
  
    type SetNeedsCommitOnImplThread = 
      TraceEvent.ProxyImpl.SetNeedsCommitOnImplThread.X;
  
    type SetNeedsOneBeginImplFrameOnImplThread = 
      TraceEvent.ProxyImpl.SetNeedsOneBeginImplFrameOnImplThread.X;
  
    type SetNeedsRedrawOnImplThread = 
      TraceEvent.ProxyImpl.SetNeedsRedrawOnImplThread.X;
  
    type SetVisibleOnImplThread = 
      TraceEvent.ProxyImpl.SetVisibleOnImplThread.X;
  
    namespace BeginMainFrameAbortedOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
          reason: string;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::BeginMainFrameAbortedOnImplThread';
        // Denotes the end of the event BeginMainFrameAbortedOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidActivateSyncTreeOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::DidActivateSyncTreeOnImplThread';
        // Denotes the end of the event DidActivateSyncTreeOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidReceiveCompositorFrameAckOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::DidReceiveCompositorFrameAckOnImplThread';
        // Denotes the end of the event DidReceiveCompositorFrameAckOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishGLOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::FinishGLOnImplThread';
        // Denotes the end of the event FinishGLOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeLayerTreeFrameSinkOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::InitializeLayerTreeFrameSinkOnImplThread';
        // Denotes the end of the event InitializeLayerTreeFrameSinkOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToActivate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::NotifyReadyToActivate';
        // Denotes the end of the event NotifyReadyToActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToCommitOnImpl {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::NotifyReadyToCommitOnImpl';
        // Denotes the end of the event NotifyReadyToCommitOnImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToDraw {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::NotifyReadyToDraw';
        // Denotes the end of the event NotifyReadyToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCanDrawStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          can_draw: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::OnCanDrawStateChanged';
        // Denotes the end of the event OnCanDrawStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProxyImpl {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ProxyImpl';
        // Denotes the end of the event ProxyImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RequestBeginMainFrameNotExpected {
      interface X extends TraceEvent.Base {
        args: {
          new_state: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::RequestBeginMainFrameNotExpected';
        // Denotes the end of the event RequestBeginMainFrameNotExpected.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionActivateSyncTree {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionActivateSyncTree';
        // Denotes the end of the event ScheduledActionActivateSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionBeginLayerTreeFrameSinkCreation {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionBeginLayerTreeFrameSinkCreation';
        // Denotes the end of the event ScheduledActionBeginLayerTreeFrameSinkCreation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionCommit {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionCommit';
        // Denotes the end of the event ScheduledActionCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionDraw {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionDraw';
        // Denotes the end of the event ScheduledActionDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionPerformImplSideInvalidation {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionPerformImplSideInvalidation';
        // Denotes the end of the event ScheduledActionPerformImplSideInvalidation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionPrepareTiles {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionPrepareTiles';
        // Denotes the end of the event ScheduledActionPrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsCommitOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetNeedsCommitOnImplThread';
        // Denotes the end of the event SetNeedsCommitOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsOneBeginImplFrameOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetNeedsOneBeginImplFrameOnImplThread';
        // Denotes the end of the event SetNeedsOneBeginImplFrameOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsRedrawOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetNeedsRedrawOnImplThread';
        // Denotes the end of the event SetNeedsRedrawOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisibleOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetVisibleOnImplThread';
        // Denotes the end of the event SetVisibleOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ProxyMain {
    type BeginMainFrameNotExpectedSoon = 
      TraceEvent.ProxyMain.BeginMainFrameNotExpectedSoon.X;
  
    type BeginMainFrameNotExpectedUntil = 
      TraceEvent.ProxyMain.BeginMainFrameNotExpectedUntil.X;
  
    type DidInitializeLayerTreeFrameSink = 
      TraceEvent.ProxyMain.DidInitializeLayerTreeFrameSink.X;
  
    type ProxyMain = 
      TraceEvent.ProxyMain.ProxyMain.X;
  
    type RequestNewLayerTreeFrameSink = 
      TraceEvent.ProxyMain.RequestNewLayerTreeFrameSink.X;
  
    type SetDeferCommits = 
      TraceEvent.ProxyMain.SetDeferCommits.b |
      TraceEvent.ProxyMain.SetDeferCommits.e;
  
    type SetDeferMainFrameUpdate = 
      TraceEvent.ProxyMain.SetDeferMainFrameUpdate.b |
      TraceEvent.ProxyMain.SetDeferMainFrameUpdate.e;
  
    type SetNeedsAnimate = 
      TraceEvent.ProxyMain.SetNeedsAnimate.I;
  
    type SetNeedsCommit = 
      TraceEvent.ProxyMain.SetNeedsCommit.I;
  
    type SetNeedsUpdateLayers = 
      TraceEvent.ProxyMain.SetNeedsUpdateLayers.I;
  
    type SetVisible = 
      TraceEvent.ProxyMain.SetVisible.X;
  
    type Stop = 
      TraceEvent.ProxyMain.Stop.X;
  
    namespace BeginMainFrame {
      type Commit = 
        TraceEvent.ProxyMain.BeginMainFrame.Commit.X;
    
      namespace Commit {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ProxyMain::BeginMainFrame::commit';
          // Denotes the end of the event Commit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace BeginMainFrameNotExpectedSoon {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::BeginMainFrameNotExpectedSoon';
        // Denotes the end of the event BeginMainFrameNotExpectedSoon.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginMainFrameNotExpectedUntil {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::BeginMainFrameNotExpectedUntil';
        // Denotes the end of the event BeginMainFrameNotExpectedUntil.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidInitializeLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::DidInitializeLayerTreeFrameSink';
        // Denotes the end of the event DidInitializeLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProxyMain {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::ProxyMain';
        // Denotes the end of the event ProxyMain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RequestNewLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::RequestNewLayerTreeFrameSink';
        // Denotes the end of the event RequestNewLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetDeferCommits {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'ProxyMain::SetDeferCommits';
        // Denotes the beginning of the nestable async flow event SetDeferCommits.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'ProxyMain::SetDeferCommits';
        // Denotes a step into the nestable async flow event SetDeferCommits.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace SetDeferMainFrameUpdate {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'ProxyMain::SetDeferMainFrameUpdate';
        // Denotes the beginning of the nestable async flow event SetDeferMainFrameUpdate.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'ProxyMain::SetDeferMainFrameUpdate';
        // Denotes a step into the nestable async flow event SetDeferMainFrameUpdate.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace SetNeedsAnimate {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'ProxyMain::SetNeedsAnimate';
        // Denotes an event SetNeedsAnimate. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsCommit {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'ProxyMain::SetNeedsCommit';
        // Denotes an event SetNeedsCommit. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsUpdateLayers {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'ProxyMain::SetNeedsUpdateLayers';
        // Denotes an event SetNeedsUpdateLayers. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface X extends TraceEvent.Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::SetVisible';
        // Denotes the end of the event SetVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Stop {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::Stop';
        // Denotes the end of the event Stop.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
          quic_stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS';
      // Denotes the ending of the nestable async flow event QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: string;
          }[];
          quic_priority: number;
          quic_stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_CONNECTION_MIGRATION_MODE {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          connection_migration_mode: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_CONNECTION_MIGRATION_MODE';
      // Denotes the ending of the nestable async flow event QUIC_CONNECTION_MIGRATION_MODE.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_ACK_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta_time_largest_observed_us: number;
          largest_observed: number;
          smallest_observed: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_ACK_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_ACK_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_ACK_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          delta_time_largest_observed_us: number;
          largest_observed: number;
          smallest_observed: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_ACK_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_ACK_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_CERTIFICATE_VERIFIED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          subjects: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
            '13'?: {
            
            };
            '14'?: {
            
            };
            '15'?: {
            
            };
            '16'?: {
            
            };
            '17'?: {
            
            };
            '18'?: {
            
            };
            '19'?: {
            
            };
            '20'?: {
            
            };
            '21'?: {
            
            };
            '22'?: {
            
            };
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CERTIFICATE_VERIFIED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CERTIFICATE_VERIFIED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_CLOSED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          details: string;
          from_peer: boolean;
          quic_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CLOSED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CLOSED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_COALESCED_PACKET_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          info: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_COALESCED_PACKET_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_COALESCED_PACKET_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_CRYPTO_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          bytes: string;
          data_length: number;
          encryption_level: string;
          offset: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CRYPTO_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CRYPTO_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_CRYPTO_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          data_length: number;
          encryption_level: string;
          offset: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CRYPTO_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CRYPTO_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_HANDSHAKE_DONE_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_HANDSHAKE_DONE_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_HANDSHAKE_DONE_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_MAX_STREAMS_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          is_unidirectional: boolean;
          stream_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_MAX_STREAMS_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_MAX_STREAMS_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_PACKET_AUTHENTICATED {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_AUTHENTICATED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_AUTHENTICATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_PACKET_LOST {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          detection_time_us: number;
          packet_number: number;
          transmission_type: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_LOST';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_LOST.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_PACKET_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          peer_address: string;
          self_address: string;
          size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_PADDING_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          num_padding_bytes: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PADDING_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PADDING_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_PADDING_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          num_padding_bytes: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PADDING_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PADDING_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_PING_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PING_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PING_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_RST_STREAM_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          offset: number;
          quic_rst_stream_error: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_RST_STREAM_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_RST_STREAM_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_STOP_SENDING_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          error_code: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_STOP_SENDING_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_STOP_SENDING_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_STREAM_FRAME_COALESCED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          length: number;
          offset: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_STREAM_FRAME_COALESCED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_STREAM_FRAME_COALESCED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_STREAM_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          length: number;
          offset: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_STREAM_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_STREAM_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_STREAM_FRAME_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          fin: boolean;
          length: number;
          offset: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_STREAM_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_STREAM_FRAME_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_TRANSPORT_PARAMETERS_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          quic_transport_parameters: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_TRANSPORT_PARAMETERS_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_TRANSPORT_PARAMETERS_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_TRANSPORT_PARAMETERS_RESUMED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          quic_transport_parameters: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_TRANSPORT_PARAMETERS_RESUMED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_TRANSPORT_PARAMETERS_RESUMED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_TRANSPORT_PARAMETERS_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          quic_transport_parameters: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_TRANSPORT_PARAMETERS_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_TRANSPORT_PARAMETERS_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          connection_id: string;
          header_format: string;
          long_header_type?: string;
          packet_number: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_VERSION_NEGOTIATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          version: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_VERSION_NEGOTIATED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_VERSION_NEGOTIATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION_WINDOW_UPDATE_FRAME_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_offset: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_WINDOW_UPDATE_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_WINDOW_UPDATE_FRAME_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_SESSION {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          cert_verify_flags: number;
          connection_id: string;
          host: string;
          network_isolation_key: string;
          port: number;
          privacy_mode: string;
          require_confirmation: boolean;
          versions: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION';
      // Denotes the beginning of the nestable async flow event QUIC_SESSION.
      ph: 'b';
      scope: string;
    }
  }

  namespace QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB';
      // Denotes the ending of the nestable async flow event QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace QUIC_STREAM_FACTORY_JOB_CONNECT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          require_confirmation: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB_CONNECT';
      // Denotes the beginning of the nestable async flow event QUIC_STREAM_FACTORY_JOB_CONNECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB_CONNECT';
      // Denotes a step into the nestable async flow event QUIC_STREAM_FACTORY_JOB_CONNECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace QUIC_STREAM_FACTORY_JOB {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          host: string;
          network_isolation_key: string;
          port: number;
          privacy_mode: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB';
      // Denotes the beginning of the nestable async flow event QUIC_STREAM_FACTORY_JOB.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB';
      // Denotes a step into the nestable async flow event QUIC_STREAM_FACTORY_JOB.
      ph: 'e';
      scope: string;
    }
  }

  namespace RasterBufferStub {
    type Initialize = 
      TraceEvent.RasterBufferStub.Initialize.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterBufferStub::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterDecoderImpl {
    type DoRasterCHROMIUM = 
      TraceEvent.RasterDecoderImpl.DoRasterCHROMIUM.X;
  
    type FlushToWorkAroundMacCrashes = 
      TraceEvent.RasterDecoderImpl.FlushToWorkAroundMacCrashes.X;
  
    type Initialize = 
      TraceEvent.RasterDecoderImpl.Initialize.X;
  
    namespace DoEndRasterCHROMIUM {
      type Flush = 
        TraceEvent.RasterDecoderImpl.DoEndRasterCHROMIUM.Flush.X;
    
      namespace Flush {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'RasterDecoderImpl::DoEndRasterCHROMIUM::Flush';
          // Denotes the end of the event Flush.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterDecoderImpl::DoEndRasterCHROMIUM';
        // Denotes the end of the event DoEndRasterCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoRasterCHROMIUM {
      interface X extends TraceEvent.Base {
        args: {
          raster_id: number;
        };
        // Duration.
        dur: number;
        name: 'RasterDecoderImpl::DoRasterCHROMIUM';
        // Denotes the end of the event DoRasterCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushToWorkAroundMacCrashes {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterDecoderImpl::FlushToWorkAroundMacCrashes';
        // Denotes the end of the event FlushToWorkAroundMacCrashes.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterDecoderImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterImplementation {
    type Initialize = 
      TraceEvent.RasterImplementation.Initialize.X;
  
    type RasterCHROMIUM = 
      TraceEvent.RasterImplementation.RasterCHROMIUM.X;
  
    type SetAggressivelyFreeResources = 
      TraceEvent.RasterImplementation.SetAggressivelyFreeResources.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterImplementation::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RasterCHROMIUM {
      interface X extends TraceEvent.Base {
        args: {
          raster_chromium_id: number;
        };
        // Duration.
        dur: number;
        name: 'RasterImplementation::RasterCHROMIUM';
        // Denotes the end of the event RasterCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetAggressivelyFreeResources {
      interface X extends TraceEvent.Base {
        args: {
          aggressively_free_resources: boolean;
        };
        // Duration.
        dur: number;
        name: 'RasterImplementation::SetAggressivelyFreeResources';
        // Denotes the end of the event SetAggressivelyFreeResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterizerTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.RasterizerTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends TraceEvent.Base {
        args: {
          source_prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'RasterizerTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterSource {
    type PerformSolidColorAnalysis = 
      TraceEvent.RasterSource.PerformSolidColorAnalysis.X;
  
    namespace PerformSolidColorAnalysis {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterSource::PerformSolidColorAnalysis';
        // Denotes the end of the event PerformSolidColorAnalysis.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterTask {
    interface B extends TraceEvent.Base {
      args: {
        tileData: {
          layerId: number;
          sourceFrameNumber: number;
          tileId: {
            id_ref: string;
          };
          tileResolution: string;
        };
      };
      name: 'RasterTask';
      // Denotes the beginning of the event RasterTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
      
      };
      name: 'RasterTask';
      // Denotes the ending of the event RasterTask.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        tileData: {
          layerId: number;
          sourceFrameNumber: number;
          tileId: {
            id_ref: string;
          };
          tileResolution: string;
        };
      };
      // Duration.
      dur: number;
      name: 'RasterTask';
      // Denotes the end of the event RasterTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ReadyToCommitNavigation {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ReadyToCommitNavigation';
      // Denotes the beginning of the nestable async flow event ReadyToCommitNavigation.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'ReadyToCommitNavigation';
      // Denotes a step into the nestable async flow event ReadyToCommitNavigation.
      ph: 'e';
      scope: string;
    }
  }

  namespace RealTimeDomain {
    type DelayTillNextTask = 
      TraceEvent.RealTimeDomain.DelayTillNextTask.X;
  
    namespace DelayTillNextTask {
      interface X extends TraceEvent.Base {
        args: {
          delay_ms: number;
        };
        // Duration.
        dur: number;
        name: 'RealTimeDomain::DelayTillNextTask';
        // Denotes the end of the event DelayTillNextTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ReceiveCompositorFrameToStartDraw {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ReceiveCompositorFrameToStartDraw';
      // Denotes the beginning of the nestable async flow event ReceiveCompositorFrameToStartDraw.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ReceiveCompositorFrameToStartDraw';
      // Denotes a step into the nestable async flow event ReceiveCompositorFrameToStartDraw.
      ph: 'e';
      scope?: string;
    }
  }

  namespace RecordingSource {
    type DetermineIfSolidColor = 
      TraceEvent.RecordingSource.DetermineIfSolidColor.X;
  
    type FinishDisplayItemListUpdate = 
      TraceEvent.RecordingSource.FinishDisplayItemListUpdate.X;
  
    namespace DetermineIfSolidColor {
      interface X extends TraceEvent.Base {
        args: {
          opcount: number;
        };
        // Duration.
        dur: number;
        name: 'RecordingSource::DetermineIfSolidColor';
        // Denotes the end of the event DetermineIfSolidColor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishDisplayItemListUpdate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RecordingSource::FinishDisplayItemListUpdate';
        // Denotes the end of the event FinishDisplayItemListUpdate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RedirectEnd {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'redirectEnd';
      // Denotes a mark of the event RedirectEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace RedirectStart {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'redirectStart';
      // Denotes a mark of the event RedirectStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace RemoteWindowProxy {
    type Initialize = 
      TraceEvent.RemoteWindowProxy.Initialize.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
          IsMainFrame?: boolean;
          IsOutermostMainFrame?: boolean;
          isMainWindow?: boolean;
        };
        // Duration.
        dur: number;
        name: 'RemoteWindowProxy::initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RendererAudioState {
    interface b extends TraceEvent.Base {
      args: {
        state: string;
      };
      id2: {
        local: string;
      };
      name: 'RendererAudioState';
      // Denotes the beginning of the nestable async flow event RendererAudioState.
      ph: 'b';
      scope: string;
    }
  }

  namespace RendererMain {
    type START_MSG_LOOP = 
      TraceEvent.RendererMain.START_MSG_LOOP.S;
  
    namespace START_MSG_LOOP {
      interface S extends TraceEvent.Base {
        args: {
        
        };
        id: string;
        name: 'RendererMain.START_MSG_LOOP';
        // Denotes the beginning of the async event START_MSG_LOOP.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface S extends TraceEvent.Base {
      args: {
        zygote_child: boolean;
      };
      id: string;
      name: 'RendererMain';
      // Denotes the beginning of the async event RendererMain.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RendererPriority {
    interface b extends TraceEvent.Base {
      args: {
        state: string;
      };
      id2: {
        local: string;
      };
      name: 'RendererPriority';
      // Denotes the beginning of the nestable async flow event RendererPriority.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RendererPriority';
      // Denotes a step into the nestable async flow event RendererPriority.
      ph: 'e';
      scope: string;
    }
  }

  namespace RendererProcessType {
    interface b extends TraceEvent.Base {
      args: {
        state: string;
      };
      id2: {
        local: string;
      };
      name: 'RendererProcessType';
      // Denotes the beginning of the nestable async flow event RendererProcessType.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RendererProcessType';
      // Denotes a step into the nestable async flow event RendererProcessType.
      ph: 'e';
      scope: string;
    }
  }

  namespace RendererVisibility {
    interface b extends TraceEvent.Base {
      args: {
        state: string;
      };
      id2: {
        local: string;
      };
      name: 'RendererVisibility';
      // Denotes the beginning of the nestable async flow event RendererVisibility.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RendererVisibility';
      // Denotes a step into the nestable async flow event RendererVisibility.
      ph: 'e';
      scope: string;
    }
  }

  namespace RenderFrame {
    interface D extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'RenderFrame';
      // Denotes a delete object of the event RenderFrame.
      ph: 'D';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface N extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'RenderFrame';
      // Denotes a create object of the event RenderFrame.
      ph: 'N';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends TraceEvent.Base {
      args: {
        snapshot: {
          parent: {
            id_ref: string;
            scope: string;
          };
        };
      };
      id: string;
      name: 'RenderFrame';
      // Denotes a snapshot object of the event RenderFrame.
      ph: 'O';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderFrameHostImpl {
    type BeginNavigation = 
      TraceEvent.RenderFrameHostImpl.BeginNavigation.X;
  
    type CommitNavigation = 
      TraceEvent.RenderFrameHostImpl.CommitNavigation.X;
  
    type CreateRenderFrame = 
      TraceEvent.RenderFrameHostImpl.CreateRenderFrame.X;
  
    type DidCommitProvisionalLoad = 
      TraceEvent.RenderFrameHostImpl.DidCommitProvisionalLoad.X;
  
    type DidStopLoading = 
      TraceEvent.RenderFrameHostImpl.DidStopLoading.X;
  
    type FailedNavigation = 
      TraceEvent.RenderFrameHostImpl.FailedNavigation.X;
  
    type OnDidAddContentSecurityPolicies = 
      TraceEvent.RenderFrameHostImpl.OnDidAddContentSecurityPolicies.X;
  
    type SetLifecycleState = 
      TraceEvent.RenderFrameHostImpl.SetLifecycleState.X;
  
    type Unload = 
      TraceEvent.RenderFrameHostImpl.Unload.b |
      TraceEvent.RenderFrameHostImpl.Unload.e;
  
    namespace BeginNavigation {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::BeginNavigation';
        // Denotes the end of the event BeginNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitNavigation {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::CommitNavigation';
        // Denotes the end of the event CommitNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateRenderFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::CreateRenderFrame';
        // Denotes the end of the event CreateRenderFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCommitProvisionalLoad {
      interface X extends TraceEvent.Base {
        args: {
          params: {
            base_url?: string;
            contents_mime_type: string;
            did_create_new_entry: boolean;
            document_sequence_number: number;
            embedding_token: string;
            has_potentially_trustworthy_unique_origin: boolean;
            history_list_was_cleared: boolean;
            http_status_code: number;
            intended_as_new_entry: boolean;
            is_overriding_user_agent: boolean;
            item_sequence_number: number;
            method: string;
            nav_entry_id: number;
            navigation_token: string;
            origin: string;
            original_request_url: string;
            post_id: number;
            'process lock': string;
            referrer: {
              policy: number;
              url: string;
            };
            request_id: number;
            should_replace_current_entry: boolean;
            should_update_history: boolean;
            transition: number;
            url: string;
            url_is_unreachable: boolean;
          };
          rfh: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::DidCommitProvisionalLoad';
        // Denotes the end of the event DidCommitProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStopLoading {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::DidStopLoading';
        // Denotes the end of the event DidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FailedNavigation {
      interface X extends TraceEvent.Base {
        args: {
          error: number;
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::FailedNavigation';
        // Denotes the end of the event FailedNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDidAddContentSecurityPolicies {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::OnDidAddContentSecurityPolicies';
        // Denotes the end of the event OnDidAddContentSecurityPolicies.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetLifecycleState {
      interface X extends TraceEvent.Base {
        args: {
          new_state: string;
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::SetLifecycleState';
        // Denotes the end of the event SetLifecycleState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Unload {
      interface b extends TraceEvent.Base {
        args: {
          frame_tree_node: number;
        };
        id2: {
          local: string;
        };
        name: 'RenderFrameHostImpl::Unload';
        // Denotes the beginning of the nestable async flow event Unload.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'RenderFrameHostImpl::Unload';
        // Denotes a step into the nestable async flow event Unload.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace RenderFrameHostImplBeforeUnload {
    interface b extends TraceEvent.Base {
      args: {
        '&RenderFrameHostImpl': string;
        'FrameTreeNode id': number;
      };
      id2: {
        local: string;
      };
      name: 'RenderFrameHostImpl BeforeUnload';
      // Denotes the beginning of the nestable async flow event RenderFrameHostImplBeforeUnload.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RenderFrameHostImpl BeforeUnload';
      // Denotes a step into the nestable async flow event RenderFrameHostImplBeforeUnload.
      ph: 'e';
      scope: string;
    }
  }

  namespace RenderFrameHostManager {
    type CommitPending = 
      TraceEvent.RenderFrameHostManager.CommitPending.X;
  
    type UnloadOldFrame = 
      TraceEvent.RenderFrameHostManager.UnloadOldFrame.X;
  
    namespace CommitPending {
      interface X extends TraceEvent.Base {
        args: {
          'FrameTreeNode id': number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostManager::CommitPending';
        // Denotes the end of the event CommitPending.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnloadOldFrame {
      interface X extends TraceEvent.Base {
        args: {
          'FrameTreeNode id': number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostManager::UnloadOldFrame';
        // Denotes the end of the event UnloadOldFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderFrameImpl {
    type BeginNavigation = 
      TraceEvent.RenderFrameImpl.BeginNavigation.X;
  
    type CommitFailedNavigation = 
      TraceEvent.RenderFrameImpl.CommitFailedNavigation.X;
  
    type CreateChildFrame = 
      TraceEvent.RenderFrameImpl.CreateChildFrame.X;
  
    type DidCommitProvisionalLoad = 
      TraceEvent.RenderFrameImpl.DidCommitProvisionalLoad.X;
  
    type DidFinishDocumentLoad = 
      TraceEvent.RenderFrameImpl.DidFinishDocumentLoad.X;
  
    type DidFinishLoad = 
      TraceEvent.RenderFrameImpl.DidFinishLoad.X;
  
    type DidStartLoading = 
      TraceEvent.RenderFrameImpl.DidStartLoading.X;
  
    type DidStartProvisionalLoad = 
      TraceEvent.RenderFrameImpl.DidStartProvisionalLoad.X;
  
    type DidStopLoading = 
      TraceEvent.RenderFrameImpl.DidStopLoading.X;
  
    type Initialize = 
      TraceEvent.RenderFrameImpl.Initialize.X;
  
    type OnUnload = 
      TraceEvent.RenderFrameImpl.OnUnload.X;
  
    namespace BeginNavigation {
      interface X extends TraceEvent.Base {
        args: {
          navigation_type: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::BeginNavigation';
        // Denotes the end of the event BeginNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitFailedNavigation {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::CommitFailedNavigation';
        // Denotes the end of the event CommitFailedNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateChildFrame {
      interface X extends TraceEvent.Base {
        args: {
          child: number;
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::createChildFrame';
        // Denotes the end of the event CreateChildFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCommitProvisionalLoad {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didCommitProvisionalLoad';
        // Denotes the end of the event DidCommitProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishDocumentLoad {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didFinishDocumentLoad';
        // Denotes the end of the event DidFinishDocumentLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishLoad {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didFinishLoad';
        // Denotes the end of the event DidFinishLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartLoading {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didStartLoading';
        // Denotes the end of the event DidStartLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartProvisionalLoad {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didStartProvisionalLoad';
        // Denotes the end of the event DidStartProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStopLoading {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didStopLoading';
        // Denotes the end of the event DidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
          parent: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnUnload {
      interface X extends TraceEvent.Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::OnUnload';
        // Denotes the end of the event OnUnload.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderProcessHost {
    type SetProcessLock = 
      TraceEvent.RenderProcessHost.SetProcessLock.X;
  
    namespace SetProcessLock {
      interface X extends TraceEvent.Base {
        args: {
          lock: string;
          'site id': number;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHost::SetProcessLock';
        // Denotes the end of the event SetProcessLock.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderProcessHostImpl {
    type AddRoute = 
      TraceEvent.RenderProcessHostImpl.AddRoute.X;
  
    type RegisterHost = 
      TraceEvent.RenderProcessHostImpl.RegisterHost.X;
  
    type RemoveRoute = 
      TraceEvent.RenderProcessHostImpl.RemoveRoute.X;
  
    type Send = 
      TraceEvent.RenderProcessHostImpl.Send.X;
  
    namespace AddRoute {
      interface X extends TraceEvent.Base {
        args: {
          render_process_host: string;
          routing_id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::AddRoute';
        // Denotes the end of the event AddRoute.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Cleanup {
      type Haslisteners = 
        TraceEvent.RenderProcessHostImpl.Cleanup.Haslisteners.X;
    
      namespace Haslisteners {
        interface X extends TraceEvent.Base {
          args: {
            listener_count: number;
            render_process_host: string;
          };
          // Duration.
          dur: number;
          name: 'RenderProcessHostImpl::Cleanup : Has listeners.';
          // Denotes the end of the event Haslisteners.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
          render_process_host: string;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::Cleanup';
        // Denotes the end of the event Cleanup.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RegisterHost {
      interface X extends TraceEvent.Base {
        args: {
          host_id: number;
          render_process_host: string;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::RegisterHost';
        // Denotes the end of the event RegisterHost.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RemoveRoute {
      interface X extends TraceEvent.Base {
        args: {
          render_process_host: string;
          routing_id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::RemoveRoute';
        // Denotes the end of the event RemoveRoute.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Send {
      interface X extends TraceEvent.Base {
        args: {
          chrome_legacy_ipc: {
            message_class: string;
            message_line: number;
          };
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateProcessPriority {
      type SetProcessPriority = 
        TraceEvent.RenderProcessHostImpl.UpdateProcessPriority.SetProcessPriority.X;
    
      namespace SetProcessPriority {
        interface X extends TraceEvent.Base {
          args: {
            pid: number;
            priority_is_background: boolean;
          };
          // Duration.
          dur: number;
          name: 'RenderProcessHostImpl::UpdateProcessPriority.SetProcessPriority';
          // Denotes the end of the event SetProcessPriority.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
          has_pending_views: boolean;
          should_background: boolean;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::UpdateProcessPriority';
        // Denotes the end of the event UpdateProcessPriority.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface X extends TraceEvent.Base {
      args: {
        id: number;
        render_process_host: string;
      };
      // Duration.
      dur: number;
      name: 'RenderProcessHostImpl';
      // Denotes the end of the event RenderProcessHostImpl.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderSurfaceReasonCount {
    interface I extends TraceEvent.Base {
      args: {
        opacity?: number;
        root?: number;
        total?: number;
      };
      name: 'RenderSurfaceReasonCount';
      // Denotes an event RenderSurfaceReasonCount. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderText {
    type Elide = 
      TraceEvent.RenderText.Elide.X;
  
    namespace Elide {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderText::Elide';
        // Denotes the end of the event Elide.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderTextHarfBuzz {
    type ShapeRuns = 
      TraceEvent.RenderTextHarfBuzz.ShapeRuns.X;
  
    type ShapeRunWithFontInternal = 
      TraceEvent.RenderTextHarfBuzz.ShapeRunWithFontInternal.X;
  
    namespace ItemizeTextToRuns {
      type Runs = 
        TraceEvent.RenderTextHarfBuzz.ItemizeTextToRuns.Runs.I;
    
      namespace Runs {
        interface I extends TraceEvent.Base {
          args: {
            runs: string;
          };
          name: 'RenderTextHarfBuzz::ItemizeTextToRuns::Runs';
          // Denotes an event Runs. There are no begining/ending phases.
          ph: 'I';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends TraceEvent.Base {
        args: {
          text_length: number;
        };
        // Duration.
        dur: number;
        name: 'RenderTextHarfBuzz::ItemizeTextToRuns';
        // Denotes the end of the event ItemizeTextToRuns.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShapeRuns {
      interface X extends TraceEvent.Base {
        args: {
          run_count: number;
        };
        // Duration.
        dur: number;
        name: 'RenderTextHarfBuzz::ShapeRuns';
        // Denotes the end of the event ShapeRuns.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShapeRunWithFontInternal {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderTextHarfBuzz::ShapeRunWithFontInternal';
        // Denotes the end of the event ShapeRunWithFontInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderThreadImpl {
    type Create = 
      TraceEvent.RenderThreadImpl.Create.X;
  
    type EstablishGpuChannelSync = 
      TraceEvent.RenderThreadImpl.EstablishGpuChannelSync.X;
  
    type Init = 
      TraceEvent.RenderThreadImpl.Init.X;
  
    namespace Create {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderThreadImpl::Create';
        // Denotes the end of the event Create.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EstablishGpuChannelSync {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderThreadImpl::EstablishGpuChannelSync';
        // Denotes the end of the event EstablishGpuChannelSync.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Init {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderThreadImpl::Init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderViewHostImpl {
    type CreateRenderView = 
      TraceEvent.RenderViewHostImpl.CreateRenderView.X;
  
    namespace CreateRenderView {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderViewHostImpl::CreateRenderView';
        // Denotes the end of the event CreateRenderView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidget {
    type InitializeLayerTreeView = 
      TraceEvent.RenderWidget.InitializeLayerTreeView.X;
  
    namespace InitializeLayerTreeView {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::InitializeLayerTreeView';
        // Denotes the end of the event InitializeLayerTreeView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidgetHostImpl {
    type ForwardKeyboardEvent = 
      TraceEvent.RenderWidgetHostImpl.ForwardKeyboardEvent.X;
  
    type ForwardMouseEvent = 
      TraceEvent.RenderWidgetHostImpl.ForwardMouseEvent.X;
  
    type GetScreenInfo = 
      TraceEvent.RenderWidgetHostImpl.GetScreenInfo.X;
  
    type OnLocalSurfaceIdChanged = 
      TraceEvent.RenderWidgetHostImpl.OnLocalSurfaceIdChanged.X;
  
    type WasHidden = 
      TraceEvent.RenderWidgetHostImpl.WasHidden.X;
  
    type WasShown = 
      TraceEvent.RenderWidgetHostImpl.WasShown.X;
  
    namespace ForwardKeyboardEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::ForwardKeyboardEvent';
        // Denotes the end of the event ForwardKeyboardEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ForwardMouseEvent {
      interface X extends TraceEvent.Base {
        args: {
          x: number;
          y: number;
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::ForwardMouseEvent';
        // Denotes the end of the event ForwardMouseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetScreenInfo {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::GetScreenInfo';
        // Denotes the end of the event GetScreenInfo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnLocalSurfaceIdChanged {
      interface X extends TraceEvent.Base {
        args: {
          local_surface_id: string;
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::OnLocalSurfaceIdChanged';
        // Denotes the end of the event OnLocalSurfaceIdChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasHidden {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::WasHidden';
        // Denotes the end of the event WasHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasShown {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::WasShown';
        // Denotes the end of the event WasShown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidgetHostViewCocoa {
    type KeyEvent = 
      TraceEvent.RenderWidgetHostViewCocoa.KeyEvent.X;
  
    type MouseEvent = 
      TraceEvent.RenderWidgetHostViewCocoa.MouseEvent.X;
  
    type SendViewBoundsInWindowToHost = 
      TraceEvent.RenderWidgetHostViewCocoa.SendViewBoundsInWindowToHost.X;
  
    type SendWindowFrameInScreenToHost = 
      TraceEvent.RenderWidgetHostViewCocoa.SendWindowFrameInScreenToHost.X;
  
    namespace KeyEvent {
      interface X extends TraceEvent.Base {
        args: {
          WindowNum: number;
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::keyEvent';
        // Denotes the end of the event KeyEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MouseEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::mouseEvent';
        // Denotes the end of the event MouseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendViewBoundsInWindowToHost {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::sendViewBoundsInWindowToHost';
        // Denotes the end of the event SendViewBoundsInWindowToHost.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendWindowFrameInScreenToHost {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::sendWindowFrameInScreenToHost';
        // Denotes the end of the event SendWindowFrameInScreenToHost.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace REQUEST_ALIVE {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          net_error?: number;
          priority: string;
          traffic_annotation: number;
          url: string;
        };
        source_type: string;
      };
      id: string;
      name: 'REQUEST_ALIVE';
      // Denotes the beginning of the nestable async flow event REQUEST_ALIVE.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'REQUEST_ALIVE';
      // Denotes a step into the nestable async flow event REQUEST_ALIVE.
      ph: 'e';
      scope: string;
    }
  }

  namespace RequestAnimationFrame {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          id: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'RequestAnimationFrame';
      // Denotes an event RequestAnimationFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestIdleCallback {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          id: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          timeout: number;
        };
      };
      name: 'RequestIdleCallback';
      // Denotes an event RequestIdleCallback. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestMainThreadFrame {
    interface I extends TraceEvent.Base {
      args: {
        layerTreeId: number;
      };
      name: 'RequestMainThreadFrame';
      // Denotes an event RequestMainThreadFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestStart {
    interface R extends TraceEvent.Base {
      args: {
      
      };
      name: 'requestStart';
      // Denotes a mark of the event RequestStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace Resource {
    type AppendData = 
      TraceEvent.Resource.AppendData.X;
  
    namespace AppendData {
      interface X extends TraceEvent.Base {
        args: {
          length: number;
        };
        // Duration.
        dur: number;
        name: 'Resource::appendData';
        // Denotes the end of the event AppendData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceChangePriority {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          priority: string;
          requestId: string;
        };
      };
      name: 'ResourceChangePriority';
      // Denotes an event ResourceChangePriority. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        data: {
          priority: string;
          requestId: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ResourceChangePriority';
      // Denotes the end of the event ResourceChangePriority.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceDispatcher {
    type OnReceivedRedirect = 
      TraceEvent.ResourceDispatcher.OnReceivedRedirect.X;
  
    type OnReceivedResponse = 
      TraceEvent.ResourceDispatcher.OnReceivedResponse.X;
  
    type OnRequestComplete = 
      TraceEvent.ResourceDispatcher.OnRequestComplete.X;
  
    namespace OnReceivedRedirect {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceDispatcher::OnReceivedRedirect';
        // Denotes the end of the event OnReceivedRedirect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnReceivedResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceDispatcher::OnReceivedResponse';
        // Denotes the end of the event OnReceivedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRequestComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceDispatcher::OnRequestComplete';
        // Denotes the end of the event OnRequestComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceFetcher {
    type DetermineRevalidationPolicy = 
      TraceEvent.ResourceFetcher.DetermineRevalidationPolicy.I;
  
    type RequestResource = 
      TraceEvent.ResourceFetcher.RequestResource.X;
  
    namespace DetermineRevalidationPolicy {
      interface I extends TraceEvent.Base {
        args: {
          policy: string;
          reason: string;
        };
        name: 'ResourceFetcher::DetermineRevalidationPolicy';
        // Denotes an event DetermineRevalidationPolicy. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RequestResource {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'ResourceFetcher::requestResource';
        // Denotes the end of the event RequestResource.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceFinish {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          decodedBodyLength?: number;
          didFail: boolean;
          encodedDataLength?: number;
          finishTime?: number;
          networkTime?: number;
          requestId: string;
        };
      };
      name: 'ResourceFinish';
      // Denotes an event ResourceFinish. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceLoadPriorityOptimizer {
    type UpdateAllImageResourcePriorities = 
      TraceEvent.ResourceLoadPriorityOptimizer.UpdateAllImageResourcePriorities.X;
  
    namespace UpdateAllImageResourcePriorities {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceLoadPriorityOptimizer::updateAllImageResourcePriorities';
        // Denotes the end of the event UpdateAllImageResourcePriorities.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceMarkAsCached {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          requestId: string;
        };
      };
      name: 'ResourceMarkAsCached';
      // Denotes an event ResourceMarkAsCached. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourcePrefetchPredictor {
    type StartInitialization = 
      TraceEvent.ResourcePrefetchPredictor.StartInitialization.X;
  
    namespace StartInitialization {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourcePrefetchPredictor::StartInitialization';
        // Denotes the end of the event StartInitialization.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceReceivedData {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          encodedDataLength: number;
          frame: string;
          requestId: string;
        };
      };
      name: 'ResourceReceivedData';
      // Denotes an event ResourceReceivedData. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceReceiveResponse {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          encodedDataLength?: number;
          frame: string;
          fromCache?: boolean;
          fromServiceWorker?: boolean;
          mimeType: string;
          requestId: string;
          responseTime?: number;
          statusCode: number;
          timing?: {
            connectEnd: number;
            connectStart: number;
            dnsEnd: number;
            dnsStart: number;
            proxyEnd: number;
            proxyStart: number;
            pushEnd: number;
            pushStart: number;
            receiveHeadersEnd: number;
            requestTime: number;
            sendEnd: number;
            sendStart: number;
            sslEnd: number;
            sslStart: number;
            workerReady: number;
            workerStart: number;
          };
        };
      };
      name: 'ResourceReceiveResponse';
      // Denotes an event ResourceReceiveResponse. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceSendRequest {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          priority: string;
          renderBlocking?: string;
          requestId: string;
          requestMethod: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      name: 'ResourceSendRequest';
      // Denotes an event ResourceSendRequest. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace ResourceWillSendRequest {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          requestId: string;
        };
      };
      name: 'ResourceWillSendRequest';
      // Denotes an event ResourceWillSendRequest. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace ResponseBodyLoader {
    type OnStateChange = 
      TraceEvent.ResponseBodyLoader.OnStateChange.X;
  
    namespace OnStateChange {
      interface X extends TraceEvent.Base {
        args: {
          available?: number;
        };
        // Duration.
        dur: number;
        name: 'ResponseBodyLoader::OnStateChange';
        // Denotes the end of the event OnStateChange.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResponseEnd {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'responseEnd';
      // Denotes a mark of the event ResponseEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace Rootframemissing {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Root frame missing';
      // Denotes an event Rootframemissing. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RootScrollerController {
    type PerformRootScrollerSelection = 
      TraceEvent.RootScrollerController.PerformRootScrollerSelection.X;
  
    namespace PerformRootScrollerSelection {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RootScrollerController::PerformRootScrollerSelection';
        // Denotes the end of the event PerformRootScrollerSelection.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RuleSet {
    type AddRulesFromSheet = 
      TraceEvent.RuleSet.AddRulesFromSheet.X;
  
    namespace AddRulesFromSheet {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RuleSet::addRulesFromSheet';
        // Denotes the end of the event AddRulesFromSheet.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RunBestEffortPriorityTask {
    interface X extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      // Duration.
      dur: number;
      name: 'RunBestEffortPriorityTask';
      // Denotes the end of the event RunBestEffortPriorityTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunControlPriorityTask {
    interface X extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      // Duration.
      dur: number;
      name: 'RunControlPriorityTask';
      // Denotes the end of the event RunControlPriorityTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunHighestPriorityTask {
    interface X extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      // Duration.
      dur: number;
      name: 'RunHighestPriorityTask';
      // Denotes the end of the event RunHighestPriorityTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunHighPriorityTask {
    interface X extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      // Duration.
      dur: number;
      name: 'RunHighPriorityTask';
      // Denotes the end of the event RunHighPriorityTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunMicrotasks {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'RunMicrotasks';
      // Denotes the beginning of the event RunMicrotasks.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        microtask_count: number;
      };
      name: 'RunMicrotasks';
      // Denotes the ending of the event RunMicrotasks.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        microtask_count?: number;
      };
      // Duration.
      dur: number;
      name: 'RunMicrotasks';
      // Denotes the end of the event RunMicrotasks.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunningIdleTask {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RunningIdleTask';
      // Denotes the beginning of the nestable async flow event RunningIdleTask.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RunningIdleTask';
      // Denotes a step into the nestable async flow event RunningIdleTask.
      ph: 'e';
      scope: string;
    }
  }

  namespace RunNormalPriorityTask {
    interface B extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      name: 'RunNormalPriorityTask';
      // Denotes the beginning of the event RunNormalPriorityTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      // Duration.
      dur: number;
      name: 'RunNormalPriorityTask';
      // Denotes the end of the event RunNormalPriorityTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunPendingMicrotask {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'RunPendingMicrotask';
      // Denotes the end of the event RunPendingMicrotask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunRequest {
    interface n extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'RunRequest';
      // Denotes the ending of the nestable async flow event RunRequest.
      ph: 'n';
      scope: string;
    }
  }

  namespace RunTask {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'RunTask';
      // Denotes the beginning of the event RunTask.
      ph: 'B';
    }
  
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'RunTask';
      // Denotes an event RunTask. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur?: number;
      name: 'RunTask';
      // Denotes the end of the event RunTask.
      ph: 'X';
      tdur?: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunVeryHighPriorityTask {
    interface X extends TraceEvent.Base {
      args: {
        task_type: number;
      };
      // Duration.
      dur: number;
      name: 'RunVeryHighPriorityTask';
      // Denotes the end of the event RunVeryHighPriorityTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Safe_browsing {
    namespace Mojom {
      type PhishingDetector = 
        TraceEvent.Safe_browsing.Mojom.PhishingDetector.X;
    
      type SafeBrowsing = 
        TraceEvent.Safe_browsing.Mojom.SafeBrowsing.X;
    
      type SafeBrowsingUrlChecker = 
        TraceEvent.Safe_browsing.Mojom.SafeBrowsingUrlChecker.X;
    
      namespace PhishingDetector {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.PhishingDetector';
          // Denotes the end of the event PhishingDetector.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SafeBrowsing {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.SafeBrowsing';
          // Denotes the end of the event SafeBrowsing.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SafeBrowsingUrlChecker {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.SafeBrowsingUrlChecker';
          // Denotes the end of the event SafeBrowsingUrlChecker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ScheduledAction {
    type Execute = 
      TraceEvent.ScheduledAction.Execute.X;
  
    namespace Execute {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScheduledAction::execute';
        // Denotes the end of the event Execute.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScheduledTasks {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ScheduledTasks';
      // Denotes the beginning of the nestable async flow event ScheduledTasks.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ScheduledTasks';
      // Denotes a step into the nestable async flow event ScheduledTasks.
      ph: 'e';
      scope: string;
    }
  }

  namespace ScheduledTasksState {
    interface n extends TraceEvent.Base {
      args: {
        state: {
          tasks_pending: {
            activate_tile_tasks_completed: boolean;
            all_tile_tasks_completed: boolean;
            draw_tile_tasks_completed: boolean;
          };
        };
      };
      id2: {
        local: string;
      };
      name: 'ScheduledTasksState';
      // Denotes the ending of the nestable async flow event ScheduledTasksState.
      ph: 'n';
      scope: string;
    }
  }

  namespace ScheduleFrameForImageAnimation {
    interface X extends TraceEvent.Base {
      args: {
        delta: number;
      };
      // Duration.
      dur: number;
      name: 'ScheduleFrameForImageAnimation';
      // Denotes the end of the event ScheduleFrameForImageAnimation.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Scheduler {
    type BeginFrame = 
      TraceEvent.Scheduler.BeginFrame.X;
  
    type BeginFrameDropped = 
      TraceEvent.Scheduler.BeginFrameDropped.I;
  
    type BeginImplFrame = 
      TraceEvent.Scheduler.BeginImplFrame.X;
  
    type BeginMainFrameAborted = 
      TraceEvent.Scheduler.BeginMainFrameAborted.X;
  
    type BeginMainFrameNotExpectedSoon = 
      TraceEvent.Scheduler.BeginMainFrameNotExpectedSoon.X;
  
    type BeginMainFrameNotExpectedUntil = 
      TraceEvent.Scheduler.BeginMainFrameNotExpectedUntil.X;
  
    type BlockingInputExpectedSoon = 
      TraceEvent.Scheduler.BlockingInputExpectedSoon.b;
  
    type CompositorPriority = 
      TraceEvent.Scheduler.CompositorPriority.b |
      TraceEvent.Scheduler.CompositorPriority.e;
  
    type DidCreateAndInitializeLayerTreeFrameSink = 
      TraceEvent.Scheduler.DidCreateAndInitializeLayerTreeFrameSink.X;
  
    type DidLoseLayerTreeFrameSink = 
      TraceEvent.Scheduler.DidLoseLayerTreeFrameSink.X;
  
    type KeepRendererActive = 
      TraceEvent.Scheduler.KeepRendererActive.b;
  
    type MissedBeginFrameDropped = 
      TraceEvent.Scheduler.MissedBeginFrameDropped.I;
  
    type NotifyBeginMainFrameStarted = 
      TraceEvent.Scheduler.NotifyBeginMainFrameStarted.X;
  
    type NotifyReadyToCommit = 
      TraceEvent.Scheduler.NotifyReadyToCommit.X;
  
    type OnBeginImplFrameDeadline = 
      TraceEvent.Scheduler.OnBeginImplFrameDeadline.X;
  
    type Pending_submit_frames = 
      TraceEvent.Scheduler.Pending_submit_frames.b |
      TraceEvent.Scheduler.Pending_submit_frames.e;
  
    type PrioritizeCompositingAfterInput = 
      TraceEvent.Scheduler.PrioritizeCompositingAfterInput.b;
  
    type RAILMode = 
      TraceEvent.Scheduler.RAILMode.b |
      TraceEvent.Scheduler.RAILMode.e;
  
    type RunNextTask = 
      TraceEvent.Scheduler.RunNextTask.B |
      TraceEvent.Scheduler.RunNextTask.X;
  
    type Running = 
      TraceEvent.Scheduler.Running.F |
      TraceEvent.Scheduler.Running.S;
  
    type ScheduleBeginImplFrameDeadline = 
      TraceEvent.Scheduler.ScheduleBeginImplFrameDeadline.X;
  
    type Scheduler = 
      TraceEvent.Scheduler.Scheduler.X;
  
    type SetDeferBeginMainFrame = 
      TraceEvent.Scheduler.SetDeferBeginMainFrame.X;
  
    type SkipNextBeginMainFrameToReduceLatency = 
      TraceEvent.Scheduler.SkipNextBeginMainFrameToReduceLatency.I;
  
    type UseCase = 
      TraceEvent.Scheduler.UseCase.b |
      TraceEvent.Scheduler.UseCase.e;
  
    namespace BeginFrame {
      interface X extends TraceEvent.Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
        };
        // Duration.
        dur: number;
        name: 'Scheduler::BeginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginFrameDropped {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'Scheduler::BeginFrameDropped';
        // Denotes an event BeginFrameDropped. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginImplFrame {
      interface X extends TraceEvent.Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
          main_thread_missed_last_deadline: boolean;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::BeginImplFrame';
        // Denotes the end of the event BeginImplFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginMainFrameAborted {
      interface X extends TraceEvent.Base {
        args: {
          reason: string;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::BeginMainFrameAborted';
        // Denotes the end of the event BeginMainFrameAborted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginMainFrameNotExpectedSoon {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::BeginMainFrameNotExpectedSoon';
        // Denotes the end of the event BeginMainFrameNotExpectedSoon.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginMainFrameNotExpectedUntil {
      interface X extends TraceEvent.Base {
        args: {
          remaining_time: number;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::BeginMainFrameNotExpectedUntil';
        // Denotes the end of the event BeginMainFrameNotExpectedUntil.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BlockingInputExpectedSoon {
      interface b extends TraceEvent.Base {
        args: {
          state: string;
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.BlockingInputExpectedSoon';
        // Denotes the beginning of the nestable async flow event BlockingInputExpectedSoon.
        ph: 'b';
        scope: string;
      }
    }
  
    namespace CompositorPriority {
      interface b extends TraceEvent.Base {
        args: {
          state: string;
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.CompositorPriority';
        // Denotes the beginning of the nestable async flow event CompositorPriority.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.CompositorPriority';
        // Denotes a step into the nestable async flow event CompositorPriority.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace DidCreateAndInitializeLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::DidCreateAndInitializeLayerTreeFrameSink';
        // Denotes the end of the event DidCreateAndInitializeLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidLoseLayerTreeFrameSink {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::DidLoseLayerTreeFrameSink';
        // Denotes the end of the event DidLoseLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace KeepRendererActive {
      interface b extends TraceEvent.Base {
        args: {
          state: string;
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.KeepRendererActive';
        // Denotes the beginning of the nestable async flow event KeepRendererActive.
        ph: 'b';
        scope: string;
      }
    }
  
    namespace MissedBeginFrameDropped {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'Scheduler::MissedBeginFrameDropped';
        // Denotes an event MissedBeginFrameDropped. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyBeginMainFrameStarted {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::NotifyBeginMainFrameStarted';
        // Denotes the end of the event NotifyBeginMainFrameStarted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToCommit {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::NotifyReadyToCommit';
        // Denotes the end of the event NotifyReadyToCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnBeginImplFrameDeadline {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::OnBeginImplFrameDeadline';
        // Denotes the end of the event OnBeginImplFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Pending_submit_frames {
      interface b extends TraceEvent.Base {
        args: {
          pending_frames: number;
        };
        id2: {
          local: string;
        };
        name: 'Scheduler:pending_submit_frames';
        // Denotes the beginning of the nestable async flow event Pending_submit_frames.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'Scheduler:pending_submit_frames';
        // Denotes a step into the nestable async flow event Pending_submit_frames.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace PrioritizeCompositingAfterInput {
      interface b extends TraceEvent.Base {
        args: {
          state: string;
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.PrioritizeCompositingAfterInput';
        // Denotes the beginning of the nestable async flow event PrioritizeCompositingAfterInput.
        ph: 'b';
        scope: string;
      }
    }
  
    namespace RAILMode {
      interface b extends TraceEvent.Base {
        args: {
          chrome_renderer_scheduler_state: {
            rail_mode: string;
          };
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.RAILMode';
        // Denotes the beginning of the nestable async flow event RAILMode.
        ph: 'b';
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.RAILMode';
        // Denotes a step into the nestable async flow event RAILMode.
        ph: 'e';
      }
    }
  
    namespace RunNextTask {
      interface B extends TraceEvent.Base {
        args: {
          state: {
            order_num: number;
            priority: string;
            sequence_id: number;
          };
        };
        name: 'Scheduler::RunNextTask';
        // Denotes the beginning of the event RunNextTask.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          state: {
            order_num: number;
            priority: string;
            sequence_id: number;
          };
        };
        // Duration.
        dur: number;
        name: 'Scheduler::RunNextTask';
        // Denotes the end of the event RunNextTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Running {
      interface F extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'Scheduler::Running';
        // Denotes the ending of the async event Running.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'Scheduler::Running';
        // Denotes the beginning of the async event Running.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleBeginImplFrameDeadline {
      interface X extends TraceEvent.Base {
        args: {
          'deadline mode': string;
          'new deadline': number;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::ScheduleBeginImplFrameDeadline';
        // Denotes the end of the event ScheduleBeginImplFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Scheduler {
      interface X extends TraceEvent.Base {
        args: {
          settings: {
            commit_to_active_tree: boolean;
            enable_impl_latency_recovery: boolean;
            enable_main_latency_recovery: boolean;
            main_frame_before_activation_enabled: boolean;
            maximum_number_of_failed_draws_before_draw_is_forced: number;
            using_synchronous_renderer_compositor: boolean;
            wait_for_all_pipeline_stages_before_draw: boolean;
          };
        };
        // Duration.
        dur: number;
        name: 'Scheduler::Scheduler';
        // Denotes the end of the event Scheduler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Sequence {
      type RemoveWaitingPriority = 
        TraceEvent.Scheduler.Sequence.RemoveWaitingPriority.X;
    
      type UpdateSchedulingPriority = 
        TraceEvent.Scheduler.Sequence.UpdateSchedulingPriority.X;
    
      namespace RemoveWaitingPriority {
        interface X extends TraceEvent.Base {
          args: {
            new_priority: string;
            sequence_id: number;
          };
          // Duration.
          dur: number;
          name: 'Scheduler::Sequence::RemoveWaitingPriority';
          // Denotes the end of the event RemoveWaitingPriority.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace UpdateSchedulingPriority {
        interface X extends TraceEvent.Base {
          args: {
            new_priority: string;
            sequence_id: number;
          };
          // Duration.
          dur: number;
          name: 'Scheduler::Sequence::UpdateSchedulingPriority';
          // Denotes the end of the event UpdateSchedulingPriority.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace SetDeferBeginMainFrame {
      interface X extends TraceEvent.Base {
        args: {
          defer_begin_main_frame: boolean;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::SetDeferBeginMainFrame';
        // Denotes the end of the event SetDeferBeginMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SkipNextBeginMainFrameToReduceLatency {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'Scheduler: SkipNextBeginMainFrameToReduceLatency';
        // Denotes an event SkipNextBeginMainFrameToReduceLatency. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UseCase {
      interface b extends TraceEvent.Base {
        args: {
          state: string;
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.UseCase';
        // Denotes the beginning of the nestable async flow event UseCase.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'Scheduler.UseCase';
        // Denotes a step into the nestable async flow event UseCase.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace SchedulerStateMachine {
    type SetNeedsPrepareTiles = 
      TraceEvent.SchedulerStateMachine.SetNeedsPrepareTiles.X;
  
    namespace SetNeedsPrepareTiles {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SchedulerStateMachine::SetNeedsPrepareTiles';
        // Denotes the end of the event SetNeedsPrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScheduleStyleRecalculation {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'ScheduleStyleRecalculation';
      // Denotes an event ScheduleStyleRecalculation. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedAllowBaseSyncPrimitivesOutsideBlockingScope {
    interface X extends TraceEvent.Base {
      args: {
        file_name: string;
        function_name: string;
      };
      // Duration.
      dur: number;
      name: 'ScopedAllowBaseSyncPrimitivesOutsideBlockingScope';
      // Denotes the end of the event ScopedAllowBaseSyncPrimitivesOutsideBlockingScope.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedAllowBlocking {
    interface X extends TraceEvent.Base {
      args: {
        file_name: string;
        function_name: string;
      };
      // Duration.
      dur: number;
      name: 'ScopedAllowBlocking';
      // Denotes the end of the event ScopedAllowBlocking.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedAllowIO {
    interface X extends TraceEvent.Base {
      args: {
        file_name: string;
        function_name: string;
      };
      // Duration.
      dur: number;
      name: 'ScopedAllowIO';
      // Denotes the end of the event ScopedAllowIO.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedBlockingCall {
    interface X extends TraceEvent.Base {
      args: {
        source_location: {
          file_name: string;
          function_name: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ScopedBlockingCall';
      // Denotes the end of the event ScopedBlockingCall.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedBlockingCallWithBaseSyncPrimitives {
    interface X extends TraceEvent.Base {
      args: {
        source_location: {
          file_name: string;
          function_name: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ScopedBlockingCallWithBaseSyncPrimitives';
      // Denotes the end of the event ScopedBlockingCallWithBaseSyncPrimitives.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedSetIpcHash {
    interface B extends TraceEvent.Base {
      args: {
        ipc_hash: number;
        ipc_interface_name: string;
      };
      name: 'ScopedSetIpcHash';
      // Denotes the beginning of the event ScopedSetIpcHash.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        ipc_hash: number;
        ipc_interface_name: string;
      };
      // Duration.
      dur: number;
      name: 'ScopedSetIpcHash';
      // Denotes the end of the event ScopedSetIpcHash.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Screenshot {
    interface O extends TraceEvent.Base {
      args: {
        snapshot: string;
      };
      id: string;
      name: 'Screenshot';
      // Denotes a snapshot object of the event Screenshot.
      ph: 'O';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace ScriptRunner {
    type ExecuteAsyncTask = 
      TraceEvent.ScriptRunner.ExecuteAsyncTask.X;
  
    namespace ExecuteAsyncTask {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScriptRunner::ExecuteAsyncTask';
        // Denotes the end of the event ExecuteAsyncTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScrollAnchor {
    type FindAnchor = 
      TraceEvent.ScrollAnchor.FindAnchor.X;
  
    type SerializeAnchor = 
      TraceEvent.ScrollAnchor.SerializeAnchor.X;
  
    namespace FindAnchor {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollAnchor::findAnchor';
        // Denotes the end of the event FindAnchor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SerializeAnchor {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollAnchor::SerializeAnchor';
        // Denotes the end of the event SerializeAnchor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScrollDeltaThisFrame {
    interface I extends TraceEvent.Base {
      args: {
        x: number;
        y: number;
      };
      name: 'Scroll Delta This Frame';
      // Denotes an event ScrollDeltaThisFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScrollingCoordinator {
    type UpdateAfterPaint = 
      TraceEvent.ScrollingCoordinator.UpdateAfterPaint.X;
  
    type UpdateTouchEventTargetRectsIfNeeded = 
      TraceEvent.ScrollingCoordinator.UpdateTouchEventTargetRectsIfNeeded.X;
  
    namespace UpdateAfterPaint {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollingCoordinator::UpdateAfterPaint';
        // Denotes the end of the event UpdateAfterPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTouchEventTargetRectsIfNeeded {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollingCoordinator::updateTouchEventTargetRectsIfNeeded';
        // Denotes the end of the event UpdateTouchEventTargetRectsIfNeeded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScrollTree {
    type CollectScrollDeltas = 
      TraceEvent.ScrollTree.CollectScrollDeltas.X;
  
    type SetScrollOffset = 
      TraceEvent.ScrollTree.SetScrollOffset.X;
  
    namespace CollectScrollDeltas {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollTree::CollectScrollDeltas';
        // Denotes the end of the event CollectScrollDeltas.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetScrollOffset {
      interface X extends TraceEvent.Base {
        args: {
          x: number;
          y: number;
        };
        // Duration.
        dur: number;
        name: 'ScrollTree::SetScrollOffset';
        // Denotes the end of the event SetScrollOffset.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Search {
    namespace Mojom {
      type SearchBouncer = 
        TraceEvent.Search.Mojom.SearchBouncer.X;
    
      namespace SearchBouncer {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'search.mojom.SearchBouncer';
          // Denotes the end of the event SearchBouncer.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace SearchProvider {
    type OnURLLoadComplete = 
      TraceEvent.SearchProvider.OnURLLoadComplete.X;
  
    type Question_mark = 
      TraceEvent.SearchProvider.Question_mark.X;
  
    type Start = 
      TraceEvent.SearchProvider.Start.X;
  
    namespace OnURLLoadComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SearchProvider::OnURLLoadComplete';
        // Denotes the end of the event OnURLLoadComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Question_mark {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SearchProvider::question_mark';
        // Denotes the end of the event Question_mark.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SearchProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SelectionController {
    type HandleMousePressEvent = 
      TraceEvent.SelectionController.HandleMousePressEvent.X;
  
    type HandleMousePressEventSingleClick = 
      TraceEvent.SelectionController.HandleMousePressEventSingleClick.X;
  
    type HandleMouseReleaseEvent = 
      TraceEvent.SelectionController.HandleMouseReleaseEvent.X;
  
    namespace HandleMousePressEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SelectionController::handleMousePressEvent';
        // Denotes the end of the event HandleMousePressEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMousePressEventSingleClick {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SelectionController::handleMousePressEventSingleClick';
        // Denotes the end of the event HandleMousePressEventSingleClick.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseReleaseEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SelectionController::handleMouseReleaseEvent';
        // Denotes the end of the event HandleMouseReleaseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SendBeginMainFrameToCommit {
    interface b extends TraceEvent.Base {
      args: {
        send_begin_mainframe_to_commit_breakdown?: {
          accessibility_update_us: number;
          animate_us: number;
          begin_main_sent_to_started_us: number;
          composite_commit_us: number;
          compositing_inputs_us: number;
          handle_input_events_us: number;
          layout_update_us: number;
          paint_us: number;
          prepaint_us: number;
          style_update_us: number;
          update_layers_us: number;
        };
      };
      id2: {
        local: string;
      };
      name: 'SendBeginMainFrameToCommit';
      // Denotes the beginning of the nestable async flow event SendBeginMainFrameToCommit.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SendBeginMainFrameToCommit';
      // Denotes a step into the nestable async flow event SendBeginMainFrameToCommit.
      ph: 'e';
      scope?: string;
    }
  }

  namespace SequenceEnabled {
    interface F extends TraceEvent.Base {
      args: {
        sequence_id: number;
      };
      id2: {
        local: string;
      };
      name: 'SequenceEnabled';
      // Denotes the ending of the async event SequenceEnabled.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SequenceManager {
    type DoIdleWork = 
      TraceEvent.SequenceManager.DoIdleWork.X;
  
    namespace DoIdleWork {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager::DoIdleWork';
        // Denotes the end of the event DoIdleWork.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SequenceManagerImpl {
    type MaybeReclaimMemory = 
      TraceEvent.SequenceManagerImpl.MaybeReclaimMemory.X;
  
    type UnregisterTaskQueue = 
      TraceEvent.SequenceManagerImpl.UnregisterTaskQueue.X;
  
    namespace MaybeReclaimMemory {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::MaybeReclaimMemory';
        // Denotes the end of the event MaybeReclaimMemory.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnregisterTaskQueue {
      interface X extends TraceEvent.Base {
        args: {
          queue_name: string;
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::UnregisterTaskQueue';
        // Denotes the end of the event UnregisterTaskQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SequenceManagerPostTask {
    interface B extends TraceEvent.Base {
      args: {
        task_queue_name: string;
      };
      name: 'SequenceManager PostTask';
      // Denotes the beginning of the event SequenceManagerPostTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface f extends TraceEvent.Base {
      args: {
      
      };
      bp: string;
      id: number;
      name: 'SequenceManager PostTask';
      // Denotes the ending of the async flow event SequenceManagerPostTask.
      ph: 'f';
    }
  
    interface s extends TraceEvent.Base {
      args: {
      
      };
      id: number;
      name: 'SequenceManager PostTask';
      // Denotes the beginning of the async flow event SequenceManagerPostTask.
      ph: 's';
    }
  
    interface X extends TraceEvent.Base {
      args: {
        task_queue_name: string;
      };
      // Duration.
      dur: number;
      name: 'SequenceManager PostTask';
      // Denotes the end of the event SequenceManagerPostTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SequenceManagerRunTask {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'SequenceManager RunTask';
      // Denotes the beginning of the event SequenceManagerRunTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'SequenceManager RunTask';
      // Denotes the end of the event SequenceManagerRunTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SerializedScriptValueFactory {
    type Create = 
      TraceEvent.SerializedScriptValueFactory.Create.X;
  
    type Deserialize = 
      TraceEvent.SerializedScriptValueFactory.Deserialize.X;
  
    namespace Create {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SerializedScriptValueFactory::create';
        // Denotes the end of the event Create.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Deserialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SerializedScriptValueFactory::deserialize';
        // Denotes the end of the event Deserialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Service_manager {
    namespace Mojom {
      type InterfaceProvider = 
        TraceEvent.Service_manager.Mojom.InterfaceProvider.X;
    
      namespace InterfaceProvider {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.InterfaceProvider';
          // Denotes the end of the event InterfaceProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Servicesnetworkpubliccppsimple_url_loader {
    type Cc = 
      TraceEvent.Servicesnetworkpubliccppsimple_url_loader.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../services/network/public/cpp/simple_url_loader.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Servicesnetworksocket_data_pump {
    type Cc = 
      TraceEvent.Servicesnetworksocket_data_pump.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../services/network/socket_data_pump.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Servicesnetworkurl_loader {
    type Cc = 
      TraceEvent.Servicesnetworkurl_loader.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../services/network/url_loader.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerContainerHost {
    type GetRegistration = 
      TraceEvent.ServiceWorkerContainerHost.GetRegistration.F |
      TraceEvent.ServiceWorkerContainerHost.GetRegistration.S;
  
    namespace GetRegistration {
      interface F extends TraceEvent.Base {
        args: {
          'Registration ID': number;
          Status: string;
        };
        id: string;
        name: 'ServiceWorkerContainerHost::GetRegistration';
        // Denotes the ending of the async event GetRegistration.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
          'Client URL': string;
        };
        id: string;
        name: 'ServiceWorkerContainerHost::GetRegistration';
        // Denotes the beginning of the async event GetRegistration.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerControlleeRequestHandler {
    type ContinueWithRegistration = 
      TraceEvent.ServiceWorkerControlleeRequestHandler.ContinueWithRegistration.f |
      TraceEvent.ServiceWorkerControlleeRequestHandler.ContinueWithRegistration.s |
      TraceEvent.ServiceWorkerControlleeRequestHandler.ContinueWithRegistration.X;
  
    type MaybeCreateLoader = 
      TraceEvent.ServiceWorkerControlleeRequestHandler.MaybeCreateLoader.f |
      TraceEvent.ServiceWorkerControlleeRequestHandler.MaybeCreateLoader.s |
      TraceEvent.ServiceWorkerControlleeRequestHandler.MaybeCreateLoader.X;
  
    type ServiceWorkerControlleeRequestHandler = 
      TraceEvent.ServiceWorkerControlleeRequestHandler.ServiceWorkerControlleeRequestHandler.f |
      TraceEvent.ServiceWorkerControlleeRequestHandler.ServiceWorkerControlleeRequestHandler.s |
      TraceEvent.ServiceWorkerControlleeRequestHandler.ServiceWorkerControlleeRequestHandler.X;
  
    namespace ContinueWithRegistration {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerControlleeRequestHandler::ContinueWithRegistration';
        // Denotes the ending of the async flow event ContinueWithRegistration.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerControlleeRequestHandler::ContinueWithRegistration';
        // Denotes the beginning of the async flow event ContinueWithRegistration.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
          Status: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerControlleeRequestHandler::ContinueWithRegistration';
        // Denotes the end of the event ContinueWithRegistration.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MaybeCreateLoader {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerControlleeRequestHandler::MaybeCreateLoader';
        // Denotes the ending of the async flow event MaybeCreateLoader.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerControlleeRequestHandler::MaybeCreateLoader';
        // Denotes the beginning of the async flow event MaybeCreateLoader.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
          URL: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerControlleeRequestHandler::MaybeCreateLoader';
        // Denotes the end of the event MaybeCreateLoader.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ServiceWorkerControlleeRequestHandler {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerControlleeRequestHandler::ServiceWorkerControlleeRequestHandler';
        // Denotes the ending of the async flow event ServiceWorkerControlleeRequestHandler.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerControlleeRequestHandler::ServiceWorkerControlleeRequestHandler';
        // Denotes the beginning of the async flow event ServiceWorkerControlleeRequestHandler.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerControlleeRequestHandler::ServiceWorkerControlleeRequestHandler';
        // Denotes the end of the event ServiceWorkerControlleeRequestHandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerGlobalScope {
    type DidHandleExtendableMessageEvent = 
      TraceEvent.ServiceWorkerGlobalScope.DidHandleExtendableMessageEvent.X;
  
    type DidHandleFetchEvent = 
      TraceEvent.ServiceWorkerGlobalScope.DidHandleFetchEvent.X;
  
    type DispatchExtendableMessageEvent = 
      TraceEvent.ServiceWorkerGlobalScope.DispatchExtendableMessageEvent.f |
      TraceEvent.ServiceWorkerGlobalScope.DispatchExtendableMessageEvent.s |
      TraceEvent.ServiceWorkerGlobalScope.DispatchExtendableMessageEvent.X;
  
    type DispatchFetchEventForSubresource = 
      TraceEvent.ServiceWorkerGlobalScope.DispatchFetchEventForSubresource.X;
  
    type DispatchFetchEventInternal = 
      TraceEvent.ServiceWorkerGlobalScope.DispatchFetchEventInternal.f |
      TraceEvent.ServiceWorkerGlobalScope.DispatchFetchEventInternal.s |
      TraceEvent.ServiceWorkerGlobalScope.DispatchFetchEventInternal.X;
  
    type RespondToFetchEventWithNoResponse = 
      TraceEvent.ServiceWorkerGlobalScope.RespondToFetchEventWithNoResponse.f |
      TraceEvent.ServiceWorkerGlobalScope.RespondToFetchEventWithNoResponse.s |
      TraceEvent.ServiceWorkerGlobalScope.RespondToFetchEventWithNoResponse.X;
  
    namespace DidHandleExtendableMessageEvent {
      interface X extends TraceEvent.Base {
        args: {
          status: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerGlobalScope::DidHandleExtendableMessageEvent';
        // Denotes the end of the event DidHandleExtendableMessageEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidHandleFetchEvent {
      interface X extends TraceEvent.Base {
        args: {
          status: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerGlobalScope::DidHandleFetchEvent';
        // Denotes the end of the event DidHandleFetchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchExtendableMessageEvent {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerGlobalScope::DispatchExtendableMessageEvent';
        // Denotes the ending of the async flow event DispatchExtendableMessageEvent.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerGlobalScope::DispatchExtendableMessageEvent';
        // Denotes the beginning of the async flow event DispatchExtendableMessageEvent.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerGlobalScope::DispatchExtendableMessageEvent';
        // Denotes the end of the event DispatchExtendableMessageEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchFetchEventForSubresource {
      interface X extends TraceEvent.Base {
        args: {
          queued: string;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerGlobalScope::DispatchFetchEventForSubresource';
        // Denotes the end of the event DispatchFetchEventForSubresource.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchFetchEventInternal {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerGlobalScope::DispatchFetchEventInternal';
        // Denotes the ending of the async flow event DispatchFetchEventInternal.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerGlobalScope::DispatchFetchEventInternal';
        // Denotes the beginning of the async flow event DispatchFetchEventInternal.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerGlobalScope::DispatchFetchEventInternal';
        // Denotes the end of the event DispatchFetchEventInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RespondToFetchEventWithNoResponse {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerGlobalScope::RespondToFetchEventWithNoResponse';
        // Denotes the ending of the async flow event RespondToFetchEventWithNoResponse.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerGlobalScope::RespondToFetchEventWithNoResponse';
        // Denotes the beginning of the async flow event RespondToFetchEventWithNoResponse.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerGlobalScope::RespondToFetchEventWithNoResponse';
        // Denotes the end of the event RespondToFetchEventWithNoResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerRegistry {
    type FindRegistrationForClientUrl = 
      TraceEvent.ServiceWorkerRegistry.FindRegistrationForClientUrl.F |
      TraceEvent.ServiceWorkerRegistry.FindRegistrationForClientUrl.S;
  
    namespace FindRegistrationForClientUrl {
      interface F extends TraceEvent.Base {
        args: {
          Status: string;
        };
        id: string;
        name: 'ServiceWorkerRegistry::FindRegistrationForClientUrl';
        // Denotes the ending of the async event FindRegistrationForClientUrl.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
          URL: string;
        };
        id: string;
        name: 'ServiceWorkerRegistry::FindRegistrationForClientUrl';
        // Denotes the beginning of the async event FindRegistrationForClientUrl.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerSubresourceLoader {
    type DispatchFetchEvent = 
      TraceEvent.ServiceWorkerSubresourceLoader.DispatchFetchEvent.X;
  
    type OnFallback = 
      TraceEvent.ServiceWorkerSubresourceLoader.OnFallback.X;
  
    type StartRequest = 
      TraceEvent.ServiceWorkerSubresourceLoader.StartRequest.f |
      TraceEvent.ServiceWorkerSubresourceLoader.StartRequest.s |
      TraceEvent.ServiceWorkerSubresourceLoader.StartRequest.X;
  
    namespace DispatchFetchEvent {
      interface X extends TraceEvent.Base {
        args: {
          controller: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerSubresourceLoader::DispatchFetchEvent';
        // Denotes the end of the event DispatchFetchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnFallback {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerSubresourceLoader::OnFallback';
        // Denotes the end of the event OnFallback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StartRequest {
      interface f extends TraceEvent.Base {
        args: {
        
        };
        bp: string;
        id: number;
        name: 'ServiceWorkerSubresourceLoader::StartRequest';
        // Denotes the ending of the async flow event StartRequest.
        ph: 'f';
      }
    
      interface s extends TraceEvent.Base {
        args: {
        
        };
        id: number;
        name: 'ServiceWorkerSubresourceLoader::StartRequest';
        // Denotes the beginning of the async flow event StartRequest.
        ph: 's';
      }
    
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerSubresourceLoader::StartRequest';
        // Denotes the end of the event StartRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerVersion {
    type Request = 
      TraceEvent.ServiceWorkerVersion.Request.F |
      TraceEvent.ServiceWorkerVersion.Request.S;
  
    namespace Request {
      interface F extends TraceEvent.Base {
        args: {
          Handled: boolean;
        };
        id2: {
          local: string;
        };
        name: 'ServiceWorkerVersion::Request';
        // Denotes the ending of the async event Request.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
          'Event type': string;
          'Request id': number;
        };
        id2: {
          local: string;
        };
        name: 'ServiceWorkerVersion::Request';
        // Denotes the beginning of the async event Request.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SetLayerTreeId {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame?: string;
          layerTreeId: number;
          sessionId?: string;
        };
      };
      name: 'SetLayerTreeId';
      // Denotes an event SetLayerTreeId. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SharedImageStub {
    type CreateSharedImage = 
      TraceEvent.SharedImageStub.CreateSharedImage.X;
  
    type OnCreateGMBSharedImage = 
      TraceEvent.SharedImageStub.OnCreateGMBSharedImage.X;
  
    type OnCreateSharedImage = 
      TraceEvent.SharedImageStub.OnCreateSharedImage.X;
  
    type OnCreateSharedImageWithData = 
      TraceEvent.SharedImageStub.OnCreateSharedImageWithData.X;
  
    type OnDestroySharedImage = 
      TraceEvent.SharedImageStub.OnDestroySharedImage.X;
  
    type OnRegisterSharedImageUploadBuffer = 
      TraceEvent.SharedImageStub.OnRegisterSharedImageUploadBuffer.X;
  
    namespace CreateSharedImage {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::CreateSharedImage';
        // Denotes the end of the event CreateSharedImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCreateGMBSharedImage {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnCreateGMBSharedImage';
        // Denotes the end of the event OnCreateGMBSharedImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCreateSharedImage {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnCreateSharedImage';
        // Denotes the end of the event OnCreateSharedImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCreateSharedImageWithData {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnCreateSharedImageWithData';
        // Denotes the end of the event OnCreateSharedImageWithData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDestroySharedImage {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnDestroySharedImage';
        // Denotes the end of the event OnDestroySharedImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRegisterSharedImageUploadBuffer {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnRegisterSharedImageUploadBuffer';
        // Denotes the end of the event OnRegisterSharedImageUploadBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ShCompile {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ShCompile';
      // Denotes the end of the event ShCompile.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ShortcutsProvider {
    type Start = 
      TraceEvent.ShortcutsProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ShortcutsProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ShortIdlePeriod {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ShortIdlePeriod';
      // Denotes the beginning of the nestable async flow event ShortIdlePeriod.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ShortIdlePeriod';
      // Denotes a step into the nestable async flow event ShortIdlePeriod.
      ph: 'e';
      scope: string;
    }
  }

  namespace ShouldNotSendBeginFrame {
    interface X extends TraceEvent.Base {
      args: {
        reason: number;
      };
      // Duration.
      dur: number;
      name: 'ShouldNotSendBeginFrame';
      // Denotes the end of the event ShouldNotSendBeginFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          scts: {
            extensions: string;
            hash_algorithm: string;
            log_id: string;
            origin: string;
            signature_algorithm: string;
            signature_data: string;
            timestamp: string;
            verification_status: string;
            version: number;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED';
      // Denotes the ending of the nestable async flow event SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          embedded_scts: string;
          scts_from_ocsp_response: string;
          scts_from_tls_extension: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED';
      // Denotes the ending of the nestable async flow event SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CLOSE_BEGIN {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CLOSE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CLOSE_BEGIN.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CLOSE_CALL {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CLOSE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CLOSE_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CLOSE_END {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CLOSE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CLOSE_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_BEGIN {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_BEGIN.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_CALL {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_END {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_DOOM_BEGIN {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_DOOM_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_DOOM_BEGIN.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_DOOM_CALL {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_DOOM_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_DOOM_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_DOOM_END {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_DOOM_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_DOOM_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_CALL {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_END {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_BEGIN {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_BEGIN.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_CALL {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_END {
    interface n extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_OR_CREATE_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_READ_BEGIN {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_READ_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_READ_BEGIN.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_READ_CALL {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_READ_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_READ_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_READ_END {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          bytes_copied: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_READ_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_READ_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_SET_KEY {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          key: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_SET_KEY';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_SET_KEY.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_BEGIN {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
          truncate: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_BEGIN.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_CALL {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
          truncate: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_CALL.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_END {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          bytes_copied: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_END.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          bytes_copied: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC.
      ph: 'n';
      scope: string;
    }
  }

  namespace SIMPLE_CACHE_ENTRY {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          entry_hash: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY';
      // Denotes the beginning of the nestable async flow event SIMPLE_CACHE_ENTRY.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY';
      // Denotes a step into the nestable async flow event SIMPLE_CACHE_ENTRY.
      ph: 'e';
      scope: string;
    }
  }

  namespace SingleThreadIdleTaskRunner {
    type RunTask = 
      TraceEvent.SingleThreadIdleTaskRunner.RunTask.X;
  
    namespace RunTask {
      interface X extends TraceEvent.Base {
        args: {
          allotted_time_ms: number;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadIdleTaskRunner::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SingleThreadProxy {
    type DidReceiveCompositorFrameAckOnImplThread = 
      TraceEvent.SingleThreadProxy.DidReceiveCompositorFrameAckOnImplThread.X;
  
    type DoCommit = 
      TraceEvent.SingleThreadProxy.DoCommit.X;
  
    type DoComposite = 
      TraceEvent.SingleThreadProxy.DoComposite.X;
  
    type NotifyReadyToActivate = 
      TraceEvent.SingleThreadProxy.NotifyReadyToActivate.X;
  
    type NotifyReadyToDraw = 
      TraceEvent.SingleThreadProxy.NotifyReadyToDraw.X;
  
    type OnCanDrawStateChanged = 
      TraceEvent.SingleThreadProxy.OnCanDrawStateChanged.X;
  
    type ScheduledActionPrepareTiles = 
      TraceEvent.SingleThreadProxy.ScheduledActionPrepareTiles.X;
  
    type ScheduledActionSendBeginMainFrame = 
      TraceEvent.SingleThreadProxy.ScheduledActionSendBeginMainFrame.X;
  
    type SetDeferMainFrameUpdate = 
      TraceEvent.SingleThreadProxy.SetDeferMainFrameUpdate.b |
      TraceEvent.SingleThreadProxy.SetDeferMainFrameUpdate.e;
  
    type SetNeedsAnimate = 
      TraceEvent.SingleThreadProxy.SetNeedsAnimate.X;
  
    type SetNeedsOneBeginImplFrameOnImplThread = 
      TraceEvent.SingleThreadProxy.SetNeedsOneBeginImplFrameOnImplThread.X;
  
    type SetNeedsPrepareTilesOnImplThread = 
      TraceEvent.SingleThreadProxy.SetNeedsPrepareTilesOnImplThread.X;
  
    type SetNeedsUpdateLayers = 
      TraceEvent.SingleThreadProxy.SetNeedsUpdateLayers.X;
  
    type SetVisible = 
      TraceEvent.SingleThreadProxy.SetVisible.X;
  
    type SingleThreadProxy = 
      TraceEvent.SingleThreadProxy.SingleThreadProxy.X;
  
    namespace DidReceiveCompositorFrameAckOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::DidReceiveCompositorFrameAckOnImplThread';
        // Denotes the end of the event DidReceiveCompositorFrameAckOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCommit {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::DoCommit';
        // Denotes the end of the event DoCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoComposite {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::DoComposite';
        // Denotes the end of the event DoComposite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToActivate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::NotifyReadyToActivate';
        // Denotes the end of the event NotifyReadyToActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToDraw {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::NotifyReadyToDraw';
        // Denotes the end of the event NotifyReadyToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCanDrawStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          can_draw: boolean;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::OnCanDrawStateChanged';
        // Denotes the end of the event OnCanDrawStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionPrepareTiles {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::ScheduledActionPrepareTiles';
        // Denotes the end of the event ScheduledActionPrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionSendBeginMainFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::ScheduledActionSendBeginMainFrame';
        // Denotes the end of the event ScheduledActionSendBeginMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetDeferMainFrameUpdate {
      interface b extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'SingleThreadProxy::SetDeferMainFrameUpdate';
        // Denotes the beginning of the nestable async flow event SetDeferMainFrameUpdate.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'SingleThreadProxy::SetDeferMainFrameUpdate';
        // Denotes a step into the nestable async flow event SetDeferMainFrameUpdate.
        ph: 'e';
        scope: string;
      }
    }
  
    namespace SetNeedsAnimate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsAnimate';
        // Denotes the end of the event SetNeedsAnimate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsOneBeginImplFrameOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsOneBeginImplFrameOnImplThread';
        // Denotes the end of the event SetNeedsOneBeginImplFrameOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsPrepareTilesOnImplThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsPrepareTilesOnImplThread';
        // Denotes the end of the event SetNeedsPrepareTilesOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsUpdateLayers {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsUpdateLayers';
        // Denotes the end of the event SetNeedsUpdateLayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface X extends TraceEvent.Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetVisible';
        // Denotes the end of the event SetVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SingleThreadProxy {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SingleThreadProxy';
        // Denotes the end of the event SingleThreadProxy.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SingleThreadTaskGraphRunner {
    type CollectCompletedTasks = 
      TraceEvent.SingleThreadTaskGraphRunner.CollectCompletedTasks.X;
  
    type RunTaskWithLockAcquired = 
      TraceEvent.SingleThreadTaskGraphRunner.RunTaskWithLockAcquired.B |
      TraceEvent.SingleThreadTaskGraphRunner.RunTaskWithLockAcquired.X;
  
    type ScheduleTasks = 
      TraceEvent.SingleThreadTaskGraphRunner.ScheduleTasks.X;
  
    namespace CollectCompletedTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::CollectCompletedTasks';
        // Denotes the end of the event CollectCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunTaskWithLockAcquired {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'SingleThreadTaskGraphRunner::RunTaskWithLockAcquired';
        // Denotes the beginning of the event RunTaskWithLockAcquired.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::RunTaskWithLockAcquired';
        // Denotes the end of the event RunTaskWithLockAcquired.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends TraceEvent.Base {
        args: {
          num_edges: number;
          num_nodes: number;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SiteInstanceImpl {
    type SetProcessInternal = 
      TraceEvent.SiteInstanceImpl.SetProcessInternal.X;
  
    type SetSite = 
      TraceEvent.SiteInstanceImpl.SetSite.X;
  
    namespace SetProcessInternal {
      interface X extends TraceEvent.Base {
        args: {
          'process id': number;
          'site id': number;
        };
        // Duration.
        dur: number;
        name: 'SiteInstanceImpl::SetProcessInternal';
        // Denotes the end of the event SetProcessInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSite {
      interface X extends TraceEvent.Base {
        args: {
          'site id': number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'SiteInstanceImpl::SetSite';
        // Denotes the end of the event SetSite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Sizemismatch {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Size mismatch.';
      // Denotes an event Sizemismatch. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SmoothnessDroppedFrame {
    interface X extends TraceEvent.Base {
      args: {
        smoothness: number;
        total: number;
      };
      // Duration.
      dur: number;
      name: 'SmoothnessDroppedFrame';
      // Denotes the end of the event SmoothnessDroppedFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_ALIVE {
    interface b extends TraceEvent.Base {
      args: {
        params?: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_ALIVE';
      // Denotes the beginning of the nestable async flow event SOCKET_ALIVE.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'SOCKET_ALIVE';
      // Denotes a step into the nestable async flow event SOCKET_ALIVE.
      ph: 'e';
      scope: string;
    }
  }

  namespace SOCKET_BYTES_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_BYTES_RECEIVED';
      // Denotes the ending of the nestable async flow event SOCKET_BYTES_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace SOCKET_BYTES_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_BYTES_SENT';
      // Denotes the ending of the nestable async flow event SOCKET_BYTES_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace SOCKET_IN_USE {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_IN_USE';
      // Denotes the beginning of the nestable async flow event SOCKET_IN_USE.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'SOCKET_IN_USE';
      // Denotes a step into the nestable async flow event SOCKET_IN_USE.
      ph: 'e';
      scope: string;
    }
  }

  namespace SOCKET_POOL_BOUND_TO_CONNECT_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_BOUND_TO_CONNECT_JOB';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_BOUND_TO_CONNECT_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace SOCKET_POOL_BOUND_TO_SOCKET {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_BOUND_TO_SOCKET';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_BOUND_TO_SOCKET.
      ph: 'n';
      scope: string;
    }
  }

  namespace SOCKET_POOL_CLOSING_SOCKET {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          reason: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_CLOSING_SOCKET';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_CLOSING_SOCKET.
      ph: 'n';
      scope: string;
    }
  }

  namespace SOCKET_POOL_CONNECT_JOB_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          backup_job: boolean;
          group_id: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_CONNECT_JOB_CREATED';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_CONNECT_JOB_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace SOCKET_POOL {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL';
      // Denotes the beginning of the nestable async flow event SOCKET_POOL.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'SOCKET_POOL';
      // Denotes a step into the nestable async flow event SOCKET_POOL.
      ph: 'e';
      scope: string;
    }
  }

  namespace SpeedIndex {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'Speed Index';
      // Denotes the beginning of the nestable async flow event SpeedIndex.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'Speed Index';
      // Denotes a step into the nestable async flow event SpeedIndex.
      ph: 'e';
    }
  }

  namespace Spellcheck {
    namespace Mojom {
      type SpellChecker = 
        TraceEvent.Spellcheck.Mojom.SpellChecker.X;
    
      namespace SpellChecker {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'spellcheck.mojom.SpellChecker';
          // Denotes the end of the event SpellChecker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace SSL_CONNECT_JOB_CONNECT {
    interface b extends TraceEvent.Base {
      args: {
        params?: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_CONNECT_JOB_CONNECT';
      // Denotes the beginning of the nestable async flow event SSL_CONNECT_JOB_CONNECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'SSL_CONNECT_JOB_CONNECT';
      // Denotes a step into the nestable async flow event SSL_CONNECT_JOB_CONNECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace SSL_CONNECT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          cipher_suite: number;
          is_resumed: boolean;
          key_exchange_group: number;
          next_proto: string;
          peer_signature_algorithm: number;
          version: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_CONNECT';
      // Denotes the beginning of the nestable async flow event SSL_CONNECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'SSL_CONNECT';
      // Denotes a step into the nestable async flow event SSL_CONNECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace SSL_HANDSHAKE_MESSAGE_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          bytes: string;
          type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_HANDSHAKE_MESSAGE_RECEIVED';
      // Denotes the ending of the nestable async flow event SSL_HANDSHAKE_MESSAGE_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace SSL_HANDSHAKE_MESSAGE_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          bytes: string;
          type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_HANDSHAKE_MESSAGE_SENT';
      // Denotes the ending of the nestable async flow event SSL_HANDSHAKE_MESSAGE_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace SSL_SOCKET_BYTES_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_SOCKET_BYTES_RECEIVED';
      // Denotes the ending of the nestable async flow event SSL_SOCKET_BYTES_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace SSL_SOCKET_BYTES_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_SOCKET_BYTES_SENT';
      // Denotes the ending of the nestable async flow event SSL_SOCKET_BYTES_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace StartDrawToSwapStart {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'StartDrawToSwapStart';
      // Denotes the beginning of the nestable async flow event StartDrawToSwapStart.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'StartDrawToSwapStart';
      // Denotes a step into the nestable async flow event StartDrawToSwapStart.
      ph: 'e';
      scope?: string;
    }
  }

  namespace StartMintToken {
    interface n extends TraceEvent.Base {
      args: {
        type: number;
      };
      id2: {
        local: string;
      };
      name: 'StartMintToken';
      // Denotes the ending of the nestable async flow event StartMintToken.
      ph: 'n';
      scope: string;
    }
  }

  namespace StickyAdDetector {
    type MaybeFireDetection = 
      TraceEvent.StickyAdDetector.MaybeFireDetection.X;
  
    namespace MaybeFireDetection {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StickyAdDetector::MaybeFireDetection';
        // Denotes the end of the event MaybeFireDetection.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StopSendEvent {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'StopSendEvent';
      // Denotes an event StopSendEvent. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Storage {
    namespace Mojom {
      type Directory = 
        TraceEvent.Storage.Mojom.Directory.X;
    
      type LocalStorageControl = 
        TraceEvent.Storage.Mojom.LocalStorageControl.X;
    
      type ServiceWorkerLiveVersionRef = 
        TraceEvent.Storage.Mojom.ServiceWorkerLiveVersionRef.X;
    
      type ServiceWorkerStorageControl = 
        TraceEvent.Storage.Mojom.ServiceWorkerStorageControl.X;
    
      type SessionStorageControl = 
        TraceEvent.Storage.Mojom.SessionStorageControl.X;
    
      namespace Directory {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'storage.mojom.Directory';
          // Denotes the end of the event Directory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace LocalStorageControl {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'storage.mojom.LocalStorageControl';
          // Denotes the end of the event LocalStorageControl.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorkerLiveVersionRef {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'storage.mojom.ServiceWorkerLiveVersionRef';
          // Denotes the end of the event ServiceWorkerLiveVersionRef.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceWorkerStorageControl {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'storage.mojom.ServiceWorkerStorageControl';
          // Denotes the end of the event ServiceWorkerStorageControl.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SessionStorageControl {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'storage.mojom.SessionStorageControl';
          // Denotes the end of the event SessionStorageControl.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace StorageArea {
    type RecordModificationInMetrics = 
      TraceEvent.StorageArea.RecordModificationInMetrics.X;
  
    namespace RecordModificationInMetrics {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StorageArea::RecordModificationInMetrics';
        // Denotes the end of the event RecordModificationInMetrics.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Storagebrowserblobblob_builder_from_stream {
    type Cc = 
      TraceEvent.Storagebrowserblobblob_builder_from_stream.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../storage/browser/blob/blob_builder_from_stream.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StyleElement {
    type ProcessStyleSheet = 
      TraceEvent.StyleElement.ProcessStyleSheet.X;
  
    namespace ProcessStyleSheet {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleElement::processStyleSheet';
        // Denotes the end of the event ProcessStyleSheet.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StyleEngine {
    type ClearResolver = 
      TraceEvent.StyleEngine.ClearResolver.X;
  
    type InvalidateStyleAndLayoutForFontUpdates = 
      TraceEvent.StyleEngine.InvalidateStyleAndLayoutForFontUpdates.X;
  
    type ScheduleInvalidationsForRuleSets = 
      TraceEvent.StyleEngine.ScheduleInvalidationsForRuleSets.X;
  
    type UpdateActiveStyleSheets = 
      TraceEvent.StyleEngine.UpdateActiveStyleSheets.X;
  
    namespace ClearResolver {
      interface X extends TraceEvent.Base {
        args: {
          frame: string;
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::clearResolver';
        // Denotes the end of the event ClearResolver.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvalidateStyleAndLayoutForFontUpdates {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::InvalidateStyleAndLayoutForFontUpdates';
        // Denotes the end of the event InvalidateStyleAndLayoutForFontUpdates.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleInvalidationsForRuleSets {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::scheduleInvalidationsForRuleSets';
        // Denotes the end of the event ScheduleInvalidationsForRuleSets.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateActiveStyleSheets {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::updateActiveStyleSheets';
        // Denotes the end of the event UpdateActiveStyleSheets.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SubmitCompositorFrameToPresentationCompositorFrame {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SubmitCompositorFrameToPresentationCompositorFrame';
      // Denotes the beginning of the nestable async flow event SubmitCompositorFrameToPresentationCompositorFrame.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SubmitCompositorFrameToPresentationCompositorFrame';
      // Denotes a step into the nestable async flow event SubmitCompositorFrameToPresentationCompositorFrame.
      ph: 'e';
      scope?: string;
    }
  }

  namespace SubmitToReceiveCompositorFrame {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SubmitToReceiveCompositorFrame';
      // Denotes the beginning of the nestable async flow event SubmitToReceiveCompositorFrame.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SubmitToReceiveCompositorFrame';
      // Denotes a step into the nestable async flow event SubmitToReceiveCompositorFrame.
      ph: 'e';
      scope?: string;
    }
  }

  namespace Subresource_filter {
    namespace Mojom {
      type SubresourceFilterAgent = 
        TraceEvent.Subresource_filter.Mojom.SubresourceFilterAgent.X;
    
      type SubresourceFilterHost = 
        TraceEvent.Subresource_filter.Mojom.SubresourceFilterHost.X;
    
      namespace SubresourceFilterAgent {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'subresource_filter.mojom.SubresourceFilterAgent';
          // Denotes the end of the event SubresourceFilterAgent.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SubresourceFilterHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'subresource_filter.mojom.SubresourceFilterHost';
          // Denotes the end of the event SubresourceFilterHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace SubresourceFilterMsg_SetRulesetForProcess {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'SubresourceFilterMsg_SetRulesetForProcess';
      // Denotes the end of the event SubresourceFilterMsg_SetRulesetForProcess.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Subthread_default_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'subthread_default_tq';
      // Denotes the end of the event Subthread_default_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Surface {
    type ActivateFrame = 
      TraceEvent.Surface.ActivateFrame.X;
  
    namespace ActivateFrame {
      interface X extends TraceEvent.Base {
        args: {
          FrameSinkId: string;
        };
        // Duration.
        dur: number;
        name: 'Surface::ActivateFrame';
        // Denotes the end of the event ActivateFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SurfaceLayer {
    type PushPropertiesTo = 
      TraceEvent.SurfaceLayer.PushPropertiesTo.X;
  
    namespace PushPropertiesTo {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SurfaceLayer::PushPropertiesTo';
        // Denotes the end of the event PushPropertiesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SurfaceManager {
    type GarbageCollectSurfaces = 
      TraceEvent.SurfaceManager.GarbageCollectSurfaces.X;
  
    namespace GarbageCollectSurfaces {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SurfaceManager::GarbageCollectSurfaces';
        // Denotes the end of the event GarbageCollectSurfaces.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Swap {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Swap';
      // Denotes the beginning of the nestable async flow event Swap.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Swap';
      // Denotes a step into the nestable async flow event Swap.
      ph: 'e';
    }
  
    interface n extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'Swap';
      // Denotes the ending of the nestable async flow event Swap.
      ph: 'n';
      scope?: string;
    }
  }

  namespace SwapBuffers {
    interface I extends TraceEvent.Base {
      args: {
        GLImpl: number;
        width: number;
      };
      name: 'SwapBuffers';
      // Denotes an event SwapBuffers. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SwapEndToPresentationCompositorFrame {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SwapEndToPresentationCompositorFrame';
      // Denotes the beginning of the nestable async flow event SwapEndToPresentationCompositorFrame.
      ph: 'b';
      scope?: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'SwapEndToPresentationCompositorFrame';
      // Denotes a step into the nestable async flow event SwapEndToPresentationCompositorFrame.
      ph: 'e';
      scope?: string;
    }
  }

  namespace Swapskipped {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Swap skipped.';
      // Denotes an event Swapskipped. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Swapthrottled {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Swap throttled';
      // Denotes an event Swapthrottled. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SyncChannel {
    type Send = 
      TraceEvent.SyncChannel.Send.X;
  
    namespace Send {
      interface X extends TraceEvent.Base {
        args: {
          chrome_legacy_ipc: {
            message_class: string;
            message_line: number;
          };
        };
        // Duration.
        dur: number;
        name: 'SyncChannel::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SyncParent {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'SyncParent';
      // Denotes the end of the event SyncParent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TabIcon {
    type MaybePaintFavicon = 
      TraceEvent.TabIcon.MaybePaintFavicon.X;
  
    type PaintLoadingAnimation = 
      TraceEvent.TabIcon.PaintLoadingAnimation.X;
  
    namespace MaybePaintFavicon {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TabIcon::MaybePaintFavicon';
        // Denotes the end of the event MaybePaintFavicon.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PaintLoadingAnimation {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TabIcon::PaintLoadingAnimation';
        // Denotes the end of the event PaintLoadingAnimation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TabManager {
    type LoadNextBackgroundTabIfNeeded = 
      TraceEvent.TabManager.LoadNextBackgroundTabIfNeeded.I;
  
    namespace LoadNextBackgroundTabIfNeeded {
      interface I extends TraceEvent.Base {
        args: {
          data: {
            background_tab_loading_mode: number;
            num_of_loading_contents: number;
            num_of_pending_navigations: number;
          };
          is_force_load_timer_running: boolean;
        };
        name: 'TabManager::LoadNextBackgroundTabIfNeeded';
        // Denotes an event LoadNextBackgroundTabIfNeeded. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TabStripModel {
    type ActivateTabAt = 
      TraceEvent.TabStripModel.ActivateTabAt.X;
  
    namespace ActivateTabAt {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TabStripModel::ActivateTabAt';
        // Denotes the end of the event ActivateTabAt.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TabSwitching {
    type Latency = 
      TraceEvent.TabSwitching.Latency.b |
      TraceEvent.TabSwitching.Latency.e;
  
    namespace Latency {
      interface b extends TraceEvent.Base {
        args: {
          latency: number;
          result: number;
        };
        id2: {
          local: string;
        };
        name: 'TabSwitching::Latency';
        // Denotes the beginning of the nestable async flow event Latency.
        ph: 'b';
        scope: string;
      }
    
      interface e extends TraceEvent.Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'TabSwitching::Latency';
        // Denotes a step into the nestable async flow event Latency.
        ph: 'e';
        scope: string;
      }
    }
  }

  namespace TabSwitchVisibilityRequest {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'TabSwitchVisibilityRequest';
      // Denotes the beginning of the nestable async flow event TabSwitchVisibilityRequest.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'TabSwitchVisibilityRequest';
      // Denotes a step into the nestable async flow event TabSwitchVisibilityRequest.
      ph: 'e';
      scope: string;
    }
  }

  namespace TaskGraphRunner {
    type RunTask = 
      TraceEvent.TaskGraphRunner.RunTask.B |
      TraceEvent.TaskGraphRunner.RunTask.X;
  
    namespace RunTask {
      interface B extends TraceEvent.Base {
        args: {
          source_frame_number_: number;
        };
        name: 'TaskGraphRunner::RunTask';
        // Denotes the beginning of the event RunTask.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          source_frame_number_: number;
        };
        // Duration.
        dur: number;
        name: 'TaskGraphRunner::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskQueueImpl {
    type UnregisterTaskQueue = 
      TraceEvent.TaskQueueImpl.UnregisterTaskQueue.X;
  
    namespace UnregisterTaskQueue {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskQueueImpl::UnregisterTaskQueue';
        // Denotes the end of the event UnregisterTaskQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskQueueManager {
    type ProcessTaskFromWorkQueue = 
      TraceEvent.TaskQueueManager.ProcessTaskFromWorkQueue.X;
  
    namespace ProcessTaskFromWorkQueue {
      interface X extends TraceEvent.Base {
        args: {
          src_file: string;
          src_func: string;
        };
        // Duration.
        dur?: number;
        name: 'TaskQueueManager::ProcessTaskFromWorkQueue';
        // Denotes the end of the event ProcessTaskFromWorkQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskQueueThrottler_TaskQueueThrottled {
    interface X extends TraceEvent.Base {
      args: {
        task_queue: string;
      };
      // Duration.
      dur: number;
      name: 'TaskQueueThrottler_TaskQueueThrottled';
      // Denotes the end of the event TaskQueueThrottler_TaskQueueThrottled.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskQueueThrottler_TaskQueueUnthrottled {
    interface X extends TraceEvent.Base {
      args: {
        task_queue: string;
      };
      // Duration.
      dur: number;
      name: 'TaskQueueThrottler_TaskQueueUnthrottled';
      // Denotes the end of the event TaskQueueThrottler_TaskQueueUnthrottled.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskQueueThrottler {
    type MaybeSchedulePumpThrottledTasks = 
      TraceEvent.TaskQueueThrottler.MaybeSchedulePumpThrottledTasks.X;
  
    type OnQueueNextWakeUpChanged = 
      TraceEvent.TaskQueueThrottler.OnQueueNextWakeUpChanged.X;
  
    type PumpThrottledTasks = 
      TraceEvent.TaskQueueThrottler.PumpThrottledTasks.X;
  
    namespace MaybeSchedulePumpThrottledTasks {
      interface X extends TraceEvent.Base {
        args: {
          delay_till_next_pump_ms: number;
        };
        // Duration.
        dur: number;
        name: 'TaskQueueThrottler::MaybeSchedulePumpThrottledTasks';
        // Denotes the end of the event MaybeSchedulePumpThrottledTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnQueueNextWakeUpChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskQueueThrottler::OnQueueNextWakeUpChanged';
        // Denotes the end of the event OnQueueNextWakeUpChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PumpThrottledTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskQueueThrottler::PumpThrottledTasks';
        // Denotes the end of the event PumpThrottledTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskSetFinishedTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.TaskSetFinishedTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskSetFinishedTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          group_id: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET';
      // Denotes the ending of the nestable async flow event TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET.
      ph: 'n';
      scope: string;
    }
  }

  namespace TCP_CONNECT_ATTEMPT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CONNECT_ATTEMPT';
      // Denotes the beginning of the nestable async flow event TCP_CONNECT_ATTEMPT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'TCP_CONNECT_ATTEMPT';
      // Denotes a step into the nestable async flow event TCP_CONNECT_ATTEMPT.
      ph: 'e';
      scope: string;
    }
  }

  namespace TCP_CONNECT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          address_list: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16'?: string;
            '17'?: string;
          }[];
          canonical_name: string;
          source_address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CONNECT';
      // Denotes the beginning of the nestable async flow event TCP_CONNECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'TCP_CONNECT';
      // Denotes a step into the nestable async flow event TCP_CONNECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace Textfield {
    type PaintTextAndCursor = 
      TraceEvent.Textfield.PaintTextAndCursor.X;
  
    namespace PaintTextAndCursor {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Textfield::PaintTextAndCursor';
        // Denotes the end of the event PaintTextAndCursor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Third_partyblinkrendererbindingscorev8script_streamer {
    type Cc = 
      TraceEvent.Third_partyblinkrendererbindingscorev8script_streamer.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../third_party/blink/renderer/bindings/core/v8/script_streamer.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Third_partyblinkrenderercorefetchfetch_data_loader {
    type Cc = 
      TraceEvent.Third_partyblinkrenderercorefetchfetch_data_loader.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../third_party/blink/renderer/core/fetch/fetch_data_loader.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Third_partyblinkrenderercorefileapifile_reader_loader {
    type Cc = 
      TraceEvent.Third_partyblinkrenderercorefileapifile_reader_loader.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../third_party/blink/renderer/core/fileapi/file_reader_loader.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Third_partyblinkrendererplatformloaderfetchdata_pipe_bytes_consumer {
    type Cc = 
      TraceEvent.Third_partyblinkrendererplatformloaderfetchdata_pipe_bytes_consumer.Cc.X;
  
    namespace Cc {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: '../../third_party/blink/renderer/platform/loader/fetch/data_pipe_bytes_consumer.cc';
        // Denotes the end of the event Cc.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Thread_name {
    interface M extends TraceEvent.Base {
      args: {
        name: string;
      };
      name: 'thread_name';
      // Denotes metadata for the event Thread_name.
      ph: 'M';
    }
  }

  namespace Thread_sort_index {
    interface M extends TraceEvent.Base {
      args: {
        sort_index: number;
      };
      name: 'thread_sort_index';
      // Denotes metadata for the event Thread_sort_index.
      ph: 'M';
    }
  }

  namespace ThreadControllerImpl {
    type RunTask = 
      TraceEvent.ThreadControllerImpl.RunTask.B |
      TraceEvent.ThreadControllerImpl.RunTask.X;
  
    namespace RunTask {
      interface B extends TraceEvent.Base {
        args: {
          src_file: string;
          src_func: string;
        };
        name: 'ThreadControllerImpl::RunTask';
        // Denotes the beginning of the event RunTask.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          src_file: string;
          src_func: string;
        };
        // Duration.
        dur: number;
        name: 'ThreadControllerImpl::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ThreadedInputHandler {
    type ClearCurrentlyScrollingNode = 
      TraceEvent.ThreadedInputHandler.ClearCurrentlyScrollingNode.X;
  
    namespace ClearCurrentlyScrollingNode {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ThreadedInputHandler::ClearCurrentlyScrollingNode';
        // Denotes the end of the event ClearCurrentlyScrollingNode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ThreadPool_PostTask {
    interface f extends TraceEvent.Base {
      args: {
      
      };
      bp: string;
      id: number;
      name: 'ThreadPool_PostTask';
      // Denotes the ending of the async flow event ThreadPool_PostTask.
      ph: 'f';
    }
  
    interface s extends TraceEvent.Base {
      args: {
      
      };
      id: number;
      name: 'ThreadPool_PostTask';
      // Denotes the beginning of the async flow event ThreadPool_PostTask.
      ph: 's';
    }
  
    interface X extends TraceEvent.Base {
      args: {
        task_queue_name: string;
      };
      // Duration.
      dur: number;
      name: 'ThreadPool_PostTask';
      // Denotes the end of the event ThreadPool_PostTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ThreadPool_RunTask_BlockShutdown {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ThreadPool_RunTask_BlockShutdown';
      // Denotes the end of the event ThreadPool_RunTask_BlockShutdown.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ThreadPool_RunTask_ContinueOnShutdown {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ThreadPool_RunTask_ContinueOnShutdown';
      // Denotes the end of the event ThreadPool_RunTask_ContinueOnShutdown.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ThreadPool_RunTask_SkipOnShutdown {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'ThreadPool_RunTask_SkipOnShutdown';
      // Denotes the beginning of the event ThreadPool_RunTask_SkipOnShutdown.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ThreadPool_RunTask_SkipOnShutdown';
      // Denotes the end of the event ThreadPool_RunTask_SkipOnShutdown.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ThreadPool_RunTask {
    interface B extends TraceEvent.Base {
      args: {
        src_file: string;
        src_func: string;
      };
      name: 'ThreadPool_RunTask';
      // Denotes the beginning of the event ThreadPool_RunTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        src_file: string;
        src_func: string;
      };
      // Duration.
      dur: number;
      name: 'ThreadPool_RunTask';
      // Denotes the end of the event ThreadPool_RunTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ThreadPool_TaskInfo {
    interface B extends TraceEvent.Base {
      args: {
        task_info: {
          execution_mode: string;
          sequence_token: number;
          task_priority: string;
        };
      };
      name: 'ThreadPool_TaskInfo';
      // Denotes the beginning of the event ThreadPool_TaskInfo.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        task_info: {
          execution_mode: string;
          sequence_token: number;
          task_priority: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ThreadPool_TaskInfo';
      // Denotes the end of the event ThreadPool_TaskInfo.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ThreadProxy {
    type BeginMainFrame = 
      TraceEvent.ThreadProxy.BeginMainFrame.B |
      TraceEvent.ThreadProxy.BeginMainFrame.E |
      TraceEvent.ThreadProxy.BeginMainFrame.X;
  
    type ScheduledActionSendBeginMainFrame = 
      TraceEvent.ThreadProxy.ScheduledActionSendBeginMainFrame.X;
  
    namespace BeginMainFrame {
      interface B extends TraceEvent.Base {
        args: {
          begin_frame_id: number;
        };
        name: 'ThreadProxy::BeginMainFrame';
        // Denotes the beginning of the event BeginMainFrame.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
        
        };
        name: 'ThreadProxy::BeginMainFrame';
        // Denotes the ending of the event BeginMainFrame.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          begin_frame_id: number;
        };
        // Duration.
        dur: number;
        name: 'ThreadProxy::BeginMainFrame';
        // Denotes the end of the event BeginMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionSendBeginMainFrame {
      interface X extends TraceEvent.Base {
        args: {
          begin_frame_id: number;
        };
        // Duration.
        dur: number;
        name: 'ThreadProxy::ScheduledActionSendBeginMainFrame';
        // Denotes the end of the event ScheduledActionSendBeginMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ThreadState {
    type PerformIdleLazySweep = 
      TraceEvent.ThreadState.PerformIdleLazySweep.X;
  
    namespace PerformIdleLazySweep {
      interface X extends TraceEvent.Base {
        args: {
          idleDeltaInSeconds: number;
        };
        // Duration.
        dur: number;
        name: 'ThreadState::performIdleLazySweep';
        // Denotes the end of the event PerformIdleLazySweep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ThrottlingURLLoader {
    type OnReceiveResponse = 
      TraceEvent.ThrottlingURLLoader.OnReceiveResponse.X;
  
    type OnStartLoadingResponseBody = 
      TraceEvent.ThrottlingURLLoader.OnStartLoadingResponseBody.X;
  
    namespace OnReceiveResponse {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'ThrottlingURLLoader::OnReceiveResponse';
        // Denotes the end of the event OnReceiveResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnStartLoadingResponseBody {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'ThrottlingURLLoader::OnStartLoadingResponseBody';
        // Denotes the end of the event OnStartLoadingResponseBody.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TileManager {
    type AssignGpuMemorytileviolatesmemorypolicy = 
      TraceEvent.TileManager.AssignGpuMemorytileviolatesmemorypolicy.I;
  
    type AssignGpuMemoryToTiles = 
      TraceEvent.TileManager.AssignGpuMemoryToTiles.X;
  
    type CheckForCompletedTasks = 
      TraceEvent.TileManager.CheckForCompletedTasks.X;
  
    type CheckForCompletedTasksFinished = 
      TraceEvent.TileManager.CheckForCompletedTasksFinished.I;
  
    type CheckPendingGpuWorkAndIssueSignals = 
      TraceEvent.TileManager.CheckPendingGpuWorkAndIssueSignals.X;
  
    type DidFinishRunningAllTileTasks = 
      TraceEvent.TileManager.DidFinishRunningAllTileTasks.X;
  
    type DidFinishRunningTileTasksRequiredForActivation = 
      TraceEvent.TileManager.DidFinishRunningTileTasksRequiredForActivation.X;
  
    type DidFinishRunningTileTasksRequiredForDraw = 
      TraceEvent.TileManager.DidFinishRunningTileTasksRequiredForDraw.X;
  
    type FlushAndIssueSignals = 
      TraceEvent.TileManager.FlushAndIssueSignals.X;
  
    type IsReadyToActivate = 
      TraceEvent.TileManager.IsReadyToActivate.X;
  
    type IsReadyToDraw = 
      TraceEvent.TileManager.IsReadyToDraw.X;
  
    type PrepareTiles = 
      TraceEvent.TileManager.PrepareTiles.X;
  
    type ScheduleTasks = 
      TraceEvent.TileManager.ScheduleTasks.X;
  
    namespace AssignGpuMemorytileviolatesmemorypolicy {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'TileManager::AssignGpuMemory tile violates memory policy';
        // Denotes an event AssignGpuMemorytileviolatesmemorypolicy. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AssignGpuMemoryToTiles {
      interface X extends TraceEvent.Base {
        args: {
          all_tiles_that_need_to_be_rasterized_are_scheduled: boolean;
          had_enough_memory_to_schedule_tiles_needed_now: boolean;
        };
        // Duration.
        dur: number;
        name: 'TileManager::AssignGpuMemoryToTiles';
        // Denotes the end of the event AssignGpuMemoryToTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckForCompletedTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::CheckForCompletedTasks';
        // Denotes the end of the event CheckForCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckForCompletedTasksFinished {
      interface I extends TraceEvent.Base {
        args: {
          stats: {
            canceled_count: number;
            completed_count: number;
          };
        };
        name: 'TileManager::CheckForCompletedTasksFinished';
        // Denotes an event CheckForCompletedTasksFinished. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckPendingGpuWorkAndIssueSignals {
      interface X extends TraceEvent.Base {
        args: {
          pending_gpu_work_tiles: number;
          tree_priority: string;
        };
        // Duration.
        dur: number;
        name: 'TileManager::CheckPendingGpuWorkAndIssueSignals';
        // Denotes the end of the event CheckPendingGpuWorkAndIssueSignals.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishRunningAllTileTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::DidFinishRunningAllTileTasks';
        // Denotes the end of the event DidFinishRunningAllTileTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishRunningTileTasksRequiredForActivation {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::DidFinishRunningTileTasksRequiredForActivation';
        // Denotes the end of the event DidFinishRunningTileTasksRequiredForActivation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishRunningTileTasksRequiredForDraw {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::DidFinishRunningTileTasksRequiredForDraw';
        // Denotes the end of the event DidFinishRunningTileTasksRequiredForDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushAndIssueSignals {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::FlushAndIssueSignals';
        // Denotes the end of the event FlushAndIssueSignals.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IsReadyToActivate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IsReadyToActivate';
        // Denotes the end of the event IsReadyToActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IsReadyToDraw {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IsReadyToDraw';
        // Denotes the end of the event IsReadyToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PrepareTiles {
      interface X extends TraceEvent.Base {
        args: {
          prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'TileManager::PrepareTiles';
        // Denotes the end of the event PrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends TraceEvent.Base {
        args: {
          count: number;
        };
        // Duration.
        dur: number;
        name: 'TileManager::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TileTaskManagerImpl {
    type CheckForCompletedTasks = 
      TraceEvent.TileTaskManagerImpl.CheckForCompletedTasks.X;
  
    type ScheduleTasks = 
      TraceEvent.TileTaskManagerImpl.ScheduleTasks.X;
  
    type Shutdown = 
      TraceEvent.TileTaskManagerImpl.Shutdown.X;
  
    namespace CheckForCompletedTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileTaskManagerImpl::CheckForCompletedTasks';
        // Denotes the end of the event CheckForCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileTaskManagerImpl::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Shutdown {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileTaskManagerImpl::Shutdown';
        // Denotes the end of the event Shutdown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TimeoutMonitor {
    type Start = 
      TraceEvent.TimeoutMonitor.Start.I;
  
    type Stop = 
      TraceEvent.TimeoutMonitor.Stop.I;
  
    type TimeOutHandler = 
      TraceEvent.TimeoutMonitor.TimeOutHandler.X;
  
    namespace Start {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'TimeoutMonitor::Start';
        // Denotes an event Start. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Stop {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'TimeoutMonitor::Stop';
        // Denotes an event Stop. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TimeOutHandler {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TimeoutMonitor::TimeOutHandler';
        // Denotes the end of the event TimeOutHandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface F extends TraceEvent.Base {
      args: {
        result: string;
      };
      id2: {
        local: string;
      };
      name: 'TimeoutMonitor';
      // Denotes the ending of the async event TimeoutMonitor.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'TimeoutMonitor';
      // Denotes the beginning of the async event TimeoutMonitor.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimerBase {
    type Run = 
      TraceEvent.TimerBase.Run.X;
  
    namespace Run {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TimerBase::run';
        // Denotes the end of the event Run.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TimerFire {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame?: string;
          timerId: number;
        };
      };
      // Duration.
      dur: number;
      name: 'TimerFire';
      // Denotes the end of the event TimerFire.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimerInstall {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame?: string;
          singleShot: boolean;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          timeout: number;
          timerId: number;
        };
      };
      name: 'TimerInstall';
      // Denotes an event TimerInstall. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimerRemove {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          timerId: number;
        };
      };
      name: 'TimerRemove';
      // Denotes an event TimerRemove. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeStamp {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          message: string;
        };
      };
      name: 'TimeStamp';
      // Denotes an event TimeStamp. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeToDomReady {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'timeToDomReady';
      // Denotes the beginning of the nestable async flow event TimeToDomReady.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'timeToDomReady';
      // Denotes a step into the nestable async flow event TimeToDomReady.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace TimeToInteractive {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'timeToInteractive';
      // Denotes the beginning of the nestable async flow event TimeToInteractive.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'timeToInteractive';
      // Denotes a step into the nestable async flow event TimeToInteractive.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace TimeToZonesAndDomReady {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'timeToZonesAndDomReady';
      // Denotes the beginning of the nestable async flow event TimeToZonesAndDomReady.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'timeToZonesAndDomReady';
      // Denotes a step into the nestable async flow event TimeToZonesAndDomReady.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace TimeToZonesComplete {
    interface b extends TraceEvent.Base {
      args: {
        startTime?: number;
      };
      id: string;
      name: 'timeToZonesComplete';
      // Denotes the beginning of the nestable async flow event TimeToZonesComplete.
      ph: 'b';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'timeToZonesComplete';
      // Denotes a step into the nestable async flow event TimeToZonesComplete.
      ph: 'e';
      scope?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace TopLevel {
    interface N extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'TopLevel';
      // Denotes a create object of the event TopLevel.
      ph: 'N';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends TraceEvent.Base {
      args: {
        snapshot: {
        
        };
      };
      id: string;
      name: 'TopLevel';
      // Denotes a snapshot object of the event TopLevel.
      ph: 'O';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TouchActionFilter {
    type OnHasTouchEventHandlers = 
      TraceEvent.TouchActionFilter.OnHasTouchEventHandlers.X;
  
    type ResetTouchAction = 
      TraceEvent.TouchActionFilter.ResetTouchAction.X;
  
    type SetTouchAction = 
      TraceEvent.TouchActionFilter.SetTouchAction.X;
  
    namespace OnHasTouchEventHandlers {
      interface X extends TraceEvent.Base {
        args: {
          'has handlers': boolean;
        };
        // Duration.
        dur: number;
        name: 'TouchActionFilter::OnHasTouchEventHandlers';
        // Denotes the end of the event OnHasTouchEventHandlers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ResetTouchAction {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TouchActionFilter::ResetTouchAction';
        // Denotes the end of the event ResetTouchAction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetTouchAction {
      interface X extends TraceEvent.Base {
        args: {
          action: string;
        };
        // Duration.
        dur: number;
        name: 'TouchActionFilter::SetTouchAction';
        // Denotes the end of the event SetTouchAction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Tracing {
    namespace Mojom {
      type PerfettoService = 
        TraceEvent.Tracing.Mojom.PerfettoService.X;
    
      type ProducerClient = 
        TraceEvent.Tracing.Mojom.ProducerClient.B |
        TraceEvent.Tracing.Mojom.ProducerClient.X;
    
      type ProducerHost = 
        TraceEvent.Tracing.Mojom.ProducerHost.B |
        TraceEvent.Tracing.Mojom.ProducerHost.X;
    
      type TracedProcess = 
        TraceEvent.Tracing.Mojom.TracedProcess.X;
    
      type TracingService = 
        TraceEvent.Tracing.Mojom.TracingService.X;
    
      type TracingSessionClient = 
        TraceEvent.Tracing.Mojom.TracingSessionClient.X;
    
      type TracingSessionHost = 
        TraceEvent.Tracing.Mojom.TracingSessionHost.X;
    
      namespace PerfettoService {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.PerfettoService';
          // Denotes the end of the event PerfettoService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProducerClient {
        interface B extends TraceEvent.Base {
          args: {
          
          };
          name: 'tracing.mojom.ProducerClient';
          // Denotes the beginning of the event ProducerClient.
          ph: 'B';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.ProducerClient';
          // Denotes the end of the event ProducerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProducerHost {
        interface B extends TraceEvent.Base {
          args: {
          
          };
          name: 'tracing.mojom.ProducerHost';
          // Denotes the beginning of the event ProducerHost.
          ph: 'B';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.ProducerHost';
          // Denotes the end of the event ProducerHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TracedProcess {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.TracedProcess';
          // Denotes the end of the event TracedProcess.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TracingService {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.TracingService';
          // Denotes the end of the event TracingService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TracingSessionClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.TracingSessionClient';
          // Denotes the end of the event TracingSessionClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TracingSessionHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.TracingSessionHost';
          // Denotes the end of the event TracingSessionHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace TracingSessionIdForWorker {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          url: string;
          workerId: string;
          workerThreadId: number;
        };
      };
      name: 'TracingSessionIdForWorker';
      // Denotes an event TracingSessionIdForWorker. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TracingStartedInBrowser {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frameTreeNodeId: number;
          frames: {
            frame: string;
            name: string;
            processId: number;
            url: string;
          }[];
          persistentIds: boolean;
        };
      };
      name: 'TracingStartedInBrowser';
      // Denotes an event TracingStartedInBrowser. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TracingStartedInPage {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          page: string;
          sessionId: string;
        };
      };
      name: 'TracingStartedInPage';
      // Denotes an event TracingStartedInPage. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TrackerValidation {
    interface b extends TraceEvent.Base {
      args: {
        aborted_main?: number;
        name: string;
        no_damage_main?: number;
      };
      id2: {
        local: string;
      };
      name: 'TrackerValidation';
      // Denotes the beginning of the nestable async flow event TrackerValidation.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'TrackerValidation';
      // Denotes a step into the nestable async flow event TrackerValidation.
      ph: 'e';
      scope: string;
    }
  }

  namespace TransferBuffer {
    type Free = 
      TraceEvent.TransferBuffer.Free.X;
  
    namespace Free {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TransferBuffer::Free';
        // Denotes the end of the event Free.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TransfersBytesPendingOnDisk {
    interface C extends TraceEvent.Base {
      args: {
        value: number;
      };
      name: 'TransfersBytesPendingOnDisk';
      // Denotes a counter for the event TransfersBytesPendingOnDisk.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TransfersPendingOnDisk {
    interface C extends TraceEvent.Base {
      args: {
        value: number;
      };
      name: 'TransfersPendingOnDisk';
      // Denotes a counter for the event TransfersPendingOnDisk.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Translate {
    namespace Mojom {
      type ContentTranslateDriver = 
        TraceEvent.Translate.Mojom.ContentTranslateDriver.X;
    
      type TranslateAgent = 
        TraceEvent.Translate.Mojom.TranslateAgent.X;
    
      namespace ContentTranslateDriver {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'translate.mojom.ContentTranslateDriver';
          // Denotes the end of the event ContentTranslateDriver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TranslateAgent {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'translate.mojom.TranslateAgent';
          // Denotes the end of the event TranslateAgent.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace TRANSPORT_CONNECT_JOB_CONNECT {
    interface b extends TraceEvent.Base {
      args: {
        params?: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'TRANSPORT_CONNECT_JOB_CONNECT';
      // Denotes the beginning of the nestable async flow event TRANSPORT_CONNECT_JOB_CONNECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'TRANSPORT_CONNECT_JOB_CONNECT';
      // Denotes a step into the nestable async flow event TRANSPORT_CONNECT_JOB_CONNECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace TreeSynchronizer {
    type SynchronizeTrees = 
      TraceEvent.TreeSynchronizer.SynchronizeTrees.X;
  
    namespace PushLayerPropertiesTo {
      type Impl = 
        TraceEvent.TreeSynchronizer.PushLayerPropertiesTo.Impl.X;
    
      type Main = 
        TraceEvent.TreeSynchronizer.PushLayerPropertiesTo.Main.X;
    
      namespace Impl {
        interface X extends TraceEvent.Base {
          args: {
            layer_count: number;
          };
          // Duration.
          dur: number;
          name: 'TreeSynchronizer::PushLayerPropertiesTo.Impl';
          // Denotes the end of the event Impl.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Main {
        interface X extends TraceEvent.Base {
          args: {
            layer_count: number;
          };
          // Duration.
          dur: number;
          name: 'TreeSynchronizer::PushLayerPropertiesTo.Main';
          // Denotes the end of the event Main.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace SynchronizeTrees {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TreeSynchronizer::SynchronizeTrees';
        // Denotes the end of the event SynchronizeTrees.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TRIAL_CERT_VERIFIER_JOB_COMPARISON_STARTED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'TRIAL_CERT_VERIFIER_JOB_COMPARISON_STARTED';
      // Denotes the ending of the nestable async flow event TRIAL_CERT_VERIFIER_JOB_COMPARISON_STARTED.
      ph: 'n';
      scope: string;
    }
  }

  namespace TRIAL_CERT_VERIFIER_JOB {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          trial_success: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'TRIAL_CERT_VERIFIER_JOB';
      // Denotes the beginning of the nestable async flow event TRIAL_CERT_VERIFIER_JOB.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'TRIAL_CERT_VERIFIER_JOB';
      // Denotes a step into the nestable async flow event TRIAL_CERT_VERIFIER_JOB.
      ph: 'e';
      scope: string;
    }
  }

  namespace UDP_BYTES_RECEIVED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          address: string;
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_BYTES_RECEIVED';
      // Denotes the ending of the nestable async flow event UDP_BYTES_RECEIVED.
      ph: 'n';
      scope: string;
    }
  }

  namespace UDP_BYTES_SENT {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_BYTES_SENT';
      // Denotes the ending of the nestable async flow event UDP_BYTES_SENT.
      ph: 'n';
      scope: string;
    }
  }

  namespace UDP_CONNECT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          address: string;
          net_error?: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_CONNECT';
      // Denotes the beginning of the nestable async flow event UDP_CONNECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'UDP_CONNECT';
      // Denotes a step into the nestable async flow event UDP_CONNECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace UDP_LOCAL_ADDRESS {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_LOCAL_ADDRESS';
      // Denotes the ending of the nestable async flow event UDP_LOCAL_ADDRESS.
      ph: 'n';
      scope: string;
    }
  }

  namespace Ui_preconnection_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ui_preconnection_tq';
      // Denotes the end of the event Ui_preconnection_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Ui_thread_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ui_thread_tq';
      // Denotes the end of the event Ui_thread_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Ui_user_blocking_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ui_user_blocking_tq';
      // Denotes the end of the event Ui_user_blocking_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Ukm {
    namespace Mojom {
      type UkmRecorderInterface = 
        TraceEvent.Ukm.Mojom.UkmRecorderInterface.X;
    
      namespace UkmRecorderInterface {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ukm.mojom.UkmRecorderInterface';
          // Denotes the end of the event UkmRecorderInterface.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace UnfreezableFrameMsg_Unload {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'UnfreezableFrameMsg_Unload';
      // Denotes the end of the event UnfreezableFrameMsg_Unload.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Unknowninterface {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'unknown interface';
      // Denotes the end of the event Unknowninterface.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UnloadEventEnd {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'unloadEventEnd';
      // Denotes a mark of the event UnloadEventEnd.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace UnloadEventStart {
    interface R extends TraceEvent.Base {
      args: {
        frame: string;
      };
      name: 'unloadEventStart';
      // Denotes a mark of the event UnloadEventStart.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts?: number;
    }
  }

  namespace UpdateCounters {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          documents: number;
          jsEventListeners: number;
          jsHeapSizeUsed: number;
          nodes: number;
        };
      };
      name: 'UpdateCounters';
      // Denotes an event UpdateCounters. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLayer {
    interface B extends TraceEvent.Base {
      args: {
        layerId: number;
        layerTreeId: number;
      };
      name: 'UpdateLayer';
      // Denotes the beginning of the event UpdateLayer.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
      
      };
      name: 'UpdateLayer';
      // Denotes the ending of the event UpdateLayer.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface I extends TraceEvent.Base {
      args: {
        layerId: number;
        layerTreeId: number;
      };
      name: 'UpdateLayer';
      // Denotes an event UpdateLayer. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        layerId: number;
        layerTreeId: number;
      };
      // Duration.
      dur: number;
      name: 'UpdateLayer';
      // Denotes the end of the event UpdateLayer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLayerTree {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
        };
      };
      // Duration.
      dur: number;
      name: 'UpdateLayerTree';
      // Denotes the end of the event UpdateLayerTree.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLayoutTree {
    interface B extends TraceEvent.Base {
      args: {
        beginData: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'UpdateLayoutTree';
      // Denotes the beginning of the event UpdateLayoutTree.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends TraceEvent.Base {
      args: {
        elementCount: number;
      };
      name: 'UpdateLayoutTree';
      // Denotes the ending of the event UpdateLayoutTree.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
        beginData: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
        elementCount: number;
      };
      // Duration.
      dur: number;
      name: 'UpdateLayoutTree';
      // Denotes the end of the event UpdateLayoutTree.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateStateFromAnimationDrivers {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'UpdateStateFromAnimationDrivers';
      // Denotes the end of the event UpdateStateFromAnimationDrivers.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UPLOAD_DATA_STREAM_INIT {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          is_chunked: boolean;
          net_error: number;
          total_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_INIT';
      // Denotes the beginning of the nestable async flow event UPLOAD_DATA_STREAM_INIT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_INIT';
      // Denotes a step into the nestable async flow event UPLOAD_DATA_STREAM_INIT.
      ph: 'e';
      scope: string;
    }
  }

  namespace UPLOAD_DATA_STREAM_READ {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          current_position: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_READ';
      // Denotes the beginning of the nestable async flow event UPLOAD_DATA_STREAM_READ.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_READ';
      // Denotes a step into the nestable async flow event UPLOAD_DATA_STREAM_READ.
      ph: 'e';
      scope: string;
    }
  }

  namespace URL_REQUEST_DELEGATE_RECEIVED_REDIRECT {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RECEIVED_REDIRECT';
      // Denotes the beginning of the nestable async flow event URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RECEIVED_REDIRECT';
      // Denotes a step into the nestable async flow event URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.
      ph: 'e';
      scope: string;
    }
  }

  namespace URL_REQUEST_DELEGATE_RESPONSE_STARTED {
    interface b extends TraceEvent.Base {
      args: {
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RESPONSE_STARTED';
      // Denotes the beginning of the nestable async flow event URL_REQUEST_DELEGATE_RESPONSE_STARTED.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RESPONSE_STARTED';
      // Denotes a step into the nestable async flow event URL_REQUEST_DELEGATE_RESPONSE_STARTED.
      ph: 'e';
      scope: string;
    }
  }

  namespace URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED';
      // Denotes the ending of the nestable async flow event URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_FILTERS_SET {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          filters: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_FILTERS_SET';
      // Denotes the ending of the nestable async flow event URL_REQUEST_FILTERS_SET.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_JOB_BYTES_READ {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_JOB_BYTES_READ';
      // Denotes the ending of the nestable async flow event URL_REQUEST_JOB_BYTES_READ.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_JOB_FILTERED_BYTES_READ {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_JOB_FILTERED_BYTES_READ';
      // Denotes the ending of the nestable async flow event URL_REQUEST_JOB_FILTERED_BYTES_READ.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_REDIRECT_JOB {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          reason: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_REDIRECT_JOB';
      // Denotes the ending of the nestable async flow event URL_REQUEST_REDIRECT_JOB.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_REDIRECTED {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          location: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_REDIRECTED';
      // Denotes the ending of the nestable async flow event URL_REQUEST_REDIRECTED.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_SET_PRIORITY {
    interface n extends TraceEvent.Base {
      args: {
        params: {
          priority: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_SET_PRIORITY';
      // Denotes the ending of the nestable async flow event URL_REQUEST_SET_PRIORITY.
      ph: 'n';
      scope: string;
    }
  }

  namespace URL_REQUEST_START_JOB {
    interface b extends TraceEvent.Base {
      args: {
        params: {
          initiator: string;
          load_flags: number;
          method: string;
          net_error?: number;
          network_isolation_key: string;
          privacy_mode: string;
          site_for_cookies: string;
          upload_id?: string;
          url: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_START_JOB';
      // Denotes the beginning of the nestable async flow event URL_REQUEST_START_JOB.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'URL_REQUEST_START_JOB';
      // Denotes a step into the nestable async flow event URL_REQUEST_START_JOB.
      ph: 'e';
      scope: string;
    }
  }

  namespace URLLoaderClientImpl {
    type OnReceiveResponse = 
      TraceEvent.URLLoaderClientImpl.OnReceiveResponse.X;
  
    type OnStartLoadingResponseBody = 
      TraceEvent.URLLoaderClientImpl.OnStartLoadingResponseBody.X;
  
    namespace OnReceiveResponse {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'URLLoaderClientImpl::OnReceiveResponse';
        // Denotes the end of the event OnReceiveResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnStartLoadingResponseBody {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'URLLoaderClientImpl::OnStartLoadingResponseBody';
        // Denotes the end of the event OnStartLoadingResponseBody.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace UserEvent {
    interface I extends TraceEvent.Base {
      args: {
        action: string;
      };
      name: 'UserEvent';
      // Denotes an event UserEvent. There are no begining/ending phases.
      ph: 'I';
      s: string;
    }
  }

  namespace Usingallowed_touch_action {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Using allowed_touch_action';
      // Denotes an event Usingallowed_touch_action. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Usingexistingdeadline {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Using existing deadline';
      // Denotes an event Usingexistingdeadline. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Usingnewdeadline {
    interface X extends TraceEvent.Base {
      args: {
        delta: number;
        desired_deadline: number;
      };
      // Duration.
      dur: number;
      name: 'Using new deadline';
      // Denotes the end of the event Usingnewdeadline.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace V8_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'v8_tq';
      // Denotes the end of the event V8_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace V8 {
    type BytecodeBudgetInterrupt = 
      TraceEvent.V8.BytecodeBudgetInterrupt.I |
      TraceEvent.V8.BytecodeBudgetInterrupt.X;
  
    type BytecodeBudgetInterruptWithStackCheck = 
      TraceEvent.V8.BytecodeBudgetInterruptWithStackCheck.I |
      TraceEvent.V8.BytecodeBudgetInterruptWithStackCheck.X;
  
    type CallAsConstructor = 
      TraceEvent.V8.CallAsConstructor.X;
  
    type CallFunction = 
      TraceEvent.V8.CallFunction.X;
  
    type Compile = 
      TraceEvent.V8.Compile.B |
      TraceEvent.V8.Compile.E |
      TraceEvent.V8.Compile.X;
  
    type CompileModule = 
      TraceEvent.V8.CompileModule.X;
  
    type DeoptimizeCode = 
      TraceEvent.V8.DeoptimizeCode.X;
  
    type DeserializeContext = 
      TraceEvent.V8.DeserializeContext.X;
  
    type DeserializeIsolate = 
      TraceEvent.V8.DeserializeIsolate.X;
  
    type EvaluateModule = 
      TraceEvent.V8.EvaluateModule.X;
  
    type GC_BACKGROUND_ARRAY_BUFFER_SWEEP = 
      TraceEvent.V8.GC_BACKGROUND_ARRAY_BUFFER_SWEEP.X;
  
    type GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP = 
      TraceEvent.V8.GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP.X;
  
    type GC_BACKGROUND_SAFEPOINT = 
      TraceEvent.V8.GC_BACKGROUND_SAFEPOINT.X;
  
    type GC_BACKGROUND_UNMAPPER = 
      TraceEvent.V8.GC_BACKGROUND_UNMAPPER.X;
  
    type GC_BACKGROUND_UNPARK = 
      TraceEvent.V8.GC_BACKGROUND_UNPARK.X;
  
    type GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP = 
      TraceEvent.V8.GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP.X;
  
    type GC_HEAP_EMBEDDER_TRACING_EPILOGUE = 
      TraceEvent.V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE.X;
  
    type GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE = 
      TraceEvent.V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE.X;
  
    type GC_HEAP_EPILOGUE_SAFEPOINT = 
      TraceEvent.V8.GC_HEAP_EPILOGUE_SAFEPOINT.X;
  
    type GC_HEAP_EPILOGUE = 
      TraceEvent.V8.GC_HEAP_EPILOGUE.X;
  
    type GC_HEAP_EXTERNAL_EPILOGUE = 
      TraceEvent.V8.GC_HEAP_EXTERNAL_EPILOGUE.X;
  
    type GC_HEAP_EXTERNAL_PROLOGUE = 
      TraceEvent.V8.GC_HEAP_EXTERNAL_PROLOGUE.X;
  
    type GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES = 
      TraceEvent.V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES.I |
      TraceEvent.V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES.X;
  
    type GC_HEAP_PROLOGUE_SAFEPOINT = 
      TraceEvent.V8.GC_HEAP_PROLOGUE_SAFEPOINT.I |
      TraceEvent.V8.GC_HEAP_PROLOGUE_SAFEPOINT.X;
  
    type GC_HEAP_PROLOGUE = 
      TraceEvent.V8.GC_HEAP_PROLOGUE.X;
  
    type GC_MARK_COMPACTOR = 
      TraceEvent.V8.GC_MARK_COMPACTOR.X;
  
    type GC_MC_BACKGROUND_EVACUATE_COPY = 
      TraceEvent.V8.GC_MC_BACKGROUND_EVACUATE_COPY.X;
  
    type GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS = 
      TraceEvent.V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS.X;
  
    type GC_MC_BACKGROUND_MARKING = 
      TraceEvent.V8.GC_MC_BACKGROUND_MARKING.X;
  
    type GC_MC_BACKGROUND_SWEEPING = 
      TraceEvent.V8.GC_MC_BACKGROUND_SWEEPING.I |
      TraceEvent.V8.GC_MC_BACKGROUND_SWEEPING.X;
  
    type GC_MC_CLEAR_EXTERNAL_STRING_TABLE = 
      TraceEvent.V8.GC_MC_CLEAR_EXTERNAL_STRING_TABLE.X;
  
    type GC_MC_CLEAR_FLUSHABLE_BYTECODE = 
      TraceEvent.V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE.X;
  
    type GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS = 
      TraceEvent.V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS.X;
  
    type GC_MC_CLEAR_JOIN_JOB = 
      TraceEvent.V8.GC_MC_CLEAR_JOIN_JOB.X;
  
    type GC_MC_CLEAR_MAPS = 
      TraceEvent.V8.GC_MC_CLEAR_MAPS.X;
  
    type GC_MC_CLEAR_STRING_FORWARDING_TABLE = 
      TraceEvent.V8.GC_MC_CLEAR_STRING_FORWARDING_TABLE.X;
  
    type GC_MC_CLEAR_STRING_TABLE = 
      TraceEvent.V8.GC_MC_CLEAR_STRING_TABLE.X;
  
    type GC_MC_CLEAR_WEAK_COLLECTIONS = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_COLLECTIONS.X;
  
    type GC_MC_CLEAR_WEAK_GLOBAL_HANDLES = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_GLOBAL_HANDLES.X;
  
    type GC_MC_CLEAR_WEAK_LISTS = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_LISTS.X;
  
    type GC_MC_CLEAR_WEAK_REFERENCES = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_REFERENCES.X;
  
    type GC_MC_CLEAR = 
      TraceEvent.V8.GC_MC_CLEAR.X;
  
    type GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS = 
      TraceEvent.V8.GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS.X;
  
    type GC_MC_COMPLETE_SWEEPING = 
      TraceEvent.V8.GC_MC_COMPLETE_SWEEPING.X;
  
    type GC_MC_EPILOGUE = 
      TraceEvent.V8.GC_MC_EPILOGUE.X;
  
    type GC_MC_EVACUATE_CLEAN_UP = 
      TraceEvent.V8.GC_MC_EVACUATE_CLEAN_UP.X;
  
    type GC_MC_EVACUATE_COPY_PARALLEL = 
      TraceEvent.V8.GC_MC_EVACUATE_COPY_PARALLEL.X;
  
    type GC_MC_EVACUATE_COPY = 
      TraceEvent.V8.GC_MC_EVACUATE_COPY.X;
  
    type GC_MC_EVACUATE_EPILOGUE = 
      TraceEvent.V8.GC_MC_EVACUATE_EPILOGUE.X;
  
    type GC_MC_EVACUATE_PROLOGUE = 
      TraceEvent.V8.GC_MC_EVACUATE_PROLOGUE.X;
  
    type GC_MC_EVACUATE_REBALANCE = 
      TraceEvent.V8.GC_MC_EVACUATE_REBALANCE.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_CLIENT_HEAPS = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_CLIENT_HEAPS.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_WEAK = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS.X;
  
    type GC_MC_EVACUATE = 
      TraceEvent.V8.GC_MC_EVACUATE.X;
  
    type GC_MC_FINISH_SWEEP_ARRAY_BUFFERS = 
      TraceEvent.V8.GC_MC_FINISH_SWEEP_ARRAY_BUFFERS.X;
  
    type GC_MC_FINISH = 
      TraceEvent.V8.GC_MC_FINISH.X;
  
    type GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE.X;
  
    type GC_MC_INCREMENTAL_EMBEDDER_TRACING = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING.X;
  
    type GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE.X;
  
    type GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE.X;
  
    type GC_MC_INCREMENTAL_FINALIZE_BODY = 
      TraceEvent.V8.GC_MC_INCREMENTAL_FINALIZE_BODY.X;
  
    type GC_MC_INCREMENTAL_FINALIZE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_FINALIZE.X;
  
    type GC_MC_INCREMENTAL_LAYOUT_CHANGE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE.I |
      TraceEvent.V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE.X;
  
    type GC_MC_INCREMENTAL_START = 
      TraceEvent.V8.GC_MC_INCREMENTAL_START.X;
  
    type GC_MC_INCREMENTAL_SWEEP_ARRAY_BUFFERS = 
      TraceEvent.V8.GC_MC_INCREMENTAL_SWEEP_ARRAY_BUFFERS.X;
  
    type GC_MC_INCREMENTAL_SWEEPING = 
      TraceEvent.V8.GC_MC_INCREMENTAL_SWEEPING.X;
  
    type GC_MC_INCREMENTAL = 
      TraceEvent.V8.GC_MC_INCREMENTAL.X;
  
    type GC_MC_MARK_CLIENT_HEAPS = 
      TraceEvent.V8.GC_MC_MARK_CLIENT_HEAPS.X;
  
    type GC_MC_MARK_EMBEDDER_TRACING_CLOSURE = 
      TraceEvent.V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE.X;
  
    type GC_MC_MARK_EMBEDDER_TRACING = 
      TraceEvent.V8.GC_MC_MARK_EMBEDDER_TRACING.X;
  
    type GC_MC_MARK_FINISH_INCREMENTAL = 
      TraceEvent.V8.GC_MC_MARK_FINISH_INCREMENTAL.X;
  
    type GC_MC_MARK_FULL_CLOSURE_PARALLEL_JOIN = 
      TraceEvent.V8.GC_MC_MARK_FULL_CLOSURE_PARALLEL_JOIN.X;
  
    type GC_MC_MARK_FULL_CLOSURE_PARALLEL = 
      TraceEvent.V8.GC_MC_MARK_FULL_CLOSURE_PARALLEL.X;
  
    type GC_MC_MARK_FULL_CLOSURE = 
      TraceEvent.V8.GC_MC_MARK_FULL_CLOSURE.X;
  
    type GC_MC_MARK_MAIN = 
      TraceEvent.V8.GC_MC_MARK_MAIN.X;
  
    type GC_MC_MARK_RETAIN_MAPS = 
      TraceEvent.V8.GC_MC_MARK_RETAIN_MAPS.X;
  
    type GC_MC_MARK_ROOTS = 
      TraceEvent.V8.GC_MC_MARK_ROOTS.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_EPHEMERON = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_HARMONY = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS.X;
  
    type GC_MC_MARK_WEAK_CLOSURE = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE.X;
  
    type GC_MC_MARK = 
      TraceEvent.V8.GC_MC_MARK.X;
  
    type GC_MC_PROLOGUE = 
      TraceEvent.V8.GC_MC_PROLOGUE.X;
  
    type GC_MC_SWEEP_EXTERNAL_POINTER_TABLE = 
      TraceEvent.V8.GC_MC_SWEEP_EXTERNAL_POINTER_TABLE.X;
  
    type GC_MC_SWEEP = 
      TraceEvent.V8.GC_MC_SWEEP.X;
  
    type GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL = 
      TraceEvent.V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL.X;
  
    type GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS = 
      TraceEvent.V8.GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS.X;
  
    type GC_SCAVENGER_FREE_REMEMBERED_SET = 
      TraceEvent.V8.GC_SCAVENGER_FREE_REMEMBERED_SET.X;
  
    type GC_SCAVENGER_SCAVENGE_FINALIZE = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_FINALIZE.X;
  
    type GC_SCAVENGER_SCAVENGE_PARALLEL = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_PARALLEL.X;
  
    type GC_SCAVENGER_SCAVENGE_ROOTS = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_ROOTS.X;
  
    type GC_SCAVENGER_SCAVENGE_UPDATE_REFS = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS.X;
  
    type GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY.X;
  
    type GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS.X;
  
    type GC_SCAVENGER_SCAVENGE = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE.X;
  
    type GC_SCAVENGER_SWEEP_ARRAY_BUFFERS = 
      TraceEvent.V8.GC_SCAVENGER_SWEEP_ARRAY_BUFFERS.X;
  
    type GC_SCAVENGER = 
      TraceEvent.V8.GC_SCAVENGER.X;
  
    type GC_STOP_THE_WORLD = 
      TraceEvent.V8.GC_STOP_THE_WORLD.X;
  
    type GC_TIME_TO_SAFEPOINT = 
      TraceEvent.V8.GC_TIME_TO_SAFEPOINT.I |
      TraceEvent.V8.GC_TIME_TO_SAFEPOINT.X;
  
    type GCCompactor = 
      TraceEvent.V8.GCCompactor.X;
  
    type GCFinalizeMC = 
      TraceEvent.V8.GCFinalizeMC.X;
  
    type GCFinalizeMCReduceMemory = 
      TraceEvent.V8.GCFinalizeMCReduceMemory.X;
  
    type GCIdleNotification = 
      TraceEvent.V8.GCIdleNotification.X;
  
    type GCIncrementalMarking = 
      TraceEvent.V8.GCIncrementalMarking.X;
  
    type GCIncrementalMarkingFinalize = 
      TraceEvent.V8.GCIncrementalMarkingFinalize.X;
  
    type GCIncrementalMarkingLayoutChange = 
      TraceEvent.V8.GCIncrementalMarkingLayoutChange.X;
  
    type GCIncrementalMarkingStart = 
      TraceEvent.V8.GCIncrementalMarkingStart.X;
  
    type GCPhantomHandleProcessingCallback = 
      TraceEvent.V8.GCPhantomHandleProcessingCallback.X;
  
    type GCScavenger = 
      TraceEvent.V8.GCScavenger.X;
  
    type HandleInterrupts = 
      TraceEvent.V8.HandleInterrupts.X;
  
    type InvokeApiInterruptCallbacks = 
      TraceEvent.V8.InvokeApiInterruptCallbacks.X;
  
    type IsolateInitialize = 
      TraceEvent.V8.IsolateInitialize.X;
  
    type NewContext = 
      TraceEvent.V8.NewContext.B |
      TraceEvent.V8.NewContext.E |
      TraceEvent.V8.NewContext.X;
  
    type NewInstance = 
      TraceEvent.V8.NewInstance.X;
  
    type ParseOnBackground = 
      TraceEvent.V8.ParseOnBackground.X;
  
    type ParseOnBackgroundParsing = 
      TraceEvent.V8.ParseOnBackgroundParsing.X;
  
    type ParseOnBackgroundWaiting = 
      TraceEvent.V8.ParseOnBackgroundWaiting.X;
  
    type ProduceCache = 
      TraceEvent.V8.ProduceCache.I |
      TraceEvent.V8.ProduceCache.X;
  
    type ProduceModuleCache = 
      TraceEvent.V8.ProduceModuleCache.X;
  
    type Run = 
      TraceEvent.V8.Run.X;
  
    type ScriptCompiler = 
      TraceEvent.V8.ScriptCompiler.B |
      TraceEvent.V8.ScriptCompiler.E |
      TraceEvent.V8.ScriptCompiler.X;
  
    type StackGuard = 
      TraceEvent.V8.StackGuard.X;
  
    type Task = 
      TraceEvent.V8.Task.B |
      TraceEvent.V8.Task.E |
      TraceEvent.V8.Task.X;
  
    namespace BytecodeBudgetInterrupt {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.BytecodeBudgetInterrupt';
        // Denotes an event BytecodeBudgetInterrupt. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.BytecodeBudgetInterrupt';
        // Denotes the end of the event BytecodeBudgetInterrupt.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BytecodeBudgetInterruptWithStackCheck {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.BytecodeBudgetInterruptWithStackCheck';
        // Denotes an event BytecodeBudgetInterruptWithStackCheck. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.BytecodeBudgetInterruptWithStackCheck';
        // Denotes the end of the event BytecodeBudgetInterruptWithStackCheck.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CallAsConstructor {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.callAsConstructor';
        // Denotes the end of the event CallAsConstructor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CallFunction {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.callFunction';
        // Denotes the end of the event CallFunction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Compile {
      interface B extends TraceEvent.Base {
        args: {
          fileName: string;
        };
        name: 'v8.compile';
        // Denotes the beginning of the event Compile.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
          data: {
            cacheConsumeOptions?: string;
            cacheProduceOptions?: string;
            cacheRejected?: boolean;
            columnNumber: number;
            consumedCacheSize?: number;
            lineNumber: number;
            notStreamedReason?: string;
            producedCacheSize?: number;
            streamed: boolean;
            url: string;
          };
        };
        name: 'v8.compile';
        // Denotes the ending of the event Compile.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          data?: {
            cacheConsumeOptions?: string;
            cacheRejected?: boolean;
            columnNumber: number;
            consumedCacheSize?: number;
            lineNumber: number;
            notStreamedReason?: string;
            streamed?: boolean;
            url: string;
          };
          fileName?: string;
        };
        // Duration.
        dur?: number;
        name: 'v8.compile';
        // Denotes the end of the event Compile.
        ph: 'X';
        tdur?: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileModule {
      interface X extends TraceEvent.Base {
        args: {
          data: {
            columnNumber: number;
            lineNumber: number;
            streamed: boolean;
            url: string;
          };
          fileName: string;
        };
        // Duration.
        dur: number;
        name: 'v8.compileModule';
        // Denotes the end of the event CompileModule.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DeoptimizeCode {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.DeoptimizeCode';
        // Denotes the end of the event DeoptimizeCode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DeserializeContext {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.DeserializeContext';
        // Denotes the end of the event DeserializeContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DeserializeIsolate {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.DeserializeIsolate';
        // Denotes the end of the event DeserializeIsolate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EvaluateModule {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.evaluateModule';
        // Denotes the end of the event EvaluateModule.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_ARRAY_BUFFER_SWEEP {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_ARRAY_BUFFER_SWEEP';
        // Denotes the end of the event GC_BACKGROUND_ARRAY_BUFFER_SWEEP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP';
        // Denotes the end of the event GC_BACKGROUND_FULL_ARRAY_BUFFER_SWEEP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_SAFEPOINT {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_SAFEPOINT';
        // Denotes the end of the event GC_BACKGROUND_SAFEPOINT.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_UNMAPPER {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_UNMAPPER';
        // Denotes the end of the event GC_BACKGROUND_UNMAPPER.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_UNPARK {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_UNPARK';
        // Denotes the end of the event GC_BACKGROUND_UNPARK.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP';
        // Denotes the end of the event GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EMBEDDER_TRACING_EPILOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE';
        // Denotes the end of the event GC_HEAP_EMBEDDER_TRACING_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE';
        // Denotes the end of the event GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EPILOGUE_SAFEPOINT {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EPILOGUE_SAFEPOINT';
        // Denotes the end of the event GC_HEAP_EPILOGUE_SAFEPOINT.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EPILOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EPILOGUE';
        // Denotes the end of the event GC_HEAP_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EXTERNAL_EPILOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EXTERNAL_EPILOGUE';
        // Denotes the end of the event GC_HEAP_EXTERNAL_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EXTERNAL_PROLOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EXTERNAL_PROLOGUE';
        // Denotes the end of the event GC_HEAP_EXTERNAL_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES';
        // Denotes an event GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES';
        // Denotes the end of the event GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_PROLOGUE_SAFEPOINT {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.GC_HEAP_PROLOGUE_SAFEPOINT';
        // Denotes an event GC_HEAP_PROLOGUE_SAFEPOINT. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_PROLOGUE_SAFEPOINT';
        // Denotes the end of the event GC_HEAP_PROLOGUE_SAFEPOINT.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_PROLOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_PROLOGUE';
        // Denotes the end of the event GC_HEAP_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MARK_COMPACTOR {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MARK_COMPACTOR';
        // Denotes the end of the event GC_MARK_COMPACTOR.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_EVACUATE_COPY {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_EVACUATE_COPY';
        // Denotes the end of the event GC_MC_BACKGROUND_EVACUATE_COPY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS';
        // Denotes the end of the event GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_MARKING {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_MARKING';
        // Denotes the end of the event GC_MC_BACKGROUND_MARKING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_SWEEPING {
      interface I extends TraceEvent.Base {
        args: {
          epoch: number;
        };
        name: 'V8.GC_MC_BACKGROUND_SWEEPING';
        // Denotes an event GC_MC_BACKGROUND_SWEEPING. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_SWEEPING';
        // Denotes the end of the event GC_MC_BACKGROUND_SWEEPING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_EXTERNAL_STRING_TABLE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_EXTERNAL_STRING_TABLE';
        // Denotes the end of the event GC_MC_CLEAR_EXTERNAL_STRING_TABLE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_FLUSHABLE_BYTECODE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE';
        // Denotes the end of the event GC_MC_CLEAR_FLUSHABLE_BYTECODE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS';
        // Denotes the end of the event GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_JOIN_JOB {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_JOIN_JOB';
        // Denotes the end of the event GC_MC_CLEAR_JOIN_JOB.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_MAPS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_MAPS';
        // Denotes the end of the event GC_MC_CLEAR_MAPS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_STRING_FORWARDING_TABLE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_STRING_FORWARDING_TABLE';
        // Denotes the end of the event GC_MC_CLEAR_STRING_FORWARDING_TABLE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_STRING_TABLE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_STRING_TABLE';
        // Denotes the end of the event GC_MC_CLEAR_STRING_TABLE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_COLLECTIONS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_COLLECTIONS';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_COLLECTIONS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_GLOBAL_HANDLES {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_GLOBAL_HANDLES';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_GLOBAL_HANDLES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_LISTS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_LISTS';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_LISTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_REFERENCES {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_REFERENCES';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_REFERENCES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR';
        // Denotes the end of the event GC_MC_CLEAR.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS';
        // Denotes the end of the event GC_MC_COMPLETE_SWEEP_ARRAY_BUFFERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_COMPLETE_SWEEPING {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_COMPLETE_SWEEPING';
        // Denotes the end of the event GC_MC_COMPLETE_SWEEPING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EPILOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EPILOGUE';
        // Denotes the end of the event GC_MC_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_CLEAN_UP {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_CLEAN_UP';
        // Denotes the end of the event GC_MC_EVACUATE_CLEAN_UP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_COPY_PARALLEL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_COPY_PARALLEL';
        // Denotes the end of the event GC_MC_EVACUATE_COPY_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_COPY {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_COPY';
        // Denotes the end of the event GC_MC_EVACUATE_COPY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_EPILOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_EPILOGUE';
        // Denotes the end of the event GC_MC_EVACUATE_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_PROLOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_PROLOGUE';
        // Denotes the end of the event GC_MC_EVACUATE_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_REBALANCE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_REBALANCE';
        // Denotes the end of the event GC_MC_EVACUATE_REBALANCE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_CLIENT_HEAPS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_CLIENT_HEAPS';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_CLIENT_HEAPS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_WEAK {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_WEAK.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE';
        // Denotes the end of the event GC_MC_EVACUATE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_FINISH_SWEEP_ARRAY_BUFFERS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_FINISH_SWEEP_ARRAY_BUFFERS';
        // Denotes the end of the event GC_MC_FINISH_SWEEP_ARRAY_BUFFERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_FINISH {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_FINISH';
        // Denotes the end of the event GC_MC_FINISH.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE';
        // Denotes the end of the event GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EMBEDDER_TRACING {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING';
        // Denotes the end of the event GC_MC_INCREMENTAL_EMBEDDER_TRACING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE';
        // Denotes the end of the event GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE';
        // Denotes the end of the event GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_FINALIZE_BODY {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_FINALIZE_BODY';
        // Denotes the end of the event GC_MC_INCREMENTAL_FINALIZE_BODY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_FINALIZE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_FINALIZE';
        // Denotes the end of the event GC_MC_INCREMENTAL_FINALIZE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_LAYOUT_CHANGE {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE';
        // Denotes an event GC_MC_INCREMENTAL_LAYOUT_CHANGE. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE';
        // Denotes the end of the event GC_MC_INCREMENTAL_LAYOUT_CHANGE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_START {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_START';
        // Denotes the end of the event GC_MC_INCREMENTAL_START.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_SWEEP_ARRAY_BUFFERS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_SWEEP_ARRAY_BUFFERS';
        // Denotes the end of the event GC_MC_INCREMENTAL_SWEEP_ARRAY_BUFFERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_SWEEPING {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_SWEEPING';
        // Denotes the end of the event GC_MC_INCREMENTAL_SWEEPING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL';
        // Denotes the end of the event GC_MC_INCREMENTAL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_CLIENT_HEAPS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_CLIENT_HEAPS';
        // Denotes the end of the event GC_MC_MARK_CLIENT_HEAPS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_EMBEDDER_TRACING_CLOSURE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE';
        // Denotes the end of the event GC_MC_MARK_EMBEDDER_TRACING_CLOSURE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_EMBEDDER_TRACING {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_EMBEDDER_TRACING';
        // Denotes the end of the event GC_MC_MARK_EMBEDDER_TRACING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_FINISH_INCREMENTAL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_FINISH_INCREMENTAL';
        // Denotes the end of the event GC_MC_MARK_FINISH_INCREMENTAL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_FULL_CLOSURE_PARALLEL_JOIN {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_FULL_CLOSURE_PARALLEL_JOIN';
        // Denotes the end of the event GC_MC_MARK_FULL_CLOSURE_PARALLEL_JOIN.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_FULL_CLOSURE_PARALLEL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_FULL_CLOSURE_PARALLEL';
        // Denotes the end of the event GC_MC_MARK_FULL_CLOSURE_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_FULL_CLOSURE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_FULL_CLOSURE';
        // Denotes the end of the event GC_MC_MARK_FULL_CLOSURE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_MAIN {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_MAIN';
        // Denotes the end of the event GC_MC_MARK_MAIN.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_RETAIN_MAPS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_RETAIN_MAPS';
        // Denotes the end of the event GC_MC_MARK_RETAIN_MAPS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_ROOTS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_ROOTS';
        // Denotes the end of the event GC_MC_MARK_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_EPHEMERON {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_EPHEMERON.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_HARMONY {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_HARMONY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK';
        // Denotes the end of the event GC_MC_MARK.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_PROLOGUE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_PROLOGUE';
        // Denotes the end of the event GC_MC_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_SWEEP_EXTERNAL_POINTER_TABLE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_SWEEP_EXTERNAL_POINTER_TABLE';
        // Denotes the end of the event GC_MC_SWEEP_EXTERNAL_POINTER_TABLE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_SWEEP {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_SWEEP';
        // Denotes the end of the event GC_MC_SWEEP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL';
        // Denotes the end of the event GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS';
        // Denotes the end of the event GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_FREE_REMEMBERED_SET {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_FREE_REMEMBERED_SET';
        // Denotes the end of the event GC_SCAVENGER_FREE_REMEMBERED_SET.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_FINALIZE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_FINALIZE';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_FINALIZE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_PARALLEL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_PARALLEL';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_ROOTS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_ROOTS';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_UPDATE_REFS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_UPDATE_REFS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SWEEP_ARRAY_BUFFERS {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SWEEP_ARRAY_BUFFERS';
        // Denotes the end of the event GC_SCAVENGER_SWEEP_ARRAY_BUFFERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER {
      interface X extends TraceEvent.Base {
        args: {
          epoch: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER';
        // Denotes the end of the event GC_SCAVENGER.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_STOP_THE_WORLD {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_STOP_THE_WORLD';
        // Denotes the end of the event GC_STOP_THE_WORLD.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_TIME_TO_SAFEPOINT {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.GC_TIME_TO_SAFEPOINT';
        // Denotes an event GC_TIME_TO_SAFEPOINT. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_TIME_TO_SAFEPOINT';
        // Denotes the end of the event GC_TIME_TO_SAFEPOINT.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCCompactor {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCCompactor';
        // Denotes the end of the event GCCompactor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCFinalizeMC {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCFinalizeMC';
        // Denotes the end of the event GCFinalizeMC.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCFinalizeMCReduceMemory {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCFinalizeMCReduceMemory';
        // Denotes the end of the event GCFinalizeMCReduceMemory.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIdleNotification {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIdleNotification';
        // Denotes the end of the event GCIdleNotification.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarking {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarking';
        // Denotes the end of the event GCIncrementalMarking.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarkingFinalize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarkingFinalize';
        // Denotes the end of the event GCIncrementalMarkingFinalize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarkingLayoutChange {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarkingLayoutChange';
        // Denotes the end of the event GCIncrementalMarkingLayoutChange.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarkingStart {
      interface X extends TraceEvent.Base {
        args: {
          epoch?: number;
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarkingStart';
        // Denotes the end of the event GCIncrementalMarkingStart.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCPhantomHandleProcessingCallback {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCPhantomHandleProcessingCallback';
        // Denotes the end of the event GCPhantomHandleProcessingCallback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCScavenger {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCScavenger';
        // Denotes the end of the event GCScavenger.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleInterrupts {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.HandleInterrupts';
        // Denotes the end of the event HandleInterrupts.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvokeApiInterruptCallbacks {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.InvokeApiInterruptCallbacks';
        // Denotes the end of the event InvokeApiInterruptCallbacks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IsolateInitialize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.IsolateInitialize';
        // Denotes the end of the event IsolateInitialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NewContext {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.NewContext';
        // Denotes the beginning of the event NewContext.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
          'runtime-call-stats': {
          
          };
        };
        name: 'V8.NewContext';
        // Denotes the ending of the event NewContext.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.NewContext';
        // Denotes the end of the event NewContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NewInstance {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.newInstance';
        // Denotes the end of the event NewInstance.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ParseOnBackground {
      interface X extends TraceEvent.Base {
        args: {
          data: {
            requestId: string;
            url: string;
          };
        };
        bind_id?: string;
        // Duration.
        dur: number;
        flow_in?: boolean;
        flow_out?: boolean;
        id?: string;
        name: 'v8.parseOnBackground';
        // Denotes the end of the event ParseOnBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ParseOnBackgroundParsing {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.parseOnBackgroundParsing';
        // Denotes the end of the event ParseOnBackgroundParsing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ParseOnBackgroundWaiting {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.parseOnBackgroundWaiting';
        // Denotes the end of the event ParseOnBackgroundWaiting.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProduceCache {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'v8.produceCache';
        // Denotes an event ProduceCache. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
          data?: {
            columnNumber: number;
            lineNumber: number;
            producedCacheSize: number;
            url: string;
          };
          fileName?: string;
        };
        // Duration.
        dur: number;
        name: 'v8.produceCache';
        // Denotes the end of the event ProduceCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProduceModuleCache {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.produceModuleCache';
        // Denotes the end of the event ProduceModuleCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Run {
      interface X extends TraceEvent.Base {
        args: {
          fileName?: string;
        };
        // Duration.
        dur: number;
        name: 'v8.run';
        // Denotes the end of the event Run.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScriptCompiler {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.ScriptCompiler';
        // Denotes the beginning of the event ScriptCompiler.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
          'runtime-call-stats': {
          
          };
        };
        name: 'V8.ScriptCompiler';
        // Denotes the ending of the event ScriptCompiler.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.ScriptCompiler';
        // Denotes the end of the event ScriptCompiler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StackGuard {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.StackGuard';
        // Denotes the end of the event StackGuard.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Task {
      interface B extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8.Task';
        // Denotes the beginning of the event Task.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends TraceEvent.Base {
        args: {
          'runtime-call-stats': {
          
          };
        };
        name: 'V8.Task';
        // Denotes the ending of the event Task.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Task';
        // Denotes the end of the event Task.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace V8ConsoleMessage {
    type Exception = 
      TraceEvent.V8ConsoleMessage.Exception.I;
  
    namespace Exception {
      interface I extends TraceEvent.Base {
        args: {
        
        };
        name: 'V8ConsoleMessage::Exception';
        // Denotes an event Exception. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace V8ContextSnapshot {
    type InstallRuntimeEnabled = 
      TraceEvent.V8ContextSnapshot.InstallRuntimeEnabled.X;
  
    namespace InstallRuntimeEnabled {
      interface X extends TraceEvent.Base {
        args: {
          IsMainFrame: boolean;
        };
        // Duration.
        dur: number;
        name: 'V8ContextSnapshot::InstallRuntimeEnabled';
        // Denotes the end of the event InstallRuntimeEnabled.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace V8PerIsolateData {
    type Initialize = 
      TraceEvent.V8PerIsolateData.Initialize.X;
  
    namespace Initialize {
      interface X extends TraceEvent.Base {
        args: {
          V8ContextSnapshotMode: number;
        };
        // Duration.
        dur: number;
        name: 'V8PerIsolateData::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace View {
    type Layout = 
      TraceEvent.View.Layout.X;
  
    type Layoutbounds_changed = 
      TraceEvent.View.Layoutbounds_changed.X;
  
    type Layoutset_bounds = 
      TraceEvent.View.Layoutset_bounds.X;
  
    type OnPaint = 
      TraceEvent.View.OnPaint.X;
  
    type OnPaintBackground = 
      TraceEvent.View.OnPaintBackground.X;
  
    type OnPaintBorder = 
      TraceEvent.View.OnPaintBorder.X;
  
    type Paint = 
      TraceEvent.View.Paint.X;
  
    type PaintChildren = 
      TraceEvent.View.PaintChildren.X;
  
    namespace Layout {
      interface X extends TraceEvent.Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Layoutbounds_changed {
      interface X extends TraceEvent.Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Layout(bounds_changed)';
        // Denotes the end of the event Layoutbounds_changed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Layoutset_bounds {
      interface X extends TraceEvent.Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Layout(set_bounds)';
        // Denotes the end of the event Layoutset_bounds.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnPaint {
      interface X extends TraceEvent.Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::OnPaint';
        // Denotes the end of the event OnPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnPaintBackground {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'View::OnPaintBackground';
        // Denotes the end of the event OnPaintBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnPaintBorder {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'View::OnPaintBorder';
        // Denotes the end of the event OnPaintBorder.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Paint {
      interface X extends TraceEvent.Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Paint';
        // Denotes the end of the event Paint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PaintChildren {
      interface X extends TraceEvent.Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::PaintChildren';
        // Denotes the end of the event PaintChildren.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Viewport {
    interface I extends TraceEvent.Base {
      args: {
        data: {
          frameID: string;
          height: number;
          isActive?: boolean;
          width: number;
          x: number;
          y: number;
        };
      };
      name: 'viewport';
      // Denotes an event Viewport. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace VisibleUnits {
    type CanonicalPosition = 
      TraceEvent.VisibleUnits.CanonicalPosition.X;
  
    type MostBackwardCaretPosition = 
      TraceEvent.VisibleUnits.MostBackwardCaretPosition.X;
  
    type MostForwardCaretPosition = 
      TraceEvent.VisibleUnits.MostForwardCaretPosition.X;
  
    namespace CanonicalPosition {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisibleUnits::canonicalPosition';
        // Denotes the end of the event CanonicalPosition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MostBackwardCaretPosition {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisibleUnits::mostBackwardCaretPosition';
        // Denotes the end of the event MostBackwardCaretPosition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MostForwardCaretPosition {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisibleUnits::mostForwardCaretPosition';
        // Denotes the end of the event MostForwardCaretPosition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Visitedlink {
    namespace Mojom {
      type VisitedLinkNotificationSink = 
        TraceEvent.Visitedlink.Mojom.VisitedLinkNotificationSink.X;
    
      namespace VisitedLinkNotificationSink {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'visitedlink.mojom.VisitedLinkNotificationSink';
          // Denotes the end of the event VisitedLinkNotificationSink.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace VisitedLinkWriter {
    type AddURL = 
      TraceEvent.VisitedLinkWriter.AddURL.X;
  
    type AddURLs = 
      TraceEvent.VisitedLinkWriter.AddURLs.X;
  
    namespace AddURL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisitedLinkWriter::AddURL';
        // Denotes the end of the event AddURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AddURLs {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisitedLinkWriter::AddURLs';
        // Denotes the end of the event AddURLs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace VisuallyComplete100 {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'Visually Complete 100%';
      // Denotes the beginning of the nestable async flow event VisuallyComplete100.
      ph: 'b';
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'Visually Complete 100%';
      // Denotes a step into the nestable async flow event VisuallyComplete100.
      ph: 'e';
    }
  }

  namespace VisualViewport {
    type MainFrameDidChangeSize = 
      TraceEvent.VisualViewport.MainFrameDidChangeSize.X;
  
    type SetSize = 
      TraceEvent.VisualViewport.SetSize.X;
  
    namespace MainFrameDidChangeSize {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisualViewport::mainFrameDidChangeSize';
        // Denotes the end of the event MainFrameDidChangeSize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSize {
      interface X extends TraceEvent.Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'VisualViewport::setSize';
        // Denotes the end of the event SetSize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Viz {
    namespace Mojom {
      type CompositingModeReporter = 
        TraceEvent.Viz.Mojom.CompositingModeReporter.X;
    
      type CompositorFrameSink = 
        TraceEvent.Viz.Mojom.CompositorFrameSink.X;
    
      type CompositorFrameSinkClient = 
        TraceEvent.Viz.Mojom.CompositorFrameSinkClient.X;
    
      type DisplayClient = 
        TraceEvent.Viz.Mojom.DisplayClient.X;
    
      type FrameSinkManager = 
        TraceEvent.Viz.Mojom.FrameSinkManager.X;
    
      type FrameSinkManagerClient = 
        TraceEvent.Viz.Mojom.FrameSinkManagerClient.X;
    
      type Gpu = 
        TraceEvent.Viz.Mojom.Gpu.X;
    
      type GpuHost = 
        TraceEvent.Viz.Mojom.GpuHost.X;
    
      type GpuMemoryBufferFactory = 
        TraceEvent.Viz.Mojom.GpuMemoryBufferFactory.X;
    
      type GpuService = 
        TraceEvent.Viz.Mojom.GpuService.X;
    
      type InputTargetClient = 
        TraceEvent.Viz.Mojom.InputTargetClient.X;
    
      namespace CompositingModeReporter {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.CompositingModeReporter';
          // Denotes the end of the event CompositingModeReporter.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CompositorFrameSink {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.CompositorFrameSink';
          // Denotes the end of the event CompositorFrameSink.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CompositorFrameSinkClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.CompositorFrameSinkClient';
          // Denotes the end of the event CompositorFrameSinkClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace DisplayClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.DisplayClient';
          // Denotes the end of the event DisplayClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameSinkManager {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.FrameSinkManager';
          // Denotes the end of the event FrameSinkManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameSinkManagerClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.FrameSinkManagerClient';
          // Denotes the end of the event FrameSinkManagerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Gpu {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.Gpu';
          // Denotes the end of the event Gpu.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace GpuHost {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.GpuHost';
          // Denotes the end of the event GpuHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace GpuMemoryBufferFactory {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.GpuMemoryBufferFactory';
          // Denotes the end of the event GpuMemoryBufferFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace GpuService {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.GpuService';
          // Denotes the end of the event GpuService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace InputTargetClient {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.InputTargetClient';
          // Denotes the end of the event InputTargetClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace WaitingfornextBeginFrame {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'Waiting for next BeginFrame';
      // Denotes an event WaitingfornextBeginFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WaitingForRendererResponse {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WaitingForRendererResponse';
      // Denotes the beginning of the nestable async flow event WaitingForRendererResponse.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WaitingForRendererResponse';
      // Denotes a step into the nestable async flow event WaitingForRendererResponse.
      ph: 'e';
      scope: string;
    }
  }

  namespace Web_cache {
    namespace Mojom {
      type WebCache = 
        TraceEvent.Web_cache.Mojom.WebCache.X;
    
      namespace WebCache {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'web_cache.mojom.WebCache';
          // Denotes the end of the event WebCache.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace WebCoalescedInputEvent {
    type CoalesceWith = 
      TraceEvent.WebCoalescedInputEvent.CoalesceWith.X;
  
    namespace CoalesceWith {
      interface X extends TraceEvent.Base {
        args: {
          coalescedTraceId: number;
          traceId: number;
        };
        // Duration.
        dur: number;
        name: 'WebCoalescedInputEvent::CoalesceWith';
        // Denotes the end of the event CoalesceWith.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebContentsImpl {
    type AddReceiverSet = 
      TraceEvent.WebContentsImpl.AddReceiverSet.X;
  
    type AXTreeIDForMainFrameHasChanged = 
      TraceEvent.WebContentsImpl.AXTreeIDForMainFrameHasChanged.X;
  
    type CancelActiveAndPendingDialogs = 
      TraceEvent.WebContentsImpl.CancelActiveAndPendingDialogs.X;
  
    type CancelKeyboardLockRequest = 
      TraceEvent.WebContentsImpl.CancelKeyboardLockRequest.X;
  
    type CancelModalDialogsForRenderManager = 
      TraceEvent.WebContentsImpl.CancelModalDialogsForRenderManager.X;
  
    type CanOverscrollContent = 
      TraceEvent.WebContentsImpl.CanOverscrollContent.X;
  
    type ClearTargetURL = 
      TraceEvent.WebContentsImpl.ClearTargetURL.X;
  
    type ComputeWebPreferences = 
      TraceEvent.WebContentsImpl.ComputeWebPreferences.X;
  
    type CreateRenderViewForRenderManager = 
      TraceEvent.WebContentsImpl.CreateRenderViewForRenderManager.X;
  
    type CreateRenderWidgetHostViewForRenderManager = 
      TraceEvent.WebContentsImpl.CreateRenderWidgetHostViewForRenderManager.X;
  
    type CreateThrottlesForNavigation = 
      TraceEvent.WebContentsImpl.CreateThrottlesForNavigation.X;
  
    type CreateWithOpener = 
      TraceEvent.WebContentsImpl.CreateWithOpener.X;
  
    type DidAddMessageToConsole = 
      TraceEvent.WebContentsImpl.DidAddMessageToConsole.X;
  
    type DidChangeLoadProgress = 
      TraceEvent.WebContentsImpl.DidChangeLoadProgress.X;
  
    type DidChangeVisibleSecurityState = 
      TraceEvent.WebContentsImpl.DidChangeVisibleSecurityState.X;
  
    type DidFinishNavigation = 
      TraceEvent.WebContentsImpl.DidFinishNavigation.X;
  
    type DidFirstVisuallyNonEmptyPaint = 
      TraceEvent.WebContentsImpl.DidFirstVisuallyNonEmptyPaint.X;
  
    type DidNavigateAnyFramePostCommit = 
      TraceEvent.WebContentsImpl.DidNavigateAnyFramePostCommit.X;
  
    type DidNavigateMainFramePostCommit = 
      TraceEvent.WebContentsImpl.DidNavigateMainFramePostCommit.X;
  
    type DidNavigateMainFramePreCommit = 
      TraceEvent.WebContentsImpl.DidNavigateMainFramePreCommit.X;
  
    type DidReceiveInputEvent = 
      TraceEvent.WebContentsImpl.DidReceiveInputEvent.X;
  
    type DidStartLoading = 
      TraceEvent.WebContentsImpl.DidStartLoading.X;
  
    type DidStartNavigation = 
      TraceEvent.WebContentsImpl.DidStartNavigation.X;
  
    type DidStopLoading = 
      TraceEvent.WebContentsImpl.DidStopLoading.X;
  
    type DocumentAvailableInMainFrame = 
      TraceEvent.WebContentsImpl.DocumentAvailableInMainFrame.X;
  
    type DocumentOnLoadCompleted = 
      TraceEvent.WebContentsImpl.DocumentOnLoadCompleted.X;
  
    type DOMContentLoaded = 
      TraceEvent.WebContentsImpl.DOMContentLoaded.X;
  
    type Focus = 
      TraceEvent.WebContentsImpl.Focus.X;
  
    type FocusLocationBarByDefault = 
      TraceEvent.WebContentsImpl.FocusLocationBarByDefault.X;
  
    type FocusOwningWebContents = 
      TraceEvent.WebContentsImpl.FocusOwningWebContents.X;
  
    type FrameSizeChanged = 
      TraceEvent.WebContentsImpl.FrameSizeChanged.X;
  
    type FullscreenStateChanged = 
      TraceEvent.WebContentsImpl.FullscreenStateChanged.X;
  
    type GetManifest = 
      TraceEvent.WebContentsImpl.GetManifest.X;
  
    type GetNavigationUIData = 
      TraceEvent.WebContentsImpl.GetNavigationUIData.X;
  
    type GetOrCreateWebPreferences = 
      TraceEvent.WebContentsImpl.GetOrCreateWebPreferences.X;
  
    type Init = 
      TraceEvent.WebContentsImpl.Init.X;
  
    type LoadingStateChanged = 
      TraceEvent.WebContentsImpl.LoadingStateChanged.X;
  
    type LoadStateChanged = 
      TraceEvent.WebContentsImpl.LoadStateChanged.X;
  
    type NotifyFrameSwapped = 
      TraceEvent.WebContentsImpl.NotifyFrameSwapped.X;
  
    type NotifyNavigationEntryChanged = 
      TraceEvent.WebContentsImpl.NotifyNavigationEntryChanged.X;
  
    type NotifyNavigationEntryCommitted = 
      TraceEvent.WebContentsImpl.NotifyNavigationEntryCommitted.X;
  
    type NotifyNavigationStateChanged = 
      TraceEvent.WebContentsImpl.NotifyNavigationStateChanged.X;
  
    type NotifySwappedFromRenderManager = 
      TraceEvent.WebContentsImpl.NotifySwappedFromRenderManager.X;
  
    type NotifyViewSwapped = 
      TraceEvent.WebContentsImpl.NotifyViewSwapped.X;
  
    type NotifyWebContentsFocused = 
      TraceEvent.WebContentsImpl.NotifyWebContentsFocused.X;
  
    type NotifyWebContentsLostFocus = 
      TraceEvent.WebContentsImpl.NotifyWebContentsLostFocus.X;
  
    type Observe = 
      TraceEvent.WebContentsImpl.Observe.X;
  
    type OnAssociatedInterfaceRequest = 
      TraceEvent.WebContentsImpl.OnAssociatedInterfaceRequest.X;
  
    type OnCookiesAccessed = 
      TraceEvent.WebContentsImpl.OnCookiesAccessed.X;
  
    type OnDidFinishLoad = 
      TraceEvent.WebContentsImpl.OnDidFinishLoad.X;
  
    type OnFocusedElementChangedInFrame = 
      TraceEvent.WebContentsImpl.OnFocusedElementChangedInFrame.X;
  
    type OnMessageReceived = 
      TraceEvent.WebContentsImpl.OnMessageReceived.X;
  
    type OnServiceWorkerAccessed = 
      TraceEvent.WebContentsImpl.OnServiceWorkerAccessed.X;
  
    type OnTextAutosizerPageInfoChanged = 
      TraceEvent.WebContentsImpl.OnTextAutosizerPageInfoChanged.X;
  
    type OnWebPreferencesChanged = 
      TraceEvent.WebContentsImpl.OnWebPreferencesChanged.X;
  
    type ReadyToCommitNavigation = 
      TraceEvent.WebContentsImpl.ReadyToCommitNavigation.X;
  
    type RemoveBrowserPluginEmbedder = 
      TraceEvent.WebContentsImpl.RemoveBrowserPluginEmbedder.X;
  
    type RenderFrameCreated = 
      TraceEvent.WebContentsImpl.RenderFrameCreated.X;
  
    type RenderFrameDeleted = 
      TraceEvent.WebContentsImpl.RenderFrameDeleted.X;
  
    type RenderFrameHostStateChanged = 
      TraceEvent.WebContentsImpl.RenderFrameHostStateChanged.X;
  
    type RenderViewCreated = 
      TraceEvent.WebContentsImpl.RenderViewCreated.X;
  
    type RenderViewDeleted = 
      TraceEvent.WebContentsImpl.RenderViewDeleted.X;
  
    type RenderViewReady = 
      TraceEvent.WebContentsImpl.RenderViewReady.X;
  
    type RenderWidgetCreated = 
      TraceEvent.WebContentsImpl.RenderWidgetCreated.X;
  
    type RenderWidgetDeleted = 
      TraceEvent.WebContentsImpl.RenderWidgetDeleted.X;
  
    type RenderWidgetGotFocus = 
      TraceEvent.WebContentsImpl.RenderWidgetGotFocus.X;
  
    type RenderWidgetLostFocus = 
      TraceEvent.WebContentsImpl.RenderWidgetLostFocus.X;
  
    type RenderWidgetWasResized = 
      TraceEvent.WebContentsImpl.RenderWidgetWasResized.X;
  
    type ReplicatePageFocus = 
      TraceEvent.WebContentsImpl.ReplicatePageFocus.X;
  
    type ResetLoadProgressState = 
      TraceEvent.WebContentsImpl.ResetLoadProgressState.X;
  
    type ResourceLoadComplete = 
      TraceEvent.WebContentsImpl.ResourceLoadComplete.X;
  
    type RestoreFocus = 
      TraceEvent.WebContentsImpl.RestoreFocus.X;
  
    type SendChangeLoadProgress = 
      TraceEvent.WebContentsImpl.SendChangeLoadProgress.X;
  
    type SendScreenRects = 
      TraceEvent.WebContentsImpl.SendScreenRects.X;
  
    type SendToAllFrames = 
      TraceEvent.WebContentsImpl.SendToAllFrames.X;
  
    type SetAsFocusedWebContentsIfNecessary = 
      TraceEvent.WebContentsImpl.SetAsFocusedWebContentsIfNecessary.X;
  
    type SetDelegate = 
      TraceEvent.WebContentsImpl.SetDelegate.X;
  
    type SetFocusedFrame = 
      TraceEvent.WebContentsImpl.SetFocusedFrame.X;
  
    type SetFocusToLocationBar = 
      TraceEvent.WebContentsImpl.SetFocusToLocationBar.X;
  
    type SetHistoryOffsetAndLengthForView = 
      TraceEvent.WebContentsImpl.SetHistoryOffsetAndLengthForView.X;
  
    type SetInitialFocus = 
      TraceEvent.WebContentsImpl.SetInitialFocus.X;
  
    type SetIsCrashed = 
      TraceEvent.WebContentsImpl.SetIsCrashed.X;
  
    type SetNotWaitingForResponse = 
      TraceEvent.WebContentsImpl.SetNotWaitingForResponse.X;
  
    type SetOpenerForNewContents = 
      TraceEvent.WebContentsImpl.SetOpenerForNewContents.X;
  
    type SetSlowWebPreferences = 
      TraceEvent.WebContentsImpl.SetSlowWebPreferences.X;
  
    type SetVisibilityAndNotifyObservers = 
      TraceEvent.WebContentsImpl.SetVisibilityAndNotifyObservers.X;
  
    type SetVisibilityForChildViews = 
      TraceEvent.WebContentsImpl.SetVisibilityForChildViews.X;
  
    type SetWebPreferences = 
      TraceEvent.WebContentsImpl.SetWebPreferences.X;
  
    type ShowInsecureLocalhostWarningIfNeeded = 
      TraceEvent.WebContentsImpl.ShowInsecureLocalhostWarningIfNeeded.X;
  
    type StoreFocus = 
      TraceEvent.WebContentsImpl.StoreFocus.X;
  
    type SubresourceResponseStarted = 
      TraceEvent.WebContentsImpl.SubresourceResponseStarted.X;
  
    type UnsafeFindFrameByFrameTreeNodeId = 
      TraceEvent.WebContentsImpl.UnsafeFindFrameByFrameTreeNodeId.X;
  
    type UpdateFaviconURL = 
      TraceEvent.WebContentsImpl.UpdateFaviconURL.X;
  
    type UpdateStateForFrame = 
      TraceEvent.WebContentsImpl.UpdateStateForFrame.X;
  
    type UpdateTargetURL = 
      TraceEvent.WebContentsImpl.UpdateTargetURL.X;
  
    type UpdateTitle = 
      TraceEvent.WebContentsImpl.UpdateTitle.X;
  
    type UpdateTitleForEntry = 
      TraceEvent.WebContentsImpl.UpdateTitleForEntry.X;
  
    type UpdateVisibilityAndNotifyPageAndView = 
      TraceEvent.WebContentsImpl.UpdateVisibilityAndNotifyPageAndView.X;
  
    type UpdateWebContentsVisibility = 
      TraceEvent.WebContentsImpl.UpdateWebContentsVisibility.X;
  
    type WasShown = 
      TraceEvent.WebContentsImpl.WasShown.X;
  
    type WebContentsImpl = 
      TraceEvent.WebContentsImpl.WebContentsImpl.X;
  
    namespace AddReceiverSet {
      interface X extends TraceEvent.Base {
        args: {
          interface_name: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::AddReceiverSet';
        // Denotes the end of the event AddReceiverSet.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AXTreeIDForMainFrameHasChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::AXTreeIDForMainFrameHasChanged';
        // Denotes the end of the event AXTreeIDForMainFrameHasChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CancelActiveAndPendingDialogs {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CancelActiveAndPendingDialogs';
        // Denotes the end of the event CancelActiveAndPendingDialogs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CancelKeyboardLockRequest {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CancelKeyboardLockRequest';
        // Denotes the end of the event CancelKeyboardLockRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CancelModalDialogsForRenderManager {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CancelModalDialogsForRenderManager';
        // Denotes the end of the event CancelModalDialogsForRenderManager.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CanOverscrollContent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CanOverscrollContent';
        // Denotes the end of the event CanOverscrollContent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ClearTargetURL {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ClearTargetURL';
        // Denotes the end of the event ClearTargetURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ComputeWebPreferences {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ComputeWebPreferences';
        // Denotes the end of the event ComputeWebPreferences.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateRenderViewForRenderManager {
      interface X extends TraceEvent.Base {
        args: {
          render_view_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateRenderViewForRenderManager';
        // Denotes the end of the event CreateRenderViewForRenderManager.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateRenderWidgetHostViewForRenderManager {
      interface X extends TraceEvent.Base {
        args: {
          render_view_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateRenderWidgetHostViewForRenderManager';
        // Denotes the end of the event CreateRenderWidgetHostViewForRenderManager.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateThrottlesForNavigation {
      interface X extends TraceEvent.Base {
        args: {
          navigation: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateThrottlesForNavigation';
        // Denotes the end of the event CreateThrottlesForNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateWithOpener {
      interface X extends TraceEvent.Base {
        args: {
          opener: {
            this: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateWithOpener';
        // Denotes the end of the event CreateWithOpener.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidAddMessageToConsole {
      interface X extends TraceEvent.Base {
        args: {
          message: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidAddMessageToConsole';
        // Denotes the end of the event DidAddMessageToConsole.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidChangeLoadProgress {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidChangeLoadProgress';
        // Denotes the end of the event DidChangeLoadProgress.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidChangeVisibleSecurityState {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidChangeVisibleSecurityState';
        // Denotes the end of the event DidChangeVisibleSecurityState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishNavigation {
      interface X extends TraceEvent.Base {
        args: {
          navigation_handle: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidFinishNavigation';
        // Denotes the end of the event DidFinishNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFirstVisuallyNonEmptyPaint {
      interface X extends TraceEvent.Base {
        args: {
          render_view_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidFirstVisuallyNonEmptyPaint';
        // Denotes the end of the event DidFirstVisuallyNonEmptyPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidNavigateAnyFramePostCommit {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidNavigateAnyFramePostCommit';
        // Denotes the end of the event DidNavigateAnyFramePostCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidNavigateMainFramePostCommit {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidNavigateMainFramePostCommit';
        // Denotes the end of the event DidNavigateMainFramePostCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidNavigateMainFramePreCommit {
      interface X extends TraceEvent.Base {
        args: {
          navigation_is_within_page: boolean;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidNavigateMainFramePreCommit';
        // Denotes the end of the event DidNavigateMainFramePreCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidReceiveInputEvent {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidReceiveInputEvent';
        // Denotes the end of the event DidReceiveInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartLoading {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidStartLoading';
        // Denotes the end of the event DidStartLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartNavigation {
      interface X extends TraceEvent.Base {
        args: {
          navigation_handle: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidStartNavigation';
        // Denotes the end of the event DidStartNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStopLoading {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidStopLoading';
        // Denotes the end of the event DidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DocumentAvailableInMainFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DocumentAvailableInMainFrame';
        // Denotes the end of the event DocumentAvailableInMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DocumentOnLoadCompleted {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DocumentOnLoadCompleted';
        // Denotes the end of the event DocumentOnLoadCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DOMContentLoaded {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DOMContentLoaded';
        // Denotes the end of the event DOMContentLoaded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Focus {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::Focus';
        // Denotes the end of the event Focus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FocusLocationBarByDefault {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::FocusLocationBarByDefault';
        // Denotes the end of the event FocusLocationBarByDefault.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FocusOwningWebContents {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::FocusOwningWebContents';
        // Denotes the end of the event FocusOwningWebContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FrameSizeChanged {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::FrameSizeChanged';
        // Denotes the end of the event FrameSizeChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FullscreenStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          is_fullscreen: boolean;
          render_frame_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::FullscreenStateChanged';
        // Denotes the end of the event FullscreenStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetManifest {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::GetManifest';
        // Denotes the end of the event GetManifest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetNavigationUIData {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::GetNavigationUIData';
        // Denotes the end of the event GetNavigationUIData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetOrCreateWebPreferences {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::GetOrCreateWebPreferences';
        // Denotes the end of the event GetOrCreateWebPreferences.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Init {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::Init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LoadingStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          is_loading: boolean;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::LoadingStateChanged';
        // Denotes the end of the event LoadingStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LoadStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          host: string;
          load_state: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::LoadStateChanged';
        // Denotes the end of the event LoadStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyFrameSwapped {
      interface X extends TraceEvent.Base {
        args: {
          new_frame: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          old_frame: {
            browsing_instance_id?: number;
            frame_tree_node_id?: number;
            lifecycle_state?: string;
            origin?: string;
            process_id?: number;
            render_frame_id?: number;
            site_instance_id?: number;
            this: string;
            url?: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyFrameSwapped';
        // Denotes the end of the event NotifyFrameSwapped.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyNavigationEntryChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyNavigationEntryChanged';
        // Denotes the end of the event NotifyNavigationEntryChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyNavigationEntryCommitted {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyNavigationEntryCommitted';
        // Denotes the end of the event NotifyNavigationEntryCommitted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyNavigationStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          changed_flags: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyNavigationStateChanged';
        // Denotes the end of the event NotifyNavigationStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifySwappedFromRenderManager {
      interface X extends TraceEvent.Base {
        args: {
          new_render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          old_render_frame_host: {
            browsing_instance_id?: number;
            frame_tree_node_id?: number;
            lifecycle_state?: string;
            origin?: string;
            process_id?: number;
            render_frame_id?: number;
            site_instance_id?: number;
            this: string;
            url?: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifySwappedFromRenderManager';
        // Denotes the end of the event NotifySwappedFromRenderManager.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyViewSwapped {
      interface X extends TraceEvent.Base {
        args: {
          new_view: string;
          old_view: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyViewSwapped';
        // Denotes the end of the event NotifyViewSwapped.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyWebContentsFocused {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyWebContentsFocused';
        // Denotes the end of the event NotifyWebContentsFocused.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyWebContentsLostFocus {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::NotifyWebContentsLostFocus';
        // Denotes the end of the event NotifyWebContentsLostFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Observe {
      interface X extends TraceEvent.Base {
        args: {
          type: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::Observe';
        // Denotes the end of the event Observe.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnAssociatedInterfaceRequest {
      interface X extends TraceEvent.Base {
        args: {
          interface_name: string;
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnAssociatedInterfaceRequest';
        // Denotes the end of the event OnAssociatedInterfaceRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCookiesAccessed {
      interface X extends TraceEvent.Base {
        args: {
          navigation_handle?: string;
          render_frame_host?: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              parent?: {
                browsing_instance_id: number;
                frame_tree_node_id: number;
                lifecycle_state: string;
                origin: string;
                process_id: number;
                render_frame_id: number;
                site_instance_id: number;
                this: string;
                url: string;
              };
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnCookiesAccessed';
        // Denotes the end of the event OnCookiesAccessed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDidFinishLoad {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          url: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnDidFinishLoad';
        // Denotes the end of the event OnDidFinishLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnFocusedElementChangedInFrame {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnFocusedElementChangedInFrame';
        // Denotes the end of the event OnFocusedElementChangedInFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnMessageReceived {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnMessageReceived';
        // Denotes the end of the event OnMessageReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnServiceWorkerAccessed {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          scope: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnServiceWorkerAccessed';
        // Denotes the end of the event OnServiceWorkerAccessed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnTextAutosizerPageInfoChanged {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnTextAutosizerPageInfoChanged';
        // Denotes the end of the event OnTextAutosizerPageInfoChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnWebPreferencesChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::OnWebPreferencesChanged';
        // Denotes the end of the event OnWebPreferencesChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadyToCommitNavigation {
      interface X extends TraceEvent.Base {
        args: {
          navigation_handle: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ReadyToCommitNavigation';
        // Denotes the end of the event ReadyToCommitNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RemoveBrowserPluginEmbedder {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RemoveBrowserPluginEmbedder';
        // Denotes the end of the event RemoveBrowserPluginEmbedder.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderFrameCreated {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderFrameCreated';
        // Denotes the end of the event RenderFrameCreated.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderFrameDeleted {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderFrameDeleted';
        // Denotes the end of the event RenderFrameDeleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderFrameHostStateChanged {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          states: {
            new: string;
            old: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderFrameHostStateChanged';
        // Denotes the end of the event RenderFrameHostStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderViewCreated {
      interface X extends TraceEvent.Base {
        args: {
          render_view_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderViewCreated';
        // Denotes the end of the event RenderViewCreated.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderViewDeleted {
      interface X extends TraceEvent.Base {
        args: {
          render_view_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderViewDeleted';
        // Denotes the end of the event RenderViewDeleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderViewReady {
      interface X extends TraceEvent.Base {
        args: {
          render_view_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderViewReady';
        // Denotes the end of the event RenderViewReady.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderWidgetCreated {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderWidgetCreated';
        // Denotes the end of the event RenderWidgetCreated.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderWidgetDeleted {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderWidgetDeleted';
        // Denotes the end of the event RenderWidgetDeleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderWidgetGotFocus {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderWidgetGotFocus';
        // Denotes the end of the event RenderWidgetGotFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderWidgetLostFocus {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderWidgetLostFocus';
        // Denotes the end of the event RenderWidgetLostFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RenderWidgetWasResized {
      interface X extends TraceEvent.Base {
        args: {
          render_widget_host: string;
          width_changed: boolean;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RenderWidgetWasResized';
        // Denotes the end of the event RenderWidgetWasResized.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReplicatePageFocus {
      interface X extends TraceEvent.Base {
        args: {
          is_focused: boolean;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ReplicatePageFocus';
        // Denotes the end of the event ReplicatePageFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ResetLoadProgressState {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ResetLoadProgressState';
        // Denotes the end of the event ResetLoadProgressState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ResourceLoadComplete {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            parent?: {
              browsing_instance_id: number;
              frame_tree_node_id: number;
              lifecycle_state: string;
              origin: string;
              process_id: number;
              render_frame_id: number;
              site_instance_id: number;
              this: string;
              url: string;
            };
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          request_id: {
            child_id: number;
            request_id: number;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ResourceLoadComplete';
        // Denotes the end of the event ResourceLoadComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RestoreFocus {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::RestoreFocus';
        // Denotes the end of the event RestoreFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendChangeLoadProgress {
      interface X extends TraceEvent.Base {
        args: {
          load_progress: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SendChangeLoadProgress';
        // Denotes the end of the event SendChangeLoadProgress.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendScreenRects {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SendScreenRects';
        // Denotes the end of the event SendScreenRects.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendToAllFrames {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SendToAllFrames';
        // Denotes the end of the event SendToAllFrames.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetAsFocusedWebContentsIfNecessary {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetAsFocusedWebContentsIfNecessary';
        // Denotes the end of the event SetAsFocusedWebContentsIfNecessary.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetDelegate {
      interface X extends TraceEvent.Base {
        args: {
          delegate: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetDelegate';
        // Denotes the end of the event SetDelegate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetFocusedFrame {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node: string;
          source_site_instance: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetFocusedFrame';
        // Denotes the end of the event SetFocusedFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetFocusToLocationBar {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetFocusToLocationBar';
        // Denotes the end of the event SetFocusToLocationBar.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetHistoryOffsetAndLengthForView {
      interface X extends TraceEvent.Base {
        args: {
          history_length: number;
          history_offset: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetHistoryOffsetAndLengthForView';
        // Denotes the end of the event SetHistoryOffsetAndLengthForView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetInitialFocus {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetInitialFocus';
        // Denotes the end of the event SetInitialFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetIsCrashed {
      interface X extends TraceEvent.Base {
        args: {
          old_status: number;
          status: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetIsCrashed';
        // Denotes the end of the event SetIsCrashed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNotWaitingForResponse {
      interface X extends TraceEvent.Base {
        args: {
          was_waiting_for_response: boolean;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetNotWaitingForResponse';
        // Denotes the end of the event SetNotWaitingForResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetOpenerForNewContents {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetOpenerForNewContents';
        // Denotes the end of the event SetOpenerForNewContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSlowWebPreferences {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetSlowWebPreferences';
        // Denotes the end of the event SetSlowWebPreferences.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisibilityAndNotifyObservers {
      interface X extends TraceEvent.Base {
        args: {
          visibility: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetVisibilityAndNotifyObservers';
        // Denotes the end of the event SetVisibilityAndNotifyObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisibilityForChildViews {
      interface X extends TraceEvent.Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetVisibilityForChildViews';
        // Denotes the end of the event SetVisibilityForChildViews.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetWebPreferences {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SetWebPreferences';
        // Denotes the end of the event SetWebPreferences.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShowInsecureLocalhostWarningIfNeeded {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ShowInsecureLocalhostWarningIfNeeded';
        // Denotes the end of the event ShowInsecureLocalhostWarningIfNeeded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StoreFocus {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::StoreFocus';
        // Denotes the end of the event StoreFocus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SubresourceResponseStarted {
      interface X extends TraceEvent.Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::SubresourceResponseStarted';
        // Denotes the end of the event SubresourceResponseStarted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnsafeFindFrameByFrameTreeNodeId {
      interface X extends TraceEvent.Base {
        args: {
          frame_tree_node_id: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UnsafeFindFrameByFrameTreeNodeId';
        // Denotes the end of the event UnsafeFindFrameByFrameTreeNodeId.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateFaviconURL {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateFaviconURL';
        // Denotes the end of the event UpdateFaviconURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStateForFrame {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateStateForFrame';
        // Denotes the end of the event UpdateStateForFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTargetURL {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          url: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateTargetURL';
        // Denotes the end of the event UpdateTargetURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTitle {
      interface X extends TraceEvent.Base {
        args: {
          render_frame_host: {
            browsing_instance_id: number;
            frame_tree_node_id: number;
            lifecycle_state: string;
            origin: string;
            process_id: number;
            render_frame_id: number;
            site_instance_id: number;
            this: string;
            url: string;
          };
          title: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateTitle';
        // Denotes the end of the event UpdateTitle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTitleForEntry {
      interface X extends TraceEvent.Base {
        args: {
          title: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateTitleForEntry';
        // Denotes the end of the event UpdateTitleForEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateVisibilityAndNotifyPageAndView {
      interface X extends TraceEvent.Base {
        args: {
          new_visibility: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateVisibilityAndNotifyPageAndView';
        // Denotes the end of the event UpdateVisibilityAndNotifyPageAndView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateWebContentsVisibility {
      interface X extends TraceEvent.Base {
        args: {
          visibility: number;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::UpdateWebContentsVisibility';
        // Denotes the end of the event UpdateWebContentsVisibility.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasShown {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::WasShown';
        // Denotes the end of the event WasShown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WebContentsImpl {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::WebContentsImpl';
        // Denotes the end of the event WebContentsImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebContentsImplLoading {
    interface F extends TraceEvent.Base {
      args: {
        URL: string;
      };
      id2: {
        local: string;
      };
      name: 'WebContentsImpl Loading';
      // Denotes the ending of the async event WebContentsImplLoading.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends TraceEvent.Base {
      args: {
        'Main FrameTreeNode id': number;
        URL: string;
      };
      id2: {
        local: string;
      };
      name: 'WebContentsImpl Loading';
      // Denotes the beginning of the async event WebContentsImplLoading.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WebLocalFrameImpl {
    type CreateChildframe = 
      TraceEvent.WebLocalFrameImpl.CreateChildframe.X;
  
    type CreateFrameView = 
      TraceEvent.WebLocalFrameImpl.CreateFrameView.X;
  
    namespace CreateChildframe {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebLocalFrameImpl::createChildframe';
        // Denotes the end of the event CreateChildframe.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateFrameView {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebLocalFrameImpl::createFrameView';
        // Denotes the end of the event CreateFrameView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebResourceRequestSender {
    type OnReceivedRedirect = 
      TraceEvent.WebResourceRequestSender.OnReceivedRedirect.X;
  
    type OnReceivedResponse = 
      TraceEvent.WebResourceRequestSender.OnReceivedResponse.X;
  
    type OnRequestComplete = 
      TraceEvent.WebResourceRequestSender.OnRequestComplete.X;
  
    type OnStartLoadingResponseBody = 
      TraceEvent.WebResourceRequestSender.OnStartLoadingResponseBody.X;
  
    namespace OnReceivedRedirect {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebResourceRequestSender::OnReceivedRedirect';
        // Denotes the end of the event OnReceivedRedirect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnReceivedResponse {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebResourceRequestSender::OnReceivedResponse';
        // Denotes the end of the event OnReceivedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRequestComplete {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebResourceRequestSender::OnRequestComplete';
        // Denotes the end of the event OnRequestComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnStartLoadingResponseBody {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebResourceRequestSender::OnStartLoadingResponseBody';
        // Denotes the end of the event OnStartLoadingResponseBody.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebServiceWorkerProviderImpl {
    type GetRegistration = 
      TraceEvent.WebServiceWorkerProviderImpl.GetRegistration.F |
      TraceEvent.WebServiceWorkerProviderImpl.GetRegistration.S;
  
    namespace GetRegistration {
      interface F extends TraceEvent.Base {
        args: {
          Error: string;
          Message: string;
        };
        id2: {
          local: string;
        };
        name: 'WebServiceWorkerProviderImpl::GetRegistration';
        // Denotes the ending of the async event GetRegistration.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends TraceEvent.Base {
        args: {
          'Document URL': string;
        };
        id2: {
          local: string;
        };
        name: 'WebServiceWorkerProviderImpl::GetRegistration';
        // Denotes the beginning of the async event GetRegistration.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebURLLoader {
    type LoadAsynchronously = 
      TraceEvent.WebURLLoader.LoadAsynchronously.X;
  
    namespace Context {
      type Cancel = 
        TraceEvent.WebURLLoader.Context.Cancel.X;
    
      type OnCompletedRequest = 
        TraceEvent.WebURLLoader.Context.OnCompletedRequest.X;
    
      type OnReceivedRedirect = 
        TraceEvent.WebURLLoader.Context.OnReceivedRedirect.f |
        TraceEvent.WebURLLoader.Context.OnReceivedRedirect.s |
        TraceEvent.WebURLLoader.Context.OnReceivedRedirect.X;
    
      type OnReceivedResponse = 
        TraceEvent.WebURLLoader.Context.OnReceivedResponse.f |
        TraceEvent.WebURLLoader.Context.OnReceivedResponse.s |
        TraceEvent.WebURLLoader.Context.OnReceivedResponse.X;
    
      type OnStartLoadingResponseBody = 
        TraceEvent.WebURLLoader.Context.OnStartLoadingResponseBody.f |
        TraceEvent.WebURLLoader.Context.OnStartLoadingResponseBody.I |
        TraceEvent.WebURLLoader.Context.OnStartLoadingResponseBody.s |
        TraceEvent.WebURLLoader.Context.OnStartLoadingResponseBody.X;
    
      type Start = 
        TraceEvent.WebURLLoader.Context.Start.f |
        TraceEvent.WebURLLoader.Context.Start.s |
        TraceEvent.WebURLLoader.Context.Start.X;
    
      namespace Cancel {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoader::Context::Cancel';
          // Denotes the end of the event Cancel.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnCompletedRequest {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoader::Context::OnCompletedRequest';
          // Denotes the end of the event OnCompletedRequest.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedRedirect {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoader::Context::OnReceivedRedirect';
          // Denotes the ending of the async flow event OnReceivedRedirect.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoader::Context::OnReceivedRedirect';
          // Denotes the beginning of the async flow event OnReceivedRedirect.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoader::Context::OnReceivedRedirect';
          // Denotes the end of the event OnReceivedRedirect.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedResponse {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoader::Context::OnReceivedResponse';
          // Denotes the ending of the async flow event OnReceivedResponse.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoader::Context::OnReceivedResponse';
          // Denotes the beginning of the async flow event OnReceivedResponse.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoader::Context::OnReceivedResponse';
          // Denotes the end of the event OnReceivedResponse.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnStartLoadingResponseBody {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoader::Context::OnStartLoadingResponseBody';
          // Denotes the ending of the async flow event OnStartLoadingResponseBody.
          ph: 'f';
        }
      
        interface I extends TraceEvent.Base {
          args: {
          
          };
          name: 'WebURLLoader::Context::OnStartLoadingResponseBody';
          // Denotes an event OnStartLoadingResponseBody. There are no begining/ending phases.
          ph: 'I';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoader::Context::OnStartLoadingResponseBody';
          // Denotes the beginning of the async flow event OnStartLoadingResponseBody.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoader::Context::OnStartLoadingResponseBody';
          // Denotes the end of the event OnStartLoadingResponseBody.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Start {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoader::Context::Start';
          // Denotes the ending of the async flow event Start.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoader::Context::Start';
          // Denotes the beginning of the async flow event Start.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoader::Context::Start';
          // Denotes the end of the event Start.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace LoadAsynchronously {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebURLLoader::loadAsynchronously';
        // Denotes the end of the event LoadAsynchronously.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebURLLoaderImpl {
    type LoadAsynchronously = 
      TraceEvent.WebURLLoaderImpl.LoadAsynchronously.X;
  
    namespace Context {
      type Cancel = 
        TraceEvent.WebURLLoaderImpl.Context.Cancel.X;
    
      type OnCompletedRequest = 
        TraceEvent.WebURLLoaderImpl.Context.OnCompletedRequest.X;
    
      type OnReceivedRedirect = 
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedRedirect.f |
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedRedirect.s |
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedRedirect.X;
    
      type OnReceivedResponse = 
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedResponse.f |
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedResponse.s |
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedResponse.X;
    
      type OnStartLoadingResponseBody = 
        TraceEvent.WebURLLoaderImpl.Context.OnStartLoadingResponseBody.f |
        TraceEvent.WebURLLoaderImpl.Context.OnStartLoadingResponseBody.s |
        TraceEvent.WebURLLoaderImpl.Context.OnStartLoadingResponseBody.X;
    
      type Start = 
        TraceEvent.WebURLLoaderImpl.Context.Start.f |
        TraceEvent.WebURLLoaderImpl.Context.Start.s |
        TraceEvent.WebURLLoaderImpl.Context.Start.X;
    
      namespace Cancel {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoaderImpl::Context::Cancel';
          // Denotes the end of the event Cancel.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnCompletedRequest {
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoaderImpl::Context::OnCompletedRequest';
          // Denotes the end of the event OnCompletedRequest.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedRedirect {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoaderImpl::Context::OnReceivedRedirect';
          // Denotes the ending of the async flow event OnReceivedRedirect.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoaderImpl::Context::OnReceivedRedirect';
          // Denotes the beginning of the async flow event OnReceivedRedirect.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoaderImpl::Context::OnReceivedRedirect';
          // Denotes the end of the event OnReceivedRedirect.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedResponse {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoaderImpl::Context::OnReceivedResponse';
          // Denotes the ending of the async flow event OnReceivedResponse.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoaderImpl::Context::OnReceivedResponse';
          // Denotes the beginning of the async flow event OnReceivedResponse.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoaderImpl::Context::OnReceivedResponse';
          // Denotes the end of the event OnReceivedResponse.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnStartLoadingResponseBody {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoaderImpl::Context::OnStartLoadingResponseBody';
          // Denotes the ending of the async flow event OnStartLoadingResponseBody.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoaderImpl::Context::OnStartLoadingResponseBody';
          // Denotes the beginning of the async flow event OnStartLoadingResponseBody.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoaderImpl::Context::OnStartLoadingResponseBody';
          // Denotes the end of the event OnStartLoadingResponseBody.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Start {
        interface f extends TraceEvent.Base {
          args: {
          
          };
          bp: string;
          id: number;
          name: 'WebURLLoaderImpl::Context::Start';
          // Denotes the ending of the async flow event Start.
          ph: 'f';
        }
      
        interface s extends TraceEvent.Base {
          args: {
          
          };
          id: number;
          name: 'WebURLLoaderImpl::Context::Start';
          // Denotes the beginning of the async flow event Start.
          ph: 's';
        }
      
        interface X extends TraceEvent.Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'WebURLLoaderImpl::Context::Start';
          // Denotes the end of the event Start.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace LoadAsynchronously {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebURLLoaderImpl::loadAsynchronously';
        // Denotes the end of the event LoadAsynchronously.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebView {
    type AttachWebContentsNativeView = 
      TraceEvent.WebView.AttachWebContentsNativeView.X;
  
    type DetachWebContentsNativeView = 
      TraceEvent.WebView.DetachWebContentsNativeView.X;
  
    type SetWebContents = 
      TraceEvent.WebView.SetWebContents.X;
  
    namespace AttachWebContentsNativeView {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebView::AttachWebContentsNativeView';
        // Denotes the end of the event AttachWebContentsNativeView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DetachWebContentsNativeView {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebView::DetachWebContentsNativeView';
        // Denotes the end of the event DetachWebContentsNativeView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetWebContents {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebView::SetWebContents';
        // Denotes the end of the event SetWebContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebViewImpl {
    type BeginFrame = 
      TraceEvent.WebViewImpl.BeginFrame.X;
  
    type HandleInputEvent = 
      TraceEvent.WebViewImpl.HandleInputEvent.X;
  
    type HandleKeyEvent = 
      TraceEvent.WebViewImpl.HandleKeyEvent.X;
  
    type UpdateAllLifecyclePhases = 
      TraceEvent.WebViewImpl.UpdateAllLifecyclePhases.X;
  
    namespace BeginFrame {
      interface X extends TraceEvent.Base {
        args: {
          frameTime: number;
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::beginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleInputEvent {
      interface X extends TraceEvent.Base {
        args: {
          type: string;
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::handleInputEvent';
        // Denotes the end of the event HandleInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleKeyEvent {
      interface X extends TraceEvent.Base {
        args: {
          text: string;
          type: string;
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::handleKeyEvent';
        // Denotes the end of the event HandleKeyEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateAllLifecyclePhases {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::updateAllLifecyclePhases';
        // Denotes the end of the event UpdateAllLifecyclePhases.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Widget {
    type Init = 
      TraceEvent.Widget.Init.X;
  
    type OnMouseEvent = 
      TraceEvent.Widget.OnMouseEvent.X;
  
    type OnNativeWidgetMove = 
      TraceEvent.Widget.OnNativeWidgetMove.X;
  
    type OnNativeWidgetSizeChanged = 
      TraceEvent.Widget.OnNativeWidgetSizeChanged.X;
  
    namespace Init {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Widget::Init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnMouseEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Widget::OnMouseEvent';
        // Denotes the end of the event OnMouseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnNativeWidgetMove {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Widget::OnNativeWidgetMove';
        // Denotes the end of the event OnNativeWidgetMove.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnNativeWidgetSizeChanged {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Widget::OnNativeWidgetSizeChanged';
        // Denotes the end of the event OnNativeWidgetSizeChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WidgetBase {
    type DidCommitAndDrawCompositorFrame = 
      TraceEvent.WidgetBase.DidCommitAndDrawCompositorFrame.X;
  
    type UpdateSelectionBounds = 
      TraceEvent.WidgetBase.UpdateSelectionBounds.X;
  
    type UpdateTextInputStateInternal = 
      TraceEvent.WidgetBase.UpdateTextInputStateInternal.X;
  
    type UpdateVisualProperties = 
      TraceEvent.WidgetBase.UpdateVisualProperties.X;
  
    type WasHidden = 
      TraceEvent.WidgetBase.WasHidden.X;
  
    type WasShown = 
      TraceEvent.WidgetBase.WasShown.X;
  
    type WillBeginMainFrame = 
      TraceEvent.WidgetBase.WillBeginMainFrame.X;
  
    namespace DidCommitAndDrawCompositorFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::DidCommitAndDrawCompositorFrame';
        // Denotes the end of the event DidCommitAndDrawCompositorFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateSelectionBounds {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::UpdateSelectionBounds';
        // Denotes the end of the event UpdateSelectionBounds.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTextInputStateInternal {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::UpdateTextInputStateInternal';
        // Denotes the end of the event UpdateTextInputStateInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateVisualProperties {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::UpdateVisualProperties';
        // Denotes the end of the event UpdateVisualProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasHidden {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::WasHidden';
        // Denotes the end of the event WasHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasShown {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::WasShown';
        // Denotes the end of the event WasShown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillBeginMainFrame {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetBase::WillBeginMainFrame';
        // Denotes the end of the event WillBeginMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WidgetBaseInputHandler {
    type OnHandleInputEvent = 
      TraceEvent.WidgetBaseInputHandler.OnHandleInputEvent.X;
  
    namespace OnHandleInputEvent {
      interface X extends TraceEvent.Base {
        args: {
          event: string;
        };
        // Duration.
        dur: number;
        name: 'WidgetBaseInputHandler::OnHandleInputEvent';
        // Denotes the end of the event OnHandleInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WidgetHostMsg_Close_ACK {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_Close_ACK';
      // Denotes the end of the event WidgetHostMsg_Close_ACK.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetInputHandlerImpl {
    type DispatchEvent = 
      TraceEvent.WidgetInputHandlerImpl.DispatchEvent.X;
  
    namespace DispatchEvent {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetInputHandlerImpl::DispatchEvent';
        // Denotes the end of the event DispatchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WidgetInputHandlerManager {
    type DidHandleInputEventSentToCompositor = 
      TraceEvent.WidgetInputHandlerManager.DidHandleInputEventSentToCompositor.X;
  
    type DidHandleInputEventSentToMain = 
      TraceEvent.WidgetInputHandlerManager.DidHandleInputEventSentToMain.X;
  
    namespace DidHandleInputEventSentToCompositor {
      interface X extends TraceEvent.Base {
        args: {
          Disposition: number;
        };
        // Duration.
        dur: number;
        name: 'WidgetInputHandlerManager::DidHandleInputEventSentToCompositor';
        // Denotes the end of the event DidHandleInputEventSentToCompositor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidHandleInputEventSentToMain {
      interface X extends TraceEvent.Base {
        args: {
          ack_state: number;
        };
        // Duration.
        dur: number;
        name: 'WidgetInputHandlerManager::DidHandleInputEventSentToMain';
        // Denotes the end of the event DidHandleInputEventSentToMain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WillFailRequest {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WillFailRequest';
      // Denotes the beginning of the nestable async flow event WillFailRequest.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WillFailRequest';
      // Denotes a step into the nestable async flow event WillFailRequest.
      ph: 'e';
      scope: string;
    }
  }

  namespace WillProcessResponse {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WillProcessResponse';
      // Denotes the beginning of the nestable async flow event WillProcessResponse.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WillProcessResponse';
      // Denotes a step into the nestable async flow event WillProcessResponse.
      ph: 'e';
      scope: string;
    }
  }

  namespace WillStartRequest {
    interface b extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WillStartRequest';
      // Denotes the beginning of the nestable async flow event WillStartRequest.
      ph: 'b';
      scope: string;
    }
  
    interface e extends TraceEvent.Base {
      args: {
      
      };
      id: string;
      name: 'WillStartRequest';
      // Denotes a step into the nestable async flow event WillStartRequest.
      ph: 'e';
      scope: string;
    }
  }

  namespace Worker_pausable_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'worker_pausable_tq';
      // Denotes the end of the event Worker_pausable_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Worker_thread_internal_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'worker_thread_internal_tq';
      // Denotes the end of the event Worker_thread_internal_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Worker_throttleable_tq {
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'worker_throttleable_tq';
      // Denotes the end of the event Worker_throttleable_tq.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WorkerThreadactive {
    interface B extends TraceEvent.Base {
      args: {
      
      };
      name: 'WorkerThread active';
      // Denotes the beginning of the event WorkerThreadactive.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends TraceEvent.Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WorkerThread active';
      // Denotes the end of the event WorkerThreadactive.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WorkerThreadborn {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'WorkerThread born';
      // Denotes an event WorkerThreadborn. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WorkerThreaddead {
    interface I extends TraceEvent.Base {
      args: {
      
      };
      name: 'WorkerThread dead';
      // Denotes an event WorkerThreaddead. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WritableFile {
    type Sync = 
      TraceEvent.WritableFile.Sync.X;
  
    namespace Sync {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WritableFile::Sync';
        // Denotes the end of the event Sync.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace X509Certificate {
    type CreateFromDERCertChain = 
      TraceEvent.X509Certificate.CreateFromDERCertChain.X;
  
    namespace CreateFromDERCertChain {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'X509Certificate::CreateFromDERCertChain';
        // Denotes the end of the event CreateFromDERCertChain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace XHRLoad {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'XHRLoad';
      // Denotes the end of the event XHRLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace XHRReadyStateChange {
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          readyState: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'XHRReadyStateChange';
      // Denotes the end of the event XHRReadyStateChange.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace YieldParserForScriptLoad {
    interface f extends TraceEvent.Base {
      args: {
      
      };
      bp: string;
      id: number;
      name: 'YieldParserForScriptLoad';
      // Denotes the ending of the async flow event YieldParserForScriptLoad.
      ph: 'f';
    }
  
    interface s extends TraceEvent.Base {
      args: {
      
      };
      id: number;
      name: 'YieldParserForScriptLoad';
      // Denotes the beginning of the async flow event YieldParserForScriptLoad.
      ph: 's';
    }
  
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'YieldParserForScriptLoad';
      // Denotes the end of the event YieldParserForScriptLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace YieldParserForScriptLoadAndBlockingResources {
    interface f extends TraceEvent.Base {
      args: {
      
      };
      bp: string;
      id: number;
      name: 'YieldParserForScriptLoadAndBlockingResources';
      // Denotes the ending of the async flow event YieldParserForScriptLoadAndBlockingResources.
      ph: 'f';
    }
  
    interface s extends TraceEvent.Base {
      args: {
      
      };
      id: number;
      name: 'YieldParserForScriptLoadAndBlockingResources';
      // Denotes the beginning of the async flow event YieldParserForScriptLoadAndBlockingResources.
      ph: 's';
    }
  
    interface X extends TraceEvent.Base {
      args: {
        data: {
          frame: string;
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'YieldParserForScriptLoadAndBlockingResources';
      // Denotes the end of the event YieldParserForScriptLoadAndBlockingResources.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ZeroSuggestProvider {
    type Start = 
      TraceEvent.ZeroSuggestProvider.Start.X;
  
    namespace Start {
      interface X extends TraceEvent.Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ZeroSuggestProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ZonesAndDomReady {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'zonesAndDomReady';
      // Denotes a mark of the event ZonesAndDomReady.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ZonesReady {
    interface R extends TraceEvent.Base {
      args: {
        data: {
          navigationId: string;
          startTime?: number;
        };
      };
      name: 'zonesReady';
      // Denotes a mark of the event ZonesReady.
      ph: 'R';
      s?: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }
}
